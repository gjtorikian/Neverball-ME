These are changes of my Android SDL port over the official SDL port, at the last point where I've synced them
TODO: merge this

--- SDL_renderer_gles.c	2011-12-05 14:18:19.517975982 +0200
+++ /home/pelya/src/endless_space/SDL-android/video/SDL_renderer_gles.c	2011-12-05 13:57:25.000000000 +0200
@@ -20,15 +20,29 @@
     slouken@libsdl.org
 */
 #include "SDL_config.h"
+#include "SDL_version.h"
 
 #if SDL_VIDEO_RENDER_OGL_ES
 
+#if SDL_VERSION_ATLEAST(1,3,0)
 #include "SDL_video.h"
 #include "SDL_opengles.h"
 #include "SDL_sysvideo.h"
+#else
+#include "SDL_video-1.3.h"
+#include "SDL_sysvideo-1.3.h"
+#endif
+#include "SDL_opengles.h"
 #include "SDL_pixels_c.h"
 #include "SDL_rect_c.h"
+#if SDL_VERSION_ATLEAST(1,3,0)
 #include "SDL_yuv_sw_c.h"
+#endif
+#ifdef ANDROID
+#include <android/log.h>
+#else
+#define __android_log_print(...)
+#endif
 
 #if defined(__QNXNTO__)
 /* Include QNX system header to check QNX version later */
@@ -112,15 +126,14 @@
       SDL_TEXTUREMODULATE_ALPHA),
      (SDL_BLENDMODE_NONE | SDL_BLENDMODE_MASK |
       SDL_BLENDMODE_BLEND | SDL_BLENDMODE_ADD | SDL_BLENDMODE_MOD),
-     (SDL_SCALEMODE_NONE | SDL_SCALEMODE_FAST | SDL_SCALEMODE_SLOW), 6,
+     (SDL_SCALEMODE_NONE | SDL_SCALEMODE_FAST | SDL_SCALEMODE_SLOW), 5,
      {
       /* OpenGL ES 1.x supported formats list */
       SDL_PIXELFORMAT_RGBA4444,
       SDL_PIXELFORMAT_RGBA5551,
       SDL_PIXELFORMAT_RGB565,
       SDL_PIXELFORMAT_RGB24,
-      SDL_PIXELFORMAT_BGR888,
-      SDL_PIXELFORMAT_ABGR8888},
+      SDL_PIXELFORMAT_RGBA8888},
      0,
      0}
 };
@@ -213,11 +226,13 @@
     GLint value;
     int doublebuffer;
 
+#if SDL_VERSION_ATLEAST(1,3,0)
     if (!(window->flags & SDL_WINDOW_OPENGL)) {
         if (SDL_RecreateWindow(window, window->flags | SDL_WINDOW_OPENGL) < 0) {
             return NULL;
         }
     }
+#endif
 
     renderer = (SDL_Renderer *) SDL_calloc(1, sizeof(*renderer));
     if (!renderer) {
@@ -295,11 +310,15 @@
         renderer->info.flags |= SDL_RENDERER_PRESENTVSYNC;
     }
 
+#if SDL_VERSION_ATLEAST(1,3,0)
+    // Always double-buffered
+#else
     if (SDL_GL_GetAttribute(SDL_GL_DOUBLEBUFFER, &doublebuffer) == 0) {
         if (!doublebuffer) {
             renderer->info.flags |= SDL_RENDERER_SINGLEBUFFER;
         }
     }
+#endif
 #if SDL_VIDEO_DRIVER_PANDORA
     data->GL_OES_draw_texture_supported = SDL_FALSE;
     data->useDrawTexture = SDL_FALSE;
@@ -311,6 +330,10 @@
         data->GL_OES_draw_texture_supported = SDL_FALSE;
         data->useDrawTexture = SDL_FALSE;
     }
+#ifdef ANDROID
+    data->GL_OES_draw_texture_supported = SDL_TRUE;
+    data->useDrawTexture = SDL_TRUE;
+#endif
 #endif
 
     data->glGetIntegerv(GL_MAX_TEXTURE_SIZE, &value);
@@ -337,14 +360,27 @@
     if (SDL_GL_MakeCurrent(window, data->context) < 0) {
         return -1;
     }
+
+    /* Set up parameters for rendering */
+    data->blendMode = -1;
+    data->glDisable(GL_DEPTH_TEST);
+    data->glDisable(GL_CULL_FACE);
+    data->updateSize = SDL_TRUE;
+
     if (data->updateSize) {
         data->glMatrixMode(GL_PROJECTION);
         data->glLoadIdentity();
         data->glMatrixMode(GL_MODELVIEW);
         data->glLoadIdentity();
+#if SDL_VIDEO_RENDER_RESIZE
+        data->glViewport(0, 0, window->display->desktop_mode.w, window->display->desktop_mode.h);
+        data->glOrthof(0.0, (GLfloat) window->display->desktop_mode.w, (GLfloat) window->display->desktop_mode.h,
+                       0.0, 0.0, 1.0);
+#else
         data->glViewport(0, 0, window->w, window->h);
-        data->glOrthof(0.0, (GLfloat) window->w, (GLfloat) window->h, 0.0,
-                       0.0, 1.0);
+        data->glOrthof(0.0, (GLfloat) window->w, (GLfloat) window->h, 
+                       0.0, 0.0, 1.0);
+#endif
         data->updateSize = SDL_FALSE;
     }
     return 0;
@@ -388,6 +424,7 @@
         break;
     case SDL_PIXELFORMAT_BGR888:
     case SDL_PIXELFORMAT_ABGR8888:
+    case SDL_PIXELFORMAT_RGBA8888:
         internalFormat = GL_RGBA;
         format = GL_RGBA;
         type = GL_UNSIGNED_BYTE;
@@ -419,7 +456,8 @@
         return -1;
     }
 
-    if (texture->access == SDL_TEXTUREACCESS_STREAMING) {
+    if (texture->access == SDL_TEXTUREACCESS_STREAMING) 
+    {
         data->pitch = texture->w * SDL_BYTESPERPIXEL(texture->format);
         data->pixels = SDL_malloc(texture->h * data->pitch);
         if (!data->pixels) {
@@ -441,6 +479,11 @@
     texture_h = power_of_2(texture->h);
     data->texw = (GLfloat) texture->w / texture_w;
     data->texh = (GLfloat) texture->h / texture_h;
+    if( renderer->info.max_texture_width < texture_w || renderer->info.max_texture_height < texture_h )
+        __android_log_print(ANDROID_LOG_WARN, "libSDL", "GLES: Allocated texture of size %dx%d which is bigger than largest possible device texture %dx%d",
+                            texture_w, texture_h, renderer->info.max_texture_width, renderer->info.max_texture_height );
+    else if( texture_w > 1024 || texture_h > 1024 )
+        __android_log_print(ANDROID_LOG_WARN, "libSDL", "GLES: Allocated texture of size %dx%d which is bigger than 1024x1024 - this code will not work on HTC G1", texture_w, texture_h );
 
     data->format = format;
     data->formattype = type;
@@ -557,13 +600,36 @@
     GLES_RenderData *renderdata = (GLES_RenderData *) renderer->driverdata;
     GLES_TextureData *data = (GLES_TextureData *) texture->driverdata;
     GLenum result;
+    int bpp = SDL_BYTESPERPIXEL(texture->format);
+    void * temp_buffer;
+    void * temp_ptr;
+    int i;
 
     renderdata->glGetError();
     renderdata->glEnable(data->type);
     SetupTextureUpdate(renderdata, texture, pitch);
+
+    if( rect->w * bpp == pitch ) {
+         temp_buffer = (void *)pixels; /* No need to reformat */
+    } else {
+         /* Reformatting of mem area required */
+         temp_buffer = SDL_malloc(rect->w * rect->h * bpp);
+         temp_ptr = temp_buffer;
+         for (i = 0; i < rect->h; i++) {
+             SDL_memcpy(temp_ptr, pixels, rect->w * bpp);
+             temp_ptr += rect->w * bpp;
+             pixels += pitch;
+         }
+    }
+
     renderdata->glTexSubImage2D(data->type, 0, rect->x, rect->y, rect->w,
                                 rect->h, data->format, data->formattype,
-                                pixels);
+                                temp_buffer);
+
+    if( temp_buffer != pixels ) {
+        SDL_free(temp_buffer);
+    }
+
     renderdata->glDisable(data->type);
     result = renderdata->glGetError();
     if (result != GL_NO_ERROR) {
@@ -887,7 +953,13 @@
         cropRect[3] = -srcrect->h;
         data->glTexParameteriv(GL_TEXTURE_2D, GL_TEXTURE_CROP_RECT_OES,
                                cropRect);
-        data->glDrawTexiOES(dstrect->x, window->h - dstrect->y - dstrect->h,
+        //__android_log_print(ANDROID_LOG_INFO, "libSDL", "GLES_RenderCopy glDrawTexiOES(%d, %d, %d, %d) cropRect %d:%d:%d:%d", dstrect->x, window->display->desktop_mode.h - dstrect->y - dstrect->h, dstrect->w, dstrect->h, cropRect[0], cropRect[1], cropRect[2], cropRect[3]);
+        data->glDrawTexiOES(dstrect->x,
+#if SDL_VIDEO_RENDER_RESIZE
+                            window->display->desktop_mode.h - dstrect->y - dstrect->h,
+#else
+                            window->h - dstrect->y - dstrect->h,
+#endif
                             0, dstrect->w, dstrect->h);
     } else {
 
