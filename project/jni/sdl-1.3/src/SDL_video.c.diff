These are changes of my Android SDL port over the official SDL port, at the last point where I've synced them
TODO: merge this

--- SDL_video.c	2011-12-05 14:18:19.537975981 +0200
+++ /home/pelya/src/endless_space/SDL-android/project/jni/sdl-1.3/src/video/SDL_video.c	2011-12-05 14:20:10.817974963 +0200
@@ -33,6 +33,9 @@
 #include "SDL_renderer_sw.h"
 #include "../events/SDL_sysevents.h"
 #include "../events/SDL_events_c.h"
+#ifdef ANDROID
+#include <android/log.h>
+#endif
 
 #if SDL_VIDEO_DRIVER_WIN32
 #include "win32/SDL_win32video.h"
@@ -98,15 +101,15 @@
 #if SDL_VIDEO_DRIVER_UIKIT
     &UIKIT_bootstrap,
 #endif
+#if SDL_VIDEO_DRIVER_ANDROID
+	&ANDROID_bootstrap,
+#endif
 #if SDL_VIDEO_DRIVER_DUMMY
     &DUMMY_bootstrap,
 #endif
 #if SDL_VIDEO_DRIVER_PANDORA
     &PND_bootstrap,
 #endif
-#if SDL_VIDEO_DRIVER_ANDROID
-    &Android_bootstrap,
-#endif
     NULL
 };
 
@@ -2396,6 +2399,36 @@
     return renderer->RenderClear(renderer);
 }
 
+#if SDL_VIDEO_RENDER_RESIZE
+
+static inline void
+SDL_RESIZE_resizePoints(int realW, int fakeW, int realH, int fakeH,
+                        const SDL_Point * src, SDL_Point * dest, int count )
+{
+    int i;
+    for( i = 0; i < count; i++ ) {
+        dest[i].x = src[i].x * realW / fakeW;
+        dest[i].y = src[i].y * realH / fakeH;
+    }
+}
+
+static inline void
+SDL_RESIZE_resizeRects(int realW, int fakeW, int realH, int fakeH,
+                       const SDL_Rect ** src, SDL_Rect * dest, int count )
+{
+    int i;
+    for( i = 0; i < count; i++ ) {
+        // Calculate bottom-right corner instead of width/height, and substract upper-left corner,
+        // otherwise we'll have rounding errors and holes between textures
+        dest[i].x = src[i]->x * realW / fakeW;
+        dest[i].y = src[i]->y * realH / fakeH;
+        dest[i].w = (src[i]->w + src[i]->x) * realW / fakeW - dest[i].x;
+        dest[i].h = (src[i]->h + src[i]->y) * realH / fakeH - dest[i].y;
+    }
+}
+
+#endif
+
 int
 SDL_RenderDrawPoint(int x, int y)
 {
@@ -2403,6 +2436,7 @@
 
     point.x = x;
     point.y = y;
+
     return SDL_RenderDrawPoints(&point, 1);
 }
 
@@ -2410,6 +2444,9 @@
 SDL_RenderDrawPoints(const SDL_Point * points, int count)
 {
     SDL_Renderer *renderer;
+#if SDL_VIDEO_RENDER_RESIZE
+    int realW, realH, fakeW, fakeH, ret;
+#endif
 
     if (!points) {
         SDL_SetError("SDL_RenderDrawPoints(): Passed NULL points");
@@ -2427,6 +2464,26 @@
     if (count < 1) {
         return 0;
     }
+
+#if SDL_VIDEO_RENDER_RESIZE
+    realW = renderer->window->display->desktop_mode.w;
+    realH = renderer->window->display->desktop_mode.h;
+    fakeW = renderer->window->w;
+    fakeH = renderer->window->h;
+    //if( fakeW > realW || fakeH > realH )
+    {
+        SDL_Point * resized = SDL_stack_alloc( SDL_Point, count );
+        if( ! resized ) {
+            SDL_OutOfMemory();
+            return -1;
+        }
+        SDL_RESIZE_resizePoints( realW, fakeW, realH, fakeH, points, resized, count );
+        ret = renderer->RenderDrawPoints(renderer, resized, count);
+        SDL_stack_free(resized);
+        return ret;
+    }
+#endif
+
     return renderer->RenderDrawPoints(renderer, points, count);
 }
 
@@ -2446,6 +2503,9 @@
 SDL_RenderDrawLines(const SDL_Point * points, int count)
 {
     SDL_Renderer *renderer;
+#if SDL_VIDEO_RENDER_RESIZE
+    int realW, realH, fakeW, fakeH, ret;
+#endif
 
     if (!points) {
         SDL_SetError("SDL_RenderDrawLines(): Passed NULL points");
@@ -2463,6 +2523,26 @@
     if (count < 2) {
         return 0;
     }
+
+#if SDL_VIDEO_RENDER_RESIZE
+    realW = renderer->window->display->desktop_mode.w;
+    realH = renderer->window->display->desktop_mode.h;
+    fakeW = renderer->window->w;
+    fakeH = renderer->window->h;
+    //if( fakeW > realW || fakeH > realH )
+    {
+        SDL_Point * resized = SDL_stack_alloc( SDL_Point, count );
+        if( ! resized ) {
+            SDL_OutOfMemory();
+            return -1;
+        }
+        SDL_RESIZE_resizePoints( realW, fakeW, realH, fakeH, points, resized, count );
+        ret = renderer->RenderDrawLines(renderer, resized, count);
+        SDL_stack_free(resized);
+        return ret;
+    }
+#endif
+
     return renderer->RenderDrawLines(renderer, points, count);
 }
 
@@ -2477,6 +2557,9 @@
 {
     SDL_Renderer *renderer;
     int i;
+#if SDL_VIDEO_RENDER_RESIZE
+    int realW, realH, fakeW, fakeH, ret;
+#endif
 
     if (!rects) {
         SDL_SetError("SDL_RenderDrawRects(): Passed NULL rects");
@@ -2509,6 +2592,37 @@
             return renderer->RenderDrawRects(renderer, &rect, 1);
         }
     }
+
+#if SDL_VIDEO_RENDER_RESIZE
+    realW = renderer->window->display->desktop_mode.w;
+    realH = renderer->window->display->desktop_mode.h;
+    fakeW = renderer->window->w;
+    fakeH = renderer->window->h;
+    //if( fakeW > realW || fakeH > realH )
+    {
+        SDL_Rect * resized = SDL_stack_alloc( SDL_Rect, count );
+        if( ! resized ) {
+            SDL_OutOfMemory();
+            return -1;
+        }
+
+        const SDL_Rect ** resizedPtrs = SDL_stack_alloc( const SDL_Rect *, count );
+        if( ! resizedPtrs ) {
+            SDL_OutOfMemory();
+            return -1;
+        }
+
+        for( i = 0; i < count; i++ ) {
+            resizedPtrs[i] = &(resized[i]);
+        }
+        SDL_RESIZE_resizeRects( realW, fakeW, realH, fakeH, rects, resized, count );
+        ret = renderer->RenderDrawRects(renderer, resizedPtrs, count);
+        SDL_stack_free(resizedPtrs);
+        SDL_stack_free(resized);
+        return ret;
+    }
+#endif
+
     return renderer->RenderDrawRects(renderer, rects, count);
 }
 
@@ -2523,6 +2637,9 @@
 {
     SDL_Renderer *renderer;
     int i;
+#if SDL_VIDEO_RENDER_RESIZE
+    int realW, realH, fakeW, fakeH, ret;
+#endif
 
     if (!rects) {
         SDL_SetError("SDL_RenderFillRects(): Passed NULL rects");
@@ -2555,6 +2672,37 @@
             return renderer->RenderFillRects(renderer, &rect, 1);
         }
     }
+
+#if SDL_VIDEO_RENDER_RESIZE
+    realW = renderer->window->display->desktop_mode.w;
+    realH = renderer->window->display->desktop_mode.h;
+    fakeW = renderer->window->w;
+    fakeH = renderer->window->h;
+    //if( fakeW > realW || fakeH > realH )
+    {
+        SDL_Rect * resized = SDL_stack_alloc( SDL_Rect, count );
+        if( ! resized ) {
+            SDL_OutOfMemory();
+            return -1;
+        }
+
+        const SDL_Rect ** resizedPtrs = SDL_stack_alloc( const SDL_Rect *, count );
+        if( ! resizedPtrs ) {
+            SDL_OutOfMemory();
+            return -1;
+        }
+
+        for( i = 0; i < count; i++ ) {
+            resizedPtrs[i] = &(resized[i]);
+        }
+        SDL_RESIZE_resizeRects( realW, fakeW, realH, fakeH, rects, resized, count );
+        ret = renderer->RenderFillRects(renderer, resizedPtrs, count);
+        SDL_stack_free(resizedPtrs);
+        SDL_stack_free(resized);
+        return ret;
+    }
+#endif
+
     return renderer->RenderFillRects(renderer, rects, count);
 }
 
@@ -2566,6 +2714,12 @@
     SDL_Window *window;
     SDL_Rect real_srcrect;
     SDL_Rect real_dstrect;
+#if SDL_VIDEO_RENDER_RESIZE
+    int realW;
+    int realH;
+    int fakeW;
+    int fakeH;
+#endif
 
     CHECK_TEXTURE_MAGIC(texture, -1);
 
@@ -2616,6 +2770,25 @@
         }
     }
 
+#if SDL_VIDEO_RENDER_RESIZE
+    realW = window->display->desktop_mode.w;
+    realH = window->display->desktop_mode.h;
+    fakeW = window->w;
+    fakeH = window->h;
+    //if( fakeW > realW || fakeH > realH )
+    {
+        // Calculate bottom-right corner instead of width/height, and substract upper-left corner,
+        // otherwise we'll have rounding errors and holes between textures
+        real_dstrect.w = (real_dstrect.w + real_dstrect.x) * realW / fakeW;
+        real_dstrect.h = (real_dstrect.h + real_dstrect.y) * realH / fakeH;
+        real_dstrect.x = real_dstrect.x * realW / fakeW;
+        real_dstrect.y = real_dstrect.y * realH / fakeH;
+        real_dstrect.w -= real_dstrect.x;
+        real_dstrect.h -= real_dstrect.y;
+        //__android_log_print(ANDROID_LOG_INFO, "libSDL", "SDL_RenderCopy dest %d:%d+%d+%d desktop_mode %d:%d", (int)real_dstrect.x, (int)real_dstrect.y, (int)real_dstrect.w, (int)real_dstrect.h, (int)realW, (int)realH);
+    }
+#endif
+
     return renderer->RenderCopy(renderer, texture, &real_srcrect,
                                 &real_dstrect);
 }
