{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 308 files for \"LANGUAGE\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/Doxyfile:\n   33  OUTPUT_DIRECTORY       = docs\n   34  \n   35: # The OUTPUT_LANGUAGE tag is used to specify the language in which all \n   36  # documentation generated by doxygen is written. Doxygen will use this \n   37  # information to generate all constant output in the proper language. \n   ..\n   42  # Romanian, Russian, Serbian, Slovak, Slovene, Spanish, Swedish, and Ukrainian.\n   43  \n   44: OUTPUT_LANGUAGE        = English\n   45  \n   46  # This tag can be used to specify the encoding used in the generated output. \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n   96  {\n   97      // GJT: Redid everything, as gettext() does not work in Android NDK: https://github.com/android/platform_bionic/tree/master/libc\n   98:     char *dir = strdup(getenv(\"LANGUAGE\")); // GJT: LANGUAGE is set on Java side\n   99      char filename[11] = \"po/\";   \n  100      strcat(filename, dir);\n\n/Users/gjtorikian/Developer/commandergenius/project/java/Settings.java:\n 2434  		if( Locale.getDefault().getCountry().length() > 0 )\n 2435  			lang = lang + \"_\" + Locale.getDefault().getCountry();\n 2436: 		System.out.println( \"libSDL: setting envvar LANGUAGE to '\" + lang + \"'\");\n 2437  		nativeSetEnv( \"LANG\", lang );\n 2438: 		nativeSetEnv( \"LANGUAGE\", lang );\n 2439  		// TODO: get current user name and set envvar USER, the API is not availalbe on Android 1.6 so I don't bother with this\n 2440  	}\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/neverball.pot:\n   12  \"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n   13  \"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n   14: \"Language-Team: LANGUAGE <LL@li.org>\\n\"\n   15  \"MIME-Version: 1.0\\n\"\n   16  \"Content-Type: text/plain; charset=UTF-8\\n\"\n\n7 matches across 4 files\n\n\nSearching 308 files for \"ANDROID_DA\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.h:\n   34  #define GL_VERSION_ES_CM_1_1 1\n   35  #define PHYSFS_SUPPORTS_ZIP 1 // GJT: For PhysFS zip/apk support\n   36: #define ANDROID_DATA \"assets/data/\"\n   37  \n   38  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_physfs.c:\n  137              #ifdef ANDROID\n  138              static char zipPath[MAXSTR];\n  139:             SAFECPY(zipPath, ANDROID_DATA); // GJT: Android APK game contents are in this folder\n  140              SAFECAT(zipPath, path);\n  141              \n\n2 matches across 2 files\n\n\nSearching 308 files for \"fs_open(\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/demo.c:\n  136      d = NULL;\n  137  \n  138:     if ((fp = fs_open(path, \"r\")))\n  139      {\n  140          d = calloc(1, sizeof (struct demo));\n  ...\n  288      demo.times = times;\n  289  \n  290:     if ((demo_fp = fs_open(demo.filename, \"w\")))\n  291      {\n  292          demo_header_write(demo_fp, &demo);\n  ...\n  395      lockstep_clr(&update_step);\n  396  \n  397:     if ((demo_fp = fs_open(name, \"r\")))\n  398      {\n  399          if (demo_header_read(demo_fp, &demo_replay))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/set.c:\n  104      fs_file fp;\n  105  \n  106:     if ((fp = fs_open(config_cheat() ? s->cheat_scores : s->user_scores, \"w\")))\n  107      {\n  108          int i;\n  ...\n  235      fs_file fp;\n  236  \n  237:     if ((fp = fs_open(config_cheat() ? s->cheat_scores : s->user_scores, \"r\")))\n  238      {\n  239          char buf[MAXSTR];\n  ...\n  270          return 0;\n  271  \n  272:     fin = fs_open(filename, \"r\");\n  273  \n  274      if (!fin)\n  ...\n  389       */\n  390  \n  391:     if ((fin = fs_open(SET_FILE, \"r\")))\n  392      {\n  393          while (read_line(&name, fin))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/audio.c:\n  160          /* Attempt to open the named Ogg stream. */\n  161  \n  162:         if ((fp = fs_open(filename, \"r\")))\n  163          {\n  164              if (ov_open_callbacks(fp, &V->vf, NULL, 0, callbacks) == 0)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/base_image.c:\n   53      /* Initialize all PNG import data structures. */\n   54  \n   55:     if (!(fh = fs_open(filename, \"r\")))\n   56          return NULL;\n   57  \n   ..\n  131      fs_file fp;\n  132  \n  133:     if ((fp = fs_open(filename, \"r\")))\n  134      {\n  135          struct jpeg_decompress_struct cinfo;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/config.c:\n  327      fs_file fh;\n  328  \n  329:     if ((fh = fs_open(USER_CONFIG_FILE, \"r\")))\n  330      {\n  331          char *line, *key, *val;\n  ...\n  403      fs_file fh;\n  404  \n  405:     if (dirty && (fh = fs_open(USER_CONFIG_FILE, \"w\")))\n  406      {\n  407          int i;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs.h:\n   19  int fs_rename(const char *, const char *);\n   20  \n   21: fs_file fs_open(const char *path, const char *mode);\n   22  int     fs_close(fs_file);\n   23  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_common.c:\n  269      data = NULL;\n  270  \n  271:     if ((fh = fs_open(path, \"r\")))\n  272      {\n  273          if ((*datalen = fs_length(fh)) > 0)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_physfs.c:\n  123  /*---------------------------------------------------------------------------*/\n  124  \n  125: fs_file fs_open(const char *path, const char *mode)\n  126  {\n  127      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_rwops.c:\n   63      fs_file fh;\n   64  \n   65:     if ((fh = fs_open(path, mode)))\n   66          return fs_rwops_make(fh);\n   67  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_stdio.c:\n  219  /*---------------------------------------------------------------------------*/\n  220  \n  221: fs_file fs_open(const char *path, const char *mode)\n  222  {\n  223      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/image.c:\n   45      /* Initialize all PNG export data structures. */\n   46  \n   47:     if (!(filep = fs_open(filename, \"w\")))\n   48          return;\n   49      if (!(writep = png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0)))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n  113      char line[MAXSTR];\n  114      LOGI(\"DEBUG po filename: %s\", filename);\n  115:     if ((fin = fs_open(filename, \"r\")))\n  116      {\n  117          LOGI(\"DEBUG opened %s!\", filename);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/mapc.c:\n  437      mp->angle = 45.0f;\n  438  \n  439:     if ((fin = fs_open(name, \"r\")))\n  440      {\n  441          scan_vec4(fin, line, mp->d);\n  ...\n  629      int s0 = fp->sc;\n  630  \n  631:     if ((fin = fs_open(name, \"r\")))\n  632      {\n  633          while (fs_gets(line, MAXSTR, fin))\n  ...\n 2599          fs_set_write_dir(dir_name(dst));\n 2600  \n 2601:         if ((fin = fs_open(base_name(src), \"r\")))\n 2602          {\n 2603              if (!fs_add_path_with_archives(argv[2]))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_base.c:\n  470      memset(fp, 0, sizeof (*fp));\n  471  \n  472:     if ((fin = fs_open(filename, \"r\")))\n  473      {\n  474          res = sol_load_file(fin, fp);\n  ...\n  483      int res = 0;\n  484  \n  485:     if ((fin = fs_open(filename, \"r\")))\n  486      {\n  487          res = sol_load_head(fin, fp);\n  ...\n  738      fs_file fout;\n  739  \n  740:     if ((fout = fs_open(filename, \"w\")))\n  741      {\n  742          sol_stor_file(fout, fp);\n\n25 matches across 14 files\n\n\nSearching 308 files for \"fs_open(\"\" (case sensitive)\n\n0 matches\n\nSearching 308 files for \".tff\" (case sensitive)\n\n0 matches\n\nSearching 308 files for \"ttf\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/AndroidAppSettings.cfg:\n   35  AppVersionCode=1\n   36  AppVersionName=\"1\"\n   37: CompiledLibraries=\"sdl_ttf sdl_mixer ogg vorbis png jpeg\"\n   38  CustomBuildScript=n\n   39  AppCflags='-DANDROID -DRELEASE_BUILD -DPHYSFS_SUPPORTS_ZIP'\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/neverball.sublime-workspace:\n  357  			\"fs_add_path_with_archives\",\n  358  			\"fs_open\",\n  359: 			\".ttf\",\n  360  			\"fs_open\",\n  361  			\"image_load_png\",\n  ...\n  371  			\"fs_add_path_with_archives\",\n  372  			\"GUI_FACE\",\n  373: 			\".ttf\",\n  374  			\"fs_exists\",\n  375  			\"GUI_FACE\",\n  376: 			\".ttf\",\n  377  			\"CONFIG_DATA\",\n  378  			\"pick_data_path\",\n  379  			\"config_paths\",\n  380: 			\".ttf\",\n  381  			\"font/\",\n  382  			\"CONFIG_DATA\",\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.h:\n   21  /*---------------------------------------------------------------------------*/\n   22  \n   23: #define GUI_FACE N_(\"ttf/DejaVuSans-Bold.ttf\")\n   24  \n   25  #define GUI_SML  0\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/image.c:\n   14  \n   15  #include <SDL.h>\n   16: #include <SDL_ttf.h>\n   17  #include <string.h>\n   18  #include <math.h>\n   ..\n  227              if ((src = SDL_ConvertSurface(orig, &fmt, orig->flags)) == NULL)\n  228              {\n  229:                 fprintf(stderr, _(\"Failed to convert SDL_ttf surface: %s\\n\"),\n  230                          SDL_GetError());\n  231  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/image.h:\n    3  \n    4  #include <SDL.h>\n    5: #include <SDL_ttf.h>\n    6  \n    7  #include \"glext.h\"\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/ca.po:\n  641  \n  642  #: share/gui.h:23\n  643: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  644: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  645  \n  646  #: share/image.c:229\n  647  #, c-format\n  648: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  649: msgstr \"La conversió de la superfície SDL_ttf ha fallat: %s\\n\"\n  650  \n  651  #. Translators,\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/de.po:\n  641  \n  642  #: share/gui.h:23\n  643: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  644: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  645  \n  646  #: share/image.c:229\n  647  #, c-format\n  648: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  649: msgstr \"Konvertieren von SDL_ttf surface gescheitert: %s\\n\"\n  650  \n  651  #. Translators,\n  ...\n 1230  \"the platforms to grab the big coins.\\\\\"\n 1231  msgstr \"\"\n 1232: \"Eine sich bewegende Plattform kann ein Problem sein.\\\\Verwenden Sie präzises \"\n 1233  \"Timing, um an Bord zu kommen,\\\\und halten Sie vorsichtig die Balance, um \"\n 1234  \"dort zu bleiben.\\\\Lassen Sie sie nicht unter Ihnen wegschlüpfen!\\\\Nützen Sie \"\n 1235: \"die Plattformen,\\\\um an die großen Münzen zu kommen.\\\\\"\n 1236  \n 1237  #: data/map-easy/peasy.map\n ....\n 1281  \"need\\\\to open the goal.\"\n 1282  msgstr \"\"\n 1283: \"Ist der Ball auf einer sich bewegenden\\\\Plattform, wird er in die Richtung \"\n 1284  \"der\\\\Bewegung gezogen. Benutzen Sie\\\\die Geländer, um den Ball ruhig zu \"\n 1285  \"halten,\\\\und sammeln Sie genug Münzen für das Ziel.\"\n ....\n 1315  #: data/map-fwp/discs.map\n 1316  msgid \"=Discs=\\\\Used correctly, the platforms will take you to the goal.\"\n 1317: msgstr \"=Scheiben=\\\\Gleitende Plattformen richtig nutzen - nur wie?\"\n 1318  \n 1319  #: data/map-fwp/ladybirds.map\n ....\n 1406  msgstr \"\"\n 1407  \"Exaktes Timing bei den Schaltern\\\\synchronisiert die Bewegungen\\\\der \"\n 1408: \"Plattformen. Bewegen Sie sich\\\\schnell über die Zwischenräume!\\\\\"\n 1409  \n 1410  #: data/map-hard/grid.map\n ....\n 1500  \"\\\\together in the middle.\\\\\"\n 1501  msgstr \"\"\n 1502: \"Benützen Sie die Schalter, um die Plattformen in\\\\Bewegung zu setzen. Achten \"\n 1503  \"Sie auf das Timing,\\\\so dass sie sich in der Mitte treffen.\\\\\"\n 1504  \n ....\n 1538  \"\\\\for safe landing.\\\\\\\\The manual view may help here.\\\\\"\n 1539  msgstr \"\"\n 1540: \"Verwenden Sie Ihren Schwung,\\\\um die höher gelegenen Plattformen\\\\zu \"\n 1541  \"erreichen, doch halten Sie den Ball\\\\unter Kontrolle, um sicher zu landen.\\\\\"\n 1542  \"\\\\Die manuelle Kamera könnte hier\\\\von Nutzen sein.\"\n ....\n 1784  \"is reachable.\"\n 1785  msgstr \"\"\n 1786: \"La ballade dansante.\\\\Tanzen Sie auf der Plattform!\\\\Tipp: Nachdem Sie die \"\n 1787: \"letze Plattform\\\\aktiviert haben, umkreisen Sie den\\\\Thwomp, bis das Ziel \"\n 1788  \"erreichbar ist.\"\n 1789  \n ....\n 1797  \"forward.\"\n 1798  msgstr \"\"\n 1799: \"La conduite stressante.\\\\Achtung:\\\\Die Plattform unter dem Ball bewegt sich!\"\n 1800  \n 1801  #: data/map-mym/drive2.map\n ....\n 1804  \"\\\\You would do well to advance.\"\n 1805  msgstr \"\"\n 1806: \"La conduite dangereuse.\\\\Die Plattform unter dem Ball bewegt\\\\sich schnell. \"\n 1807  \"Sie sollten sich\\\\beeilen, vorwärts zu kommen.\"\n 1808  \n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/es.po:\n  637  \n  638  #: share/gui.h:23\n  639: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  640: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  641  \n  642  #: share/image.c:229\n  643  #, c-format\n  644: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  645: msgstr \"Fallo al convertir superficie SDL_ttf: %s\\n\"\n  646  \n  647  #. Translators,\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/fi.po:\n  630  \n  631  #: share/gui.h:23\n  632: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  633  msgstr \"\"\n  634  \n  635  #: share/image.c:229\n  636  #, c-format\n  637: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  638  msgstr \"\"\n  639  \n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/fr.po:\n  620  \n  621  #: share/gui.h:23\n  622: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  623: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  624  \n  625  #: share/image.c:229\n  626  #, c-format\n  627: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  628: msgstr \"Échec lors de la conversion de la surface SDL_ttf : %s\\n\"\n  629  \n  630  #. Translators,\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/gl.po:\n  627  \n  628  #: share/gui.h:23\n  629: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  630: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  631  \n  632  #: share/image.c:229\n  633  #, c-format\n  634: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  635: msgstr \"Non sepuido convertir a superficie SDL_ttf: %s\\n\"\n  636  \n  637  #. Translators,\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/hu.po:\n  621  \n  622  #: share/gui.h:23\n  623: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  624: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  625  \n  626  #: share/image.c:229\n  627  #, c-format\n  628: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  629  msgstr \"Nem sikerült az SDL_ttl felületet átkonvertálni: %s\\n\"\n  630  \n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/it.po:\n  674  \n  675  #: share/gui.h:23\n  676: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  677: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  678  \n  679  #: share/image.c:229\n  680  #, c-format\n  681: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  682: msgstr \"Impossibile caricare la superficie SDL_ttf: %s\\n\"\n  683  \n  684  #. Translators,\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/lv.po:\n  632  \n  633  #: share/gui.h:23\n  634: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  635: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  636  \n  637  #: share/image.c:229\n  638  #, c-format\n  639: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  640: msgstr \"Neizdevās konvertēt SDL_ttf virsmu: %s\\n\"\n  641  \n  642  #. Translators,\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/neverball.pot:\n  599  \n  600  #: share/gui.h:23\n  601: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  602  msgstr \"\"\n  603  \n  604  #: share/image.c:229\n  605  #, c-format\n  606: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  607  msgstr \"\"\n  608  \n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/nn.po:\n   22  #, c-format\n   23  msgid \"Failure to load level file '%s'\\n\"\n   24: msgstr \"Klarte ikkje opna brettfila «%s»\\n\"\n   25  \n   26  #: ball/st_save.c:111\n   ..\n  218  \"  -d, --data <mappe>        Bruk «mappe» som speldatamappe.\\n\"\n  219  \"  -r, --replay <fil>        Spel opptaket «fil».\\n\"\n  220: \"  -i, --level <fil>         Last brettfila «fil».\\n\"\n  221  \n  222  #: ball/main.c:281\n  ...\n  612  \n  613  #: share/gui.h:23\n  614: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  615: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  616  \n  617  #: share/syswm.c:58\n  ...\n  626  #: share/image.c:229\n  627  #, c-format\n  628: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  629: msgstr \"Klarte ikkje gjera om SDL_ttf-overflate: %s\\n\"\n  630  \n  631  #. Translators,\n  ...\n 1088  #: data/map-easy/mover.map\n 1089  msgid \"A moving platform can be tricky.\\\\Use precise timing to get aboard,\\\\and precise balance to stay there.\\\\Don't let it move out from under you.\\\\Ride the platforms to grab the big coins.\\\\\"\n 1090: msgstr \"Ei plattform i rørsle kan vera skummel.\\\\Vel rett tidspunkt for å rulla om bord,\\\\og hald balansen for ikkje å rulla utfor.\\\\Vert med plattformene på tur for å få tak\\\\i dei mest verdifulle myntane.\\\\\"\n 1091  \n 1092  #: data/map-easy/peasy.map\n ....\n 1112  #: data/map-easy/speedbumps.map\n 1113  msgid \"When the ball is on a moving platform,\\\\it will be pulled in the direction of movement.\\\\Use the rails to steady yourself,\\\\and collect the coins you need\\\\to open the goal.\"\n 1114: msgstr \"Når ballen er på ei plattform i rørsle,\\\\vert han trekt i rørsleretninga.\\\\Støtt deg til rekkverket,\\\\og samla nok myntar\\\\for å komma i mål.\"\n 1115  \n 1116  #: data/map-easy/thwomp2.map\n ....\n 1140  #: data/map-fwp/discs.map\n 1141  msgid \"=Discs=\\\\Used correctly, the platforms will take you to the goal.\"\n 1142: msgstr \"=Platetur=\\\\Brukar du dei rett, tek desse\\\\plattformene deg til målet.\"\n 1143  \n 1144  #: data/map-fwp/ladybirds.map\n ....\n 1216  #: data/map-hard/gaps.map\n 1217  msgid \"Time the switches carefully to synchronize\\\\the motion of the platforms.\\\\Move quickly across the gaps.\\\\\"\n 1218: msgstr \"Rull på brytarane i rett tid, slik at\\\\plattformene møtest. Og rull fort\\\\over for ikkje å styrta i avgrunnen.\\\\\"\n 1219  \n 1220  #: data/map-hard/grid.map\n ....\n 1284  #: data/map-hard/sync.map\n 1285  msgid \"Use the switches to set the platforms\\\\in motion.  Time it so they come\\\\together in the middle.\\\\\"\n 1286: msgstr \"Bruk brytarane for å setja plattformene\\\\i gang. Ordna det slik at dei møtest\\\\på midten.\\\\\"\n 1287  \n 1288  #: data/map-hard/teleport.map\n ....\n 1308  #: data/map-medium/cross.map\n 1309  msgid \"Use momentum to reach\\\\the upper platforms,\\\\but keep the ball in control\\\\for safe landing.\\\\\\\\The manual view may help here.\\\\\"\n 1310: msgstr \"Få god fart for å nå\\\\dei øvre plattformene,\\\\men hald kontroll på\\\\ballen for sikker landing.\\\\\\\\Manuell synsvinkel kan\\\\vera nyttig her.\\\\\"\n 1311  \n 1312  #: data/map-medium/drops.map\n ....\n 1476  #: data/map-mym/dance2.map\n 1477  msgid \"La ballade dansante.\\\\Let's dance on the moving platform!\\\\Tip: After activating the last moving platform,\\\\ turn around the Thwomp until the goal is reachable.\"\n 1478: msgstr \"La ballade dansante.\\\\La oss dansa på plattformene!\\\\Tips: Etter at du har aktivert den\\\\siste plattforma, gå rundt\\\\knertaren til du kan nå målet.\"\n 1479  \n 1480  #: data/map-mym/descent.map\n ....\n 1484  #: data/map-mym/drive1.map\n 1485  msgid \"La conduite stressante.\\\\Attention:\\\\The platform under the ball moves forward.\"\n 1486: msgstr \"La conduite stressante.\\\\Merk: Plattforma under\\\\ballen køyrer framover.\"\n 1487  \n 1488  #: data/map-mym/drive2.map\n 1489  msgid \"La conduite dangereuse.\\\\The platform under the ball moves quickly forward.\\\\You would do well to advance.\"\n 1490: msgstr \"La conduite dangereuse.\\\\Plattforma under ballen køyrer\\\\fort framover. Du bør følgja etter!\"\n 1491  \n 1492  #: data/map-mym/earthquake.map\n ....\n 1724  #: data/map-tones/tonesmaze.map\n 1725  msgid \"Make sure you are\\\\safely on a purple platform\\\\before 20 seconds have elapsed!\"\n 1726: msgstr \"Sjå til at du står trygt\\\\på ei lilla plattform før\\\\det har gått 20 sekund!\"\n 1727  \n 1728  #: data/map-tones/twisted.map\n ....\n 1793  \n 1794  #~ msgid \"Not a valid level file\"\n 1795: #~ msgstr \"Ikkje ei gyldig brettfil.\"\n 1796  \n 1797  #~ msgid \"Option '--info' requires '--replay'.\\n\"\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/pt_BR.po:\n  638  \n  639  #: share/gui.h:23\n  640: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  641: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  642  \n  643  #: share/image.c:229\n  644  #, c-format\n  645: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  646: msgstr \"falha ao converter a superfície SDL_ttf: %s\\n\"\n  647  \n  648  #. Translators,\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/ru.po:\n  621  \n  622  #: share/gui.h:23\n  623: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  624  msgstr \"\"\n  625  \n  626  #: share/image.c:229\n  627  #, c-format\n  628: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  629  msgstr \"\"\n  630  \n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/sv.po:\n  664  \n  665  #: share/gui.h:23\n  666: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  667: msgstr \"ttf/DejaVuSans-Bold.ttf\"\n  668  \n  669  #: share/image.c:229\n  670  #, c-format\n  671: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  672: msgstr \"Misslyckades med att konvertera SDL_ttf-yta: %s\\n\"\n  673  \n  674  #. Translators,\n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/zh_CN.po:\n  620  \n  621  #: share/gui.h:23\n  622: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  623: msgstr \"ttf/wqy-zenhei.ttc\"\n  624  \n  625  #: share/image.c:229\n  626  #, c-format\n  627: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  628  msgstr \"\"\n  629  \n\n/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/zh_TW.po:\n  613  \n  614  #: share/gui.h:23\n  615: msgid \"ttf/DejaVuSans-Bold.ttf\"\n  616: msgstr \"ttf/wqy-microhei.ttc\"\n  617  \n  618  #: share/image.c:229\n  619  #, c-format\n  620: msgid \"Failed to convert SDL_ttf surface: %s\\n\"\n  621: msgstr \"轉換 SDL_ttf 表面時失敗：%s\\n\"\n  622  \n  623  #. Translators,\n\n119 matches across 21 files\n\n\nSearching 308 files for \"GUI_FACE\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/neverball.sublime-workspace:\n  348  			\"SDL_Update\",\n  349  			\"SDL_Flip\",\n  350: 			\"GUI_FACE\",\n  351  			\"zipPath\",\n  352  			\"SAFECPY\",\n  ...\n  370  			\"fs_add_path\",\n  371  			\"fs_add_path_with_archives\",\n  372: 			\"GUI_FACE\",\n  373  			\".ttf\",\n  374  			\"fs_exists\",\n  375: 			\"GUI_FACE\",\n  376  			\".ttf\",\n  377  			\"CONFIG_DATA\",\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.c:\n  302      const char *path;\n  303  \n  304:     path = _(GUI_FACE);\n  305  \n  306      if (!fs_exists(path))\n  ...\n  309                  path);\n  310  \n  311:         path = GUI_FACE;\n  312      }\n  313  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.h:\n   21  /*---------------------------------------------------------------------------*/\n   22  \n   23: #define GUI_FACE N_(\"ttf/DejaVuSans-Bold.ttf\")\n   24  \n   25  #define GUI_SML  0\n\n6 matches across 3 files\n\n\nSearching 308 files for \"fs_exists\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/neverball.sublime-workspace:\n  372  			\"GUI_FACE\",\n  373  			\".ttf\",\n  374: 			\"fs_exists\",\n  375  			\"GUI_FACE\",\n  376  			\".ttf\",\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/demo.c:\n  175  int demo_exists(const char *name)\n  176  {\n  177:     return fs_exists(demo_path(name));\n  178  }\n  179  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_ball.c:\n   70                            NULL);\n   71  \n   72:     yes = (fs_exists(solid) || fs_exists(inner) || fs_exists(outer));\n   73  \n   74      free(solid);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs.h:\n   15  const char *fs_get_write_dir(void);\n   16  \n   17: int fs_exists(const char *);\n   18  int fs_remove(const char *);\n   19  int fs_rename(const char *, const char *);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_common.c:\n  294  const char *fs_resolve(const char *path)\n  295  {\n  296:     if (fs_exists(path))\n  297          return path;\n  298  \n  ...\n  305          path += 1;\n  306  \n  307:         if (fs_exists(path))\n  308              return path;\n  309      }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_physfs.c:\n  185  }\n  186  \n  187: int fs_exists(const char *path)\n  188  {\n  189      return PHYSFS_exists(path);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_stdio.c:\n  291  }\n  292  \n  293: int fs_exists(const char *path)\n  294  {\n  295      char *real;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.c:\n  304      path = _(GUI_FACE);\n  305  \n  306:     if (!fs_exists(path))\n  307      {\n  308          fprintf(stderr, L_(\"Font '%s' doesn't exist, trying default font.\\n\"),\n\n11 matches across 8 files\n\n\nSearching 308 files for \"assets/data\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/neverball.sublime-project:\n    9  		},\n   10  		{\n   11: 			\"path\": \"/Users/gjtorikian/Developer/commandergenius/project/assets/data/po\"\n   12  		}\n   13  	]\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/neverball.sublime-workspace:\n  168  		\"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c\",\n  169  		\"/Users/gjtorikian/Desktop/jg.c\",\n  170: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/models/act1/SkyDome_Night.obj.md5mesh\",\n  171: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1.mtl\",\n  172  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/world.c\",\n  173  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.c\",\n  ...\n  178  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/commands.c\",\n  179  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/menu.c\",\n  180: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1_pvr.mtl\",\n  181  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/android_utils.c\",\n  182  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/md5.c\",\n  183: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials.lbr\",\n  184  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/entities.c\",\n  185  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/camera.c\",\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.h:\n   34  #define GL_VERSION_ES_CM_1_1 1\n   35  #define PHYSFS_SUPPORTS_ZIP 1 // GJT: For PhysFS zip/apk support\n   36: #define ANDROID_DATA \"assets/data/\"\n   37  \n   38  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/main.c:\n  496      init_state(&st_null);\n  497  \n  498:  char **rc = PHYSFS_enumerateFiles(\"assets/data/po\");\n  499   char **i;\n  500   \n\n7 matches across 4 files\n\n\nSearching 308 files for \"\"/\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/neverball.sublime-project:\n    3  	[\n    4  		{\n    5: 			\"path\": \"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball\"\n    6  		},\n    7  		{\n    8: 			\"path\": \"/Users/gjtorikian/Developer/commandergenius/project/java\"\n    9  		},\n   10  		{\n   11: 			\"path\": \"/Users/gjtorikian/Developer/commandergenius/project/assets/data/po\"\n   12  		}\n   13  	]\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/neverball.sublime-workspace:\n   51  		},\n   52  		{\n   53: 			\"file\": \"/Users/gjtorikian/Developer/commandergenius/project/java/Video.java\",\n   54  			\"settings\":\n   55  			{\n   ..\n  115  	\"file_history\":\n  116  	[\n  117: 		\"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_title.c\",\n  118: 		\"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/main.c\",\n  119: 		\"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_conf.c\",\n  120: 		\"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_name.c\",\n  121: 		\"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/AndroidAppSettings.cfg\",\n  122: 		\"/Users/gjtorikian/Developer/commandergenius/project/java/Video.java\",\n  123: 		\"/Users/gjtorikian/Developer/commandergenius/project/java/NeverballMESupport.java\",\n  124: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/android/android_support.h\",\n  125: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/lang.h\",\n  126: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/glext.h\",\n  127: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/geom.c\",\n  128: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/geom.h\",\n  129: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/cmd.h\",\n  130: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/cmd.c\",\n  131: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/solid_sim_sol.c\",\n  132: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/solid_cmd.c\",\n  133: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/fs_physfs.c\",\n  134: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/gui.c\",\n  135: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/glext.c\",\n  136: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/state.c\",\n  137: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/fs.h\",\n  138: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/fs_stdio.c\",\n  139: 		\"/Users/gjtorikian/Desktop/neverball/trunk/share/solid_sim_sol.c\",\n  140: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/gui.h\",\n  141: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/main.c\",\n  142: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/AndroidAppSettings.cfg\",\n  143: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/sync.c\",\n  144: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/set.c\",\n  145: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/level.c\",\n  146: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/demo.c\",\n  147: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/st_ball.c\",\n  148: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/st_level.c\",\n  149: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/audio.c\",\n  150: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/config.c\",\n  151: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/video.c\",\n  152: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/fs_common.c\",\n  153: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/android/hash_table.c\",\n  154: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/game_client.c\",\n  155: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/base_config.c\",\n  156: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs.c\",\n  157: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/java/Video.java\",\n  158: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/android/android_support.c\",\n  159: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/base_config.h\",\n  160: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/image.c\",\n  161: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/base_image.c\",\n  162: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs.h\",\n  163: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/physfs-2.0.2/CMakeLists.txt\",\n  164: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/zip.c\",\n  165: 		\"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/java/Accelerometer.java\",\n  166: 		\"/Users/gjtorikian/Dropbox/workspace/Shelves/assets/html/versions.html\",\n  167: 		\"/Users/gjtorikian/Dropbox/workspace/Shelves/assets/html/about.html\",\n  168: 		\"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c\",\n  169: 		\"/Users/gjtorikian/Desktop/jg.c\",\n  170: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/models/act1/SkyDome_Night.obj.md5mesh\",\n  171: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1.mtl\",\n  172: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/world.c\",\n  173: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.c\",\n  174: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/enemy.c\",\n  175: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/main.c\",\n  176: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/filesystem.c\",\n  177: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.h\",\n  178: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/commands.c\",\n  179: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/menu.c\",\n  180: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1_pvr.mtl\",\n  181: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/android_utils.c\",\n  182: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/md5.c\",\n  183: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials.lbr\",\n  184: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/entities.c\",\n  185: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/camera.c\",\n  186: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/sounds.c\",\n  187: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/material.c\",\n  188: 		\"/Users/gjtorikian/Dropbox/native-activity/src/com/miadzin/shmup/TouchpadNAActivity.java\",\n  189: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/android/android_utils.c\",\n  190: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/filesystem.c\",\n  191: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/zipint.h\",\n  192: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/Android.mk\",\n  193: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/Android.mk\",\n  194: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/Application.mk\",\n  195: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/libpng/Android.mk\",\n  196: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/config.h\",\n  197: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/matrix.h\",\n  198: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/math_shmup.c\",\n  199: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/math.c\",\n  200: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/collisions.h\",\n  201: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/commands.h\",\n  202: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/dEngine.c\",\n  203: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/enemy.h\",\n  204: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/enemy_particules.h\",\n  205: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/fx.h\",\n  206: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/ItextureLoader.c\",\n  207: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/material.h\",\n  208: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/md5.h\",\n  209: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/menu.h\",\n  210: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/preproc.h\",\n  211: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/camera.h\",\n  212: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/quaternion.h\",\n  213: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer.h\",\n  214: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/event.c\",\n  215: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/event.h\",\n  216: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/md5.c\",\n  217: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/entities.h\",\n  218: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/android/Android.mk\",\n  219: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/android/main.c\",\n  220: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/android/android_utils.h\",\n  221: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/openal/Android.mk\",\n  222: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/filesystem.h\",\n  223: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/commands.c\",\n  224: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/titles.c\",\n  225: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer.c\",\n  226: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/preproc.c\",\n  227: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/menu.c\",\n  228: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/Alc/android.c\",\n  229: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/camera.c\",\n  230: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/dEngine.h\",\n  231: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer_fixed.c\",\n  232: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/texture.c\",\n  233: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/android/androidEGL.h\",\n  234: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/sounds.c\",\n  235: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/android/native_app_glue.c\",\n  236: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/android/native_app_glue.h\",\n  237: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/Alc/alcReverb.c\",\n  238: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/Alc/ALc.c\",\n  239: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/OpenAL32/Include/alMain.h\",\n  240: 		\"/Users/gjtorikian/Dropbox/native-activity/jni/src/sounds.h\",\n  241: 		\"/Users/gjtorikian/Dropbox/native-activity/src/com/miadzin/shmup/ShmupAudio.java\",\n  242: 		\"/Users/gjtorikian/Dropbox/native-activity/openal/Android.mk\",\n  243: 		\"/Users/gjtorikian/Dropbox/native-activity/openal/Alc/ALc.c\",\n  244: 		\"/Users/gjtorikian/Dropbox/native-activity/shmup.sublime-project\"\n  245  	],\n  246  	\"find\":\n  ...\n  383  			\"path_is_abs\",\n  384  			\"CONFIG_DATA\",\n  385: 			\"/data\",\n  386  			\"data\",\n  387  			\"PHYSFS_SUPPORTS_ZIP\",\n  ...\n 2150  				{\n 2151  					\"buffer\": 5,\n 2152: 					\"file\": \"/Users/gjtorikian/Developer/commandergenius/project/java/Video.java\",\n 2153  					\"settings\":\n 2154  					{\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/set.c:\n  564  \n  565      filename = concat_string(path,\n  566:                              \"/\",\n  567                               base_name_sans(level_v[i].file, \".sol\"),\n  568                               \".png\",\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_ball.c:\n   55  \n   56      solid = concat_string(item->path,\n   57:                           \"/\",\n   58                            base_name(item->path),\n   59                            \"-solid.sol\",\n   60                            NULL);\n   61      inner = concat_string(item->path,\n   62:                           \"/\",\n   63                            base_name(item->path),\n   64                            \"-inner.sol\",\n   65                            NULL);\n   66      outer = concat_string(item->path,\n   67:                           \"/\",\n   68                            base_name(item->path),\n   69                            \"-outer.sol\",\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/Doxyfile:\n  359  # The INPUT tag can be used to specify the files and/or directories that contain \n  360  # documented source files. You may enter file names like \"myfile.cpp\" or \n  361: # directories like \"/usr/src/myproject\". Separate the files or directories \n  362  # with spaces.\n  363  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs.c:\n  504   *\n  505   * This only finds legitimate segments of a mountpoint. If the mountpoint is\n  506:  *  \"/a/b/c\" and (fname) is \"/a/b/c\", \"/\", or \"/a/b/c/d\", then the results are\n  507:  *  all zero. \"/a/b\" will succeed, though.\n  508   */\n  509  static int partOfMountPoint(DirHandle *h, char *fname)\n  ...\n  566          GOTO_IF_MACRO(!dirHandle->mountPoint, ERR_OUT_OF_MEMORY, badDirHandle);\n  567          strcpy(dirHandle->mountPoint, mountPoint);\n  568:         strcat(dirHandle->mountPoint, \"/\");\n  569      } /* if */\n  570  \n  ...\n  954  \n  955      if (mountPoint == NULL)\n  956:         mountPoint = \"/\";\n  957  \n  958      __PHYSFS_platformGrabMutex(stateLock);\n  ...\n 1037          if (strcmp(i->dirName, dir) == 0)\n 1038          {\n 1039:             const char *retval = ((i->mountPoint) ? i->mountPoint : \"/\");\n 1040              __PHYSFS_platformReleaseMutex(stateLock);\n 1041              return(retval);\n ....\n 1143      if (archiveExt != NULL)\n 1144      {\n 1145:         char **rc = PHYSFS_enumerateFiles(\"/\");\n 1146          char **i;\n 1147          size_t extlen = strlen(archiveExt);\n ....\n 1280  \n 1281      /* !!! FIXME: This codeblock sucks. */\n 1282:     if (h->mountPoint != NULL)  /* NULL mountpoint means \"/\". */\n 1283      {\n 1284          size_t mntpntlen = strlen(h->mountPoint);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs.h:\n  100   *  textfiles. Other than that, PhysicsFS has some convenience functions for\n  101   *  platform-independence. There is a function to tell you the current\n  102:  *  platform's dir separator (\"\\\\\" on windows, \"/\" on Unix, \":\" on MacOS),\n  103   *  which is needed only to set up your search/write paths. There is a\n  104   *  function to tell you what CD-ROM drives contain accessible discs, and a\n  ...\n  589   * \\brief Get platform-dependent dir separator string.\n  590   *\n  591:  * This returns \"\\\\\" on win32, \"/\" on Unix, and \":\" on MacOS. It may be more\n  592   *  than one character, depending on the platform, and your code should take\n  593   *  that into account. Note that this is only useful for setting up the\n  ...\n  639   * \\brief Get an array of paths to available CD-ROM drives.\n  640   *\n  641:  * The dirs returned are platform-dependent (\"D:\\\" on Win32, \"/cdrom\" or\n  642   *  whatnot on Unix). Dirs are only returned if there is a disc ready and\n  643   *  accessible in the drive. So if you've got two drives (D: and E:), and only\n  ...\n 2049   *   \\param mountPoint Location in the interpolated tree that this archive\n 2050   *                     will be \"mounted\", in platform-independent notation.\n 2051:  *                     NULL or \"\" is equivalent to \"/\".\n 2052   *   \\param appendToPath nonzero to append to search path, zero to prepend.\n 2053   *  \\return nonzero if added to path, zero on failure (bogus archive, dir\n ....\n 2068   *  added to the search path, and it reports the location in the interpolated\n 2069   *  tree where it is mounted. Files mounted with a NULL mountpoint or through\n 2070:  *  PHYSFS_addToSearchPath() will report \"/\". The return value is READ ONLY\n 2071   *  and valid until the archive is removed from the search path.\n 2072   *\n ....\n 2238   *\n 2239   * // ...\n 2240:  * PHYSFS_enumerateFilesCallback(\"/some/path\", printDir, NULL);\n 2241   * \\endcode\n 2242   *\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs_internal.h:\n 1099  \n 1100  /*\n 1101:  * The dir separator; \"/\" on unix, \"\\\\\" on win32, \":\" on MacOS, etc...\n 1102   *  Obviously, this isn't a function, but it IS a null-terminated string.\n 1103   */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/beos.cpp:\n  160  void __PHYSFS_platformDetectAvailableCDs(PHYSFS_StringCallback cb, void *data)\n  161  {\n  162:     tryDir(\"/dev/disk\", cb, data);\n  163  } /* __PHYSFS_platformDetectAvailableCDs */\n  164  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/macosx.c:\n  164  void __PHYSFS_platformDetectAvailableCDs(PHYSFS_StringCallback cb, void *data)\n  165  {\n  166:     const char *devPrefix = \"/dev/\";\n  167      const int prefixLen = strlen(devPrefix);\n  168      mach_port_t masterPort = 0;\n  ...\n  238  \n  239      /* Find last dirsep so we can chop the binary's filename from the path. */\n  240:     cfrange = CFStringFind(cfmutstr, CFSTR(\"/\"), kCFCompareBackwards);\n  241      if (cfrange.location == kCFNotFound)\n  242      {\n  ...\n  246      } /* if */\n  247  \n  248:     /* chop the \"/exename\" from the end of the path string... */\n  249      cfrange.length = CFStringGetLength(cfmutstr) - cfrange.location;\n  250      CFStringDelete(cfmutstr, cfrange);\n  251  \n  252      /* If we're an Application Bundle, chop everything but the base. */\n  253:     cfrange = CFStringFind(cfmutstr, CFSTR(\"/Contents/MacOS\"),\n  254                             kCFCompareCaseInsensitive |\n  255                             kCFCompareBackwards |\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/posix.c:\n   31  \n   32  \n   33: const char *__PHYSFS_platformDirSeparator = \"/\";\n   34  \n   35  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/unix.c:\n   97      struct mntent *ent = NULL;\n   98  \n   99:     mounts = setmntent(\"/etc/mtab\", \"r\");\n  100      BAIL_IF_MACRO(mounts == NULL, ERR_IO_ERROR, /*return void*/);\n  101  \n  ...\n  175          strcpy(exe, start);\n  176          if ((exe[0] == '\\0') || (exe[strlen(exe) - 1] != '/'))\n  177:             strcat(exe, \"/\");\n  178          strcat(exe, bin);\n  179  \n  ...\n  240       *  the /proc/self/exe symlink.\n  241       */\n  242:     retval = readSymLink(\"/proc/self/exe\");\n  243      if (retval == NULL)\n  244      {\n  ...\n  246          const unsigned long long pid = (unsigned long long) getpid();\n  247          char path[64];\n  248:         const int rc = (int) snprintf(path,sizeof(path),\"/proc/%llu/exe\",pid);\n  249          if ( (rc > 0) && (rc < sizeof(path)) )\n  250              retval = readSymLink(path);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/crc32.c:\n  161          out = fopen(\"crc32.h\", \"w\");\n  162          if (out == NULL) return;\n  163:         fprintf(out, \"/* crc32.h -- tables for rapid CRC calculation\\n\");\n  164          fprintf(out, \" * Generated automatically by crc32.c\\n */\\n\\n\");\n  165          fprintf(out, \"local const unsigned long FAR \");\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/trees.c:\n  335      Assert (header != NULL, \"Can't open trees.h\");\n  336      fprintf(header,\n  337:             \"/* header created automatically with -DGEN_TREES_H */\\n\\n\");\n  338  \n  339      fprintf(header, \"local const ct_data static_ltree[L_CODES+2] = {\\n\");\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/base_config.c:\n   43  \n   44      SAFECPY(dir, fs_base_dir());\n   45:     SAFECAT(dir, \"/\");\n   46      SAFECAT(dir, CONFIG_DATA);\n   47  \n   ..\n   86  \n   87      home = pick_home_path();\n   88:     user = concat_string(home, \"/\", CONFIG_USER, NULL);\n   89  \n   90      /* Set up directory for writing, create if needed. */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/common.c:\n  211  char *path_join(const char *head, const char *tail)\n  212  {\n  213:     return *head ? concat_string(head, \"/\", tail, NULL) : strdup(tail);\n  214  }\n  215  \n  ...\n  242  \n  243  #ifdef _WIN32\n  244:     skip = strcspn(path, \"/\\\\\");\n  245  #else\n  246:     skip = strcspn(path, \"/\");\n  247  #endif\n  248  \n  ...\n  292      {\n  293          if (sep == buff)\n  294:             return \"/\";\n  295  \n  296          *sep = '\\0';\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_common.c:\n   76      if ((write_dir = fs_get_write_dir()))\n   77      {\n   78:         real_src = concat_string(write_dir, \"/\", src, NULL);\n   79:         real_dst = concat_string(write_dir, \"/\", dst, NULL);\n   80  \n   81          rc = file_rename(real_src, real_dst);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n   65              dir = strdup(CONFIG_LOCALE);\n   66          else\n   67:             dir = concat_string(fs_base_dir(), \"/\", CONFIG_LOCALE, NULL);\n   68      }\n   69  \n\n/Users/gjtorikian/Developer/commandergenius/project/java/DataDownloader.java:\n  346  			try {\n  347  				try {\n  348: 					File outDir = new File( path.substring(0, path.lastIndexOf(\"/\") ));\n  349  					if( !(outDir.exists() && outDir.isDirectory()) )\n  350  						outDir.mkdirs();\n  ...\n  426  \n  427  				try {\n  428: 					File outDir = new File( path.substring(0, path.lastIndexOf(\"/\") ));\n  429  					if( !(outDir.exists() && outDir.isDirectory()) )\n  430  						outDir.mkdirs();\n  ...\n  549  	private String getOutFilePath(final String filename)\n  550  	{\n  551: 		return outFilesDir + \"/\" + filename;\n  552  	};\n  553  	\n\n/Users/gjtorikian/Developer/commandergenius/project/java/MainActivity.java:\n  473  				{\n  474  					String libname = System.mapLibraryName(l);\n  475: 					File libpath = new File(getFilesDir().getAbsolutePath() + \"/../lib/\" + libname);\n  476  					System.out.println(\"libSDL: loading lib \" + libpath.getAbsolutePath());\n  477  					System.load(libpath.getPath());\n  ...\n  528  					if( entry.isDirectory() )\n  529  					{\n  530: 						File outDir = new File( cacheDir.getAbsolutePath() + \"/\" + entry.getName() );\n  531  						if( !(outDir.exists() && outDir.isDirectory()) )\n  532  							outDir.mkdirs();\n  ...\n  535  \n  536  					OutputStream out = null;\n  537: 					String path = cacheDir.getAbsolutePath() + \"/\" + entry.getName();\n  538  					try {\n  539: 						File outDir = new File( path.substring(0, path.lastIndexOf(\"/\") ));\n  540  						if( !(outDir.exists() && outDir.isDirectory()) )\n  541  							outDir.mkdirs();\n  ...\n  616  					if( entry.isDirectory() )\n  617  					{\n  618: 						File outDir = new File( cacheDir.getAbsolutePath() + \"/\" + entry.getName() );\n  619  						if( !(outDir.exists() && outDir.isDirectory()) )\n  620  							outDir.mkdirs();\n  ...\n  623  \n  624  					OutputStream out = null;\n  625: 					String path = cacheDir.getAbsolutePath() + \"/\" + entry.getName();\n  626  					try {\n  627: 						File outDir = new File( path.substring(0, path.lastIndexOf(\"/\") ));\n  628  						if( !(outDir.exists() && outDir.isDirectory()) )\n  629  							outDir.mkdirs();\n\n/Users/gjtorikian/Developer/commandergenius/project/java/Settings.java:\n  196  \n  197  		try {\n  198: 			ObjectInputStream settingsFile = new ObjectInputStream(new FileInputStream( p.getFilesDir().getAbsolutePath() + \"/\" + SettingsFileName ));\n  199  			if( settingsFile.readInt() != SETTINGS_FILE_VERSION )\n  200  				throw new IOException();\n  ...\n  293  		if( Globals.DataDir.length() == 0 )\n  294  			Globals.DataDir = Globals.DownloadToSdcard ?\n  295: 								Environment.getExternalStorageDirectory().getAbsolutePath() + \"/app-data/\" + Globals.class.getPackage().getName() :\n  296  								p.getFilesDir().getAbsolutePath();\n  297  		\n  ...\n  405  				byte[] buf = new byte[16384];\n  406  				OutputStream out = null;\n  407: 				String path = outDir.getAbsolutePath() + \"/\" + \"stdout-test\";\n  408  \n  409  				out = new FileOutputStream( path );\n  ...\n  652  						Globals.DownloadToSdcard = (item != 0);\n  653  						Globals.DataDir = Globals.DownloadToSdcard ?\n  654: 										Environment.getExternalStorageDirectory().getAbsolutePath() + \"/app-data/\" + Globals.class.getPackage().getName() :\n  655  										p.getFilesDir().getAbsolutePath();\n  656  						goBack(p);\n\n/Users/gjtorikian/Developer/commandergenius/project/java/Video.java:\n  324  		// GJT: Get APK path 	\n  325          String apkFilePath = NeverballMESupport.getAPKPath(context);\n  326:         String sdCardPath = Environment.getExternalStorageDirectory() + \"/app-data/com.miadzin.neverballme\";\n  327  \n  328          setDataPaths(apkFilePath, sdCardPath);\n\n192 matches across 22 files\n\n\nSearching 129 files for \"\"/\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/set.c:\n  564  \n  565      filename = concat_string(path,\n  566:                              \"/\",\n  567                               base_name_sans(level_v[i].file, \".sol\"),\n  568                               \".png\",\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_ball.c:\n   55  \n   56      solid = concat_string(item->path,\n   57:                           \"/\",\n   58                            base_name(item->path),\n   59                            \"-solid.sol\",\n   60                            NULL);\n   61      inner = concat_string(item->path,\n   62:                           \"/\",\n   63                            base_name(item->path),\n   64                            \"-inner.sol\",\n   65                            NULL);\n   66      outer = concat_string(item->path,\n   67:                           \"/\",\n   68                            base_name(item->path),\n   69                            \"-outer.sol\",\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs.c:\n  504   *\n  505   * This only finds legitimate segments of a mountpoint. If the mountpoint is\n  506:  *  \"/a/b/c\" and (fname) is \"/a/b/c\", \"/\", or \"/a/b/c/d\", then the results are\n  507:  *  all zero. \"/a/b\" will succeed, though.\n  508   */\n  509  static int partOfMountPoint(DirHandle *h, char *fname)\n  ...\n  566          GOTO_IF_MACRO(!dirHandle->mountPoint, ERR_OUT_OF_MEMORY, badDirHandle);\n  567          strcpy(dirHandle->mountPoint, mountPoint);\n  568:         strcat(dirHandle->mountPoint, \"/\");\n  569      } /* if */\n  570  \n  ...\n  954  \n  955      if (mountPoint == NULL)\n  956:         mountPoint = \"/\";\n  957  \n  958      __PHYSFS_platformGrabMutex(stateLock);\n  ...\n 1037          if (strcmp(i->dirName, dir) == 0)\n 1038          {\n 1039:             const char *retval = ((i->mountPoint) ? i->mountPoint : \"/\");\n 1040              __PHYSFS_platformReleaseMutex(stateLock);\n 1041              return(retval);\n ....\n 1143      if (archiveExt != NULL)\n 1144      {\n 1145:         char **rc = PHYSFS_enumerateFiles(\"/\");\n 1146          char **i;\n 1147          size_t extlen = strlen(archiveExt);\n ....\n 1280  \n 1281      /* !!! FIXME: This codeblock sucks. */\n 1282:     if (h->mountPoint != NULL)  /* NULL mountpoint means \"/\". */\n 1283      {\n 1284          size_t mntpntlen = strlen(h->mountPoint);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/macosx.c:\n  164  void __PHYSFS_platformDetectAvailableCDs(PHYSFS_StringCallback cb, void *data)\n  165  {\n  166:     const char *devPrefix = \"/dev/\";\n  167      const int prefixLen = strlen(devPrefix);\n  168      mach_port_t masterPort = 0;\n  ...\n  238  \n  239      /* Find last dirsep so we can chop the binary's filename from the path. */\n  240:     cfrange = CFStringFind(cfmutstr, CFSTR(\"/\"), kCFCompareBackwards);\n  241      if (cfrange.location == kCFNotFound)\n  242      {\n  ...\n  246      } /* if */\n  247  \n  248:     /* chop the \"/exename\" from the end of the path string... */\n  249      cfrange.length = CFStringGetLength(cfmutstr) - cfrange.location;\n  250      CFStringDelete(cfmutstr, cfrange);\n  251  \n  252      /* If we're an Application Bundle, chop everything but the base. */\n  253:     cfrange = CFStringFind(cfmutstr, CFSTR(\"/Contents/MacOS\"),\n  254                             kCFCompareCaseInsensitive |\n  255                             kCFCompareBackwards |\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/posix.c:\n   31  \n   32  \n   33: const char *__PHYSFS_platformDirSeparator = \"/\";\n   34  \n   35  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/unix.c:\n   97      struct mntent *ent = NULL;\n   98  \n   99:     mounts = setmntent(\"/etc/mtab\", \"r\");\n  100      BAIL_IF_MACRO(mounts == NULL, ERR_IO_ERROR, /*return void*/);\n  101  \n  ...\n  175          strcpy(exe, start);\n  176          if ((exe[0] == '\\0') || (exe[strlen(exe) - 1] != '/'))\n  177:             strcat(exe, \"/\");\n  178          strcat(exe, bin);\n  179  \n  ...\n  240       *  the /proc/self/exe symlink.\n  241       */\n  242:     retval = readSymLink(\"/proc/self/exe\");\n  243      if (retval == NULL)\n  244      {\n  ...\n  246          const unsigned long long pid = (unsigned long long) getpid();\n  247          char path[64];\n  248:         const int rc = (int) snprintf(path,sizeof(path),\"/proc/%llu/exe\",pid);\n  249          if ( (rc > 0) && (rc < sizeof(path)) )\n  250              retval = readSymLink(path);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/crc32.c:\n  161          out = fopen(\"crc32.h\", \"w\");\n  162          if (out == NULL) return;\n  163:         fprintf(out, \"/* crc32.h -- tables for rapid CRC calculation\\n\");\n  164          fprintf(out, \" * Generated automatically by crc32.c\\n */\\n\\n\");\n  165          fprintf(out, \"local const unsigned long FAR \");\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/trees.c:\n  335      Assert (header != NULL, \"Can't open trees.h\");\n  336      fprintf(header,\n  337:             \"/* header created automatically with -DGEN_TREES_H */\\n\\n\");\n  338  \n  339      fprintf(header, \"local const ct_data static_ltree[L_CODES+2] = {\\n\");\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/base_config.c:\n   43  \n   44      SAFECPY(dir, fs_base_dir());\n   45:     SAFECAT(dir, \"/\");\n   46      SAFECAT(dir, CONFIG_DATA);\n   47  \n   ..\n   86  \n   87      home = pick_home_path();\n   88:     user = concat_string(home, \"/\", CONFIG_USER, NULL);\n   89  \n   90      /* Set up directory for writing, create if needed. */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/common.c:\n  211  char *path_join(const char *head, const char *tail)\n  212  {\n  213:     return *head ? concat_string(head, \"/\", tail, NULL) : strdup(tail);\n  214  }\n  215  \n  ...\n  242  \n  243  #ifdef _WIN32\n  244:     skip = strcspn(path, \"/\\\\\");\n  245  #else\n  246:     skip = strcspn(path, \"/\");\n  247  #endif\n  248  \n  ...\n  292      {\n  293          if (sep == buff)\n  294:             return \"/\";\n  295  \n  296          *sep = '\\0';\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_common.c:\n   76      if ((write_dir = fs_get_write_dir()))\n   77      {\n   78:         real_src = concat_string(write_dir, \"/\", src, NULL);\n   79:         real_dst = concat_string(write_dir, \"/\", dst, NULL);\n   80  \n   81          rc = file_rename(real_src, real_dst);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n   65              dir = strdup(CONFIG_LOCALE);\n   66          else\n   67:             dir = concat_string(fs_base_dir(), \"/\", CONFIG_LOCALE, NULL);\n   68      }\n   69  \n\n34 matches across 12 files\n\n\nSearching 129 files for \"GUI_FACE\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.c:\n  302      const char *path;\n  303  \n  304:     path = _(GUI_FACE);\n  305  \n  306      if (!fs_exists(path))\n  ...\n  309                  path);\n  310  \n  311:         path = GUI_FACE;\n  312      }\n  313  \n\n2 matches in 1 file\n\n\nSearching 113 files for \"GUI_FACE\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.h:\n   21  /*---------------------------------------------------------------------------*/\n   22  \n   23: #define GUI_FACE N_(\"ttf/DejaVuSans-Bold.ttf\")\n   24  \n   25  #define GUI_SML  0\n\n1 match in 1 file\n\n\nSearching 113 files for \"fs_open\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs.h:\n   19  int fs_rename(const char *, const char *);\n   20  \n   21: fs_file fs_open(const char *path, const char *mode);\n   22  int     fs_close(fs_file);\n   23  \n\n1 match in 1 file\n\n\nSearching 129 files for \"fs_open\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/demo.c:\n  136      d = NULL;\n  137  \n  138:     if ((fp = fs_open(path, \"r\")))\n  139      {\n  140          d = calloc(1, sizeof (struct demo));\n  ...\n  288      demo.times = times;\n  289  \n  290:     if ((demo_fp = fs_open(demo.filename, \"w\")))\n  291      {\n  292          demo_header_write(demo_fp, &demo);\n  ...\n  395      lockstep_clr(&update_step);\n  396  \n  397:     if ((demo_fp = fs_open(name, \"r\")))\n  398      {\n  399          if (demo_header_read(demo_fp, &demo_replay))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/set.c:\n  104      fs_file fp;\n  105  \n  106:     if ((fp = fs_open(config_cheat() ? s->cheat_scores : s->user_scores, \"w\")))\n  107      {\n  108          int i;\n  ...\n  235      fs_file fp;\n  236  \n  237:     if ((fp = fs_open(config_cheat() ? s->cheat_scores : s->user_scores, \"r\")))\n  238      {\n  239          char buf[MAXSTR];\n  ...\n  270          return 0;\n  271  \n  272:     fin = fs_open(filename, \"r\");\n  273  \n  274      if (!fin)\n  ...\n  389       */\n  390  \n  391:     if ((fin = fs_open(SET_FILE, \"r\")))\n  392      {\n  393          while (read_line(&name, fin))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/audio.c:\n  160          /* Attempt to open the named Ogg stream. */\n  161  \n  162:         if ((fp = fs_open(filename, \"r\")))\n  163          {\n  164              if (ov_open_callbacks(fp, &V->vf, NULL, 0, callbacks) == 0)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/base_image.c:\n   53      /* Initialize all PNG import data structures. */\n   54  \n   55:     if (!(fh = fs_open(filename, \"r\")))\n   56          return NULL;\n   57  \n   ..\n  131      fs_file fp;\n  132  \n  133:     if ((fp = fs_open(filename, \"r\")))\n  134      {\n  135          struct jpeg_decompress_struct cinfo;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/config.c:\n  327      fs_file fh;\n  328  \n  329:     if ((fh = fs_open(USER_CONFIG_FILE, \"r\")))\n  330      {\n  331          char *line, *key, *val;\n  ...\n  403      fs_file fh;\n  404  \n  405:     if (dirty && (fh = fs_open(USER_CONFIG_FILE, \"w\")))\n  406      {\n  407          int i;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_common.c:\n  269      data = NULL;\n  270  \n  271:     if ((fh = fs_open(path, \"r\")))\n  272      {\n  273          if ((*datalen = fs_length(fh)) > 0)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_physfs.c:\n  123  /*---------------------------------------------------------------------------*/\n  124  \n  125: fs_file fs_open(const char *path, const char *mode)\n  126  {\n  127      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_rwops.c:\n   63      fs_file fh;\n   64  \n   65:     if ((fh = fs_open(path, mode)))\n   66          return fs_rwops_make(fh);\n   67  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_stdio.c:\n  219  /*---------------------------------------------------------------------------*/\n  220  \n  221: fs_file fs_open(const char *path, const char *mode)\n  222  {\n  223      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/image.c:\n   45      /* Initialize all PNG export data structures. */\n   46  \n   47:     if (!(filep = fs_open(filename, \"w\")))\n   48          return;\n   49      if (!(writep = png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0)))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n  113      char line[MAXSTR];\n  114      LOGI(\"DEBUG po filename: %s\", filename);\n  115:     if ((fin = fs_open(filename, \"r\")))\n  116      {\n  117          LOGI(\"DEBUG opened %s!\", filename);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/mapc.c:\n  437      mp->angle = 45.0f;\n  438  \n  439:     if ((fin = fs_open(name, \"r\")))\n  440      {\n  441          scan_vec4(fin, line, mp->d);\n  ...\n  629      int s0 = fp->sc;\n  630  \n  631:     if ((fin = fs_open(name, \"r\")))\n  632      {\n  633          while (fs_gets(line, MAXSTR, fin))\n  ...\n 2599          fs_set_write_dir(dir_name(dst));\n 2600  \n 2601:         if ((fin = fs_open(base_name(src), \"r\")))\n 2602          {\n 2603              if (!fs_add_path_with_archives(argv[2]))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_base.c:\n  470      memset(fp, 0, sizeof (*fp));\n  471  \n  472:     if ((fin = fs_open(filename, \"r\")))\n  473      {\n  474          res = sol_load_file(fin, fp);\n  ...\n  483      int res = 0;\n  484  \n  485:     if ((fin = fs_open(filename, \"r\")))\n  486      {\n  487          res = sol_load_head(fin, fp);\n  ...\n  738      fs_file fout;\n  739  \n  740:     if ((fout = fs_open(filename, \"w\")))\n  741      {\n  742          sol_stor_file(fout, fp);\n\n24 matches across 13 files\n\n\nSearching 129 files for \"fs_open(\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/demo.c:\n  136      d = NULL;\n  137  \n  138:     if ((fp = fs_open(path, \"r\")))\n  139      {\n  140          d = calloc(1, sizeof (struct demo));\n  ...\n  288      demo.times = times;\n  289  \n  290:     if ((demo_fp = fs_open(demo.filename, \"w\")))\n  291      {\n  292          demo_header_write(demo_fp, &demo);\n  ...\n  395      lockstep_clr(&update_step);\n  396  \n  397:     if ((demo_fp = fs_open(name, \"r\")))\n  398      {\n  399          if (demo_header_read(demo_fp, &demo_replay))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/set.c:\n  104      fs_file fp;\n  105  \n  106:     if ((fp = fs_open(config_cheat() ? s->cheat_scores : s->user_scores, \"w\")))\n  107      {\n  108          int i;\n  ...\n  235      fs_file fp;\n  236  \n  237:     if ((fp = fs_open(config_cheat() ? s->cheat_scores : s->user_scores, \"r\")))\n  238      {\n  239          char buf[MAXSTR];\n  ...\n  270          return 0;\n  271  \n  272:     fin = fs_open(filename, \"r\");\n  273  \n  274      if (!fin)\n  ...\n  389       */\n  390  \n  391:     if ((fin = fs_open(SET_FILE, \"r\")))\n  392      {\n  393          while (read_line(&name, fin))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/audio.c:\n  160          /* Attempt to open the named Ogg stream. */\n  161  \n  162:         if ((fp = fs_open(filename, \"r\")))\n  163          {\n  164              if (ov_open_callbacks(fp, &V->vf, NULL, 0, callbacks) == 0)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/base_image.c:\n   53      /* Initialize all PNG import data structures. */\n   54  \n   55:     if (!(fh = fs_open(filename, \"r\")))\n   56          return NULL;\n   57  \n   ..\n  131      fs_file fp;\n  132  \n  133:     if ((fp = fs_open(filename, \"r\")))\n  134      {\n  135          struct jpeg_decompress_struct cinfo;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/config.c:\n  327      fs_file fh;\n  328  \n  329:     if ((fh = fs_open(USER_CONFIG_FILE, \"r\")))\n  330      {\n  331          char *line, *key, *val;\n  ...\n  403      fs_file fh;\n  404  \n  405:     if (dirty && (fh = fs_open(USER_CONFIG_FILE, \"w\")))\n  406      {\n  407          int i;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_common.c:\n  269      data = NULL;\n  270  \n  271:     if ((fh = fs_open(path, \"r\")))\n  272      {\n  273          if ((*datalen = fs_length(fh)) > 0)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_physfs.c:\n  123  /*---------------------------------------------------------------------------*/\n  124  \n  125: fs_file fs_open(const char *path, const char *mode)\n  126  {\n  127      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_rwops.c:\n   63      fs_file fh;\n   64  \n   65:     if ((fh = fs_open(path, mode)))\n   66          return fs_rwops_make(fh);\n   67  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_stdio.c:\n  219  /*---------------------------------------------------------------------------*/\n  220  \n  221: fs_file fs_open(const char *path, const char *mode)\n  222  {\n  223      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/image.c:\n   45      /* Initialize all PNG export data structures. */\n   46  \n   47:     if (!(filep = fs_open(filename, \"w\")))\n   48          return;\n   49      if (!(writep = png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0)))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n  113      char line[MAXSTR];\n  114      LOGI(\"DEBUG po filename: %s\", filename);\n  115:     if ((fin = fs_open(filename, \"r\")))\n  116      {\n  117          LOGI(\"DEBUG opened %s!\", filename);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/mapc.c:\n  437      mp->angle = 45.0f;\n  438  \n  439:     if ((fin = fs_open(name, \"r\")))\n  440      {\n  441          scan_vec4(fin, line, mp->d);\n  ...\n  629      int s0 = fp->sc;\n  630  \n  631:     if ((fin = fs_open(name, \"r\")))\n  632      {\n  633          while (fs_gets(line, MAXSTR, fin))\n  ...\n 2599          fs_set_write_dir(dir_name(dst));\n 2600  \n 2601:         if ((fin = fs_open(base_name(src), \"r\")))\n 2602          {\n 2603              if (!fs_add_path_with_archives(argv[2]))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_base.c:\n  470      memset(fp, 0, sizeof (*fp));\n  471  \n  472:     if ((fin = fs_open(filename, \"r\")))\n  473      {\n  474          res = sol_load_file(fin, fp);\n  ...\n  483      int res = 0;\n  484  \n  485:     if ((fin = fs_open(filename, \"r\")))\n  486      {\n  487          res = sol_load_head(fin, fp);\n  ...\n  738      fs_file fout;\n  739  \n  740:     if ((fout = fs_open(filename, \"w\")))\n  741      {\n  742          sol_stor_file(fout, fp);\n\n24 matches across 13 files\n\n\nSearching 129 files for \"lang_init\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/main.c:\n  450      }\n  451  \n  452:     lang_init(\"neverball\");\n  453  \n  454      opt_parse(argc, argv);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n   55  }\n   56  \n   57: void lang_init(const char *domain)\n   58  {\n   59  #if ENABLE_NLS && !ANDROID\n\n2 matches across 2 files\n\n\nSearching 129 files for \"fs_open\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/demo.c:\n  136      d = NULL;\n  137  \n  138:     if ((fp = fs_open(path, \"r\")))\n  139      {\n  140          d = calloc(1, sizeof (struct demo));\n  ...\n  288      demo.times = times;\n  289  \n  290:     if ((demo_fp = fs_open(demo.filename, \"w\")))\n  291      {\n  292          demo_header_write(demo_fp, &demo);\n  ...\n  395      lockstep_clr(&update_step);\n  396  \n  397:     if ((demo_fp = fs_open(name, \"r\")))\n  398      {\n  399          if (demo_header_read(demo_fp, &demo_replay))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/main.c:\n  461  \n  462  \n  463:     /* GJT: Due to Android reliance on fs_open(), lang_init must happen AFTER data paths are configured */\n  464      \n  465      lang_init(\"neverball\");\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/set.c:\n  104      fs_file fp;\n  105  \n  106:     if ((fp = fs_open(config_cheat() ? s->cheat_scores : s->user_scores, \"w\")))\n  107      {\n  108          int i;\n  ...\n  235      fs_file fp;\n  236  \n  237:     if ((fp = fs_open(config_cheat() ? s->cheat_scores : s->user_scores, \"r\")))\n  238      {\n  239          char buf[MAXSTR];\n  ...\n  270          return 0;\n  271  \n  272:     fin = fs_open(filename, \"r\");\n  273  \n  274      if (!fin)\n  ...\n  389       */\n  390  \n  391:     if ((fin = fs_open(SET_FILE, \"r\")))\n  392      {\n  393          while (read_line(&name, fin))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/audio.c:\n  160          /* Attempt to open the named Ogg stream. */\n  161  \n  162:         if ((fp = fs_open(filename, \"r\")))\n  163          {\n  164              if (ov_open_callbacks(fp, &V->vf, NULL, 0, callbacks) == 0)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/base_image.c:\n   53      /* Initialize all PNG import data structures. */\n   54  \n   55:     if (!(fh = fs_open(filename, \"r\")))\n   56          return NULL;\n   57  \n   ..\n  131      fs_file fp;\n  132  \n  133:     if ((fp = fs_open(filename, \"r\")))\n  134      {\n  135          struct jpeg_decompress_struct cinfo;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/config.c:\n  327      fs_file fh;\n  328  \n  329:     if ((fh = fs_open(USER_CONFIG_FILE, \"r\")))\n  330      {\n  331          char *line, *key, *val;\n  ...\n  403      fs_file fh;\n  404  \n  405:     if (dirty && (fh = fs_open(USER_CONFIG_FILE, \"w\")))\n  406      {\n  407          int i;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_common.c:\n  269      data = NULL;\n  270  \n  271:     if ((fh = fs_open(path, \"r\")))\n  272      {\n  273          if ((*datalen = fs_length(fh)) > 0)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_physfs.c:\n  123  /*---------------------------------------------------------------------------*/\n  124  \n  125: fs_file fs_open(const char *path, const char *mode)\n  126  {\n  127      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_rwops.c:\n   63      fs_file fh;\n   64  \n   65:     if ((fh = fs_open(path, mode)))\n   66          return fs_rwops_make(fh);\n   67  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_stdio.c:\n  219  /*---------------------------------------------------------------------------*/\n  220  \n  221: fs_file fs_open(const char *path, const char *mode)\n  222  {\n  223      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/image.c:\n   45      /* Initialize all PNG export data structures. */\n   46  \n   47:     if (!(filep = fs_open(filename, \"w\")))\n   48          return;\n   49      if (!(writep = png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0)))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n  113      char line[MAXSTR];\n  114      \n  115:     if ((fin = fs_open(filename, \"r\")))\n  116      {\n  117          LOGI(\"DEBUG opened %s!\", filename);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/mapc.c:\n  437      mp->angle = 45.0f;\n  438  \n  439:     if ((fin = fs_open(name, \"r\")))\n  440      {\n  441          scan_vec4(fin, line, mp->d);\n  ...\n  629      int s0 = fp->sc;\n  630  \n  631:     if ((fin = fs_open(name, \"r\")))\n  632      {\n  633          while (fs_gets(line, MAXSTR, fin))\n  ...\n 2599          fs_set_write_dir(dir_name(dst));\n 2600  \n 2601:         if ((fin = fs_open(base_name(src), \"r\")))\n 2602          {\n 2603              if (!fs_add_path_with_archives(argv[2]))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_base.c:\n  470      memset(fp, 0, sizeof (*fp));\n  471  \n  472:     if ((fin = fs_open(filename, \"r\")))\n  473      {\n  474          res = sol_load_file(fin, fp);\n  ...\n  483      int res = 0;\n  484  \n  485:     if ((fin = fs_open(filename, \"r\")))\n  486      {\n  487          res = sol_load_head(fin, fp);\n  ...\n  738      fs_file fout;\n  739  \n  740:     if ((fout = fs_open(filename, \"w\")))\n  741      {\n  742          sol_stor_file(fout, fp);\n\n25 matches across 14 files\n\n\nSearching 129 files for \"combineMultilineL10N\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.c:\n   28  }\n   29  \n   30: char* combineMultilineL10N(char* msg)\n   31  {				\n   32  	jstring input_string = (*static_env)->NewStringUTF(static_env, msg);	\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n  147                      // Multilines in the .po files exist, and I hate string manipulation in C...\n  148                      // but I hate having to jump back to Java more\n  149:                     strcpy(clean_msgid, combineMultilineL10N(msgid));   \n  150:                     strcpy(clean_msgstr, combineMultilineL10N(msgstr)); \n  151  \n  152                      LOGI(\"DEBUG cleanmsgid n: %s\", clean_msgid);\n\n3 matches across 2 files\n\n\nSearching 129 files for \"static_env\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.c:\n   30  char* combineMultilineL10N(char* msg)\n   31  {				\n   32: 	jstring input_string = (*static_env)->NewStringUTF(static_env, msg);	\n   33: 	jstring fixed_string = (jstring) (*static_env)->CallObjectMethod( static_env, JavaVideoThread, JavaLineManipulationId, input_string );\n   34  	\n   35: 	char * str = (*static_env)->GetStringUTFChars(static_env, fixed_string, 0);\n   36: 	(*static_env)->ReleaseStringUTFChars(static_env, fixed_string, str);	\n   37  	\n   38  	return str;\n\n8 matches in 1 file\n\n\nSearching 242 files for \"static_env\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.c:\n   30  char* combineMultilineL10N(char* msg)\n   31  {				\n   32: 	jstring input_string = (*static_env)->NewStringUTF(static_env, msg);	\n   33: 	jstring fixed_string = (jstring) (*static_env)->CallObjectMethod( static_env, JavaVideoThread, JavaLineManipulationId, input_string );\n   34  	\n   35: 	char * str = (*static_env)->GetStringUTFChars(static_env, fixed_string, 0);\n   36: 	(*static_env)->ReleaseStringUTFChars(static_env, fixed_string, str);	\n   37  	\n   38  	return str;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.h:\n   48  \n   49  #ifdef RELEASE_BUILD\n   50: static JNIEnv* static_env;\n   51  static jobject static_thiz;\n   52  \n\n9 matches across 2 files\n\n\nSearching 242 files for \"fput\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/demo.c:\n  225  \n  226              case '\\0':\n  227:                 fputs(L_(\"Missing format character in replay name\\n\"), stderr);\n  228                  fmt--;\n  229                  break;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/gzio.c:\n  924      int n;\n  925      for (n = 0; n < 4; n++) {\n  926:         fputc((int)(x & 0xff), file);\n  927          x >>= 8;\n  928      }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/syswm.c:\n  127          }\n  128          else\n  129:             fputs(L_(\"Failed to allocate memory for EWMH icon data.\\n\"), stderr);\n  130  \n  131          free(p);\n\n3 matches across 3 files\n\n\nSearching 242 files for \"L_\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.c:\n   30  char* combineMultilineL10N(char* msg)\n   31  {				\n   32: 	JNIEnv* static_env = SDL_ANDROID_JniEnv();\n   33: 	jobject static_thiz = SDL_ANDROID_JniVideoObject();\n   34  \n   35  	jstring input_string = (*static_env)->NewStringUTF(static_env, msg);	\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.h:\n   32  #define ENABLE_NLS 1 // GJT: Controls localization\n   33  #define ENABLE_OPENGLES 1\n   34: #define GL_VERSION_ES_CM_1_1 1\n   35  #define PHYSFS_SUPPORTS_ZIP 1 // GJT: For PhysFS zip/apk support\n   36  #define ANDROID_DATA \"assets/data/\"\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/demo.c:\n  225  \n  226              case '\\0':\n  227:                 fputs(L_(\"Missing format character in replay name\\n\"), stderr);\n  228                  fmt--;\n  229                  break;\n  230  \n  231              default:\n  232:                 fprintf(stderr, L_(\"Invalid format character in \"\n  233                                     \"replay name: \\\"%%%c\\\"\\n\"), *fmt);\n  234                  break;\n  ...\n  427                      {\n  428                          union cmd cmd;\n  429:                         cmd.type = CMD_GOAL_OPEN;\n  430                          game_proxy_enq(&cmd);\n  431                      }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/game_client.c:\n  222              break;\n  223  \n  224:         case CMD_GOAL_OPEN:\n  225              /*\n  226               * Enable the goal and make sure it's fully visible if\n  ...\n  251              break;\n  252  \n  253:         case CMD_BALL_RADIUS:\n  254              sol_lerp_cmd(&gl.lerp, &cs, cmd);\n  255              break;\n  ...\n  268              break;\n  269  \n  270:         case CMD_BALL_POSITION:\n  271              sol_lerp_cmd(&gl.lerp, &cs, cmd);\n  272              break;\n  273  \n  274:         case CMD_BALL_BASIS:\n  275              sol_lerp_cmd(&gl.lerp, &cs, cmd);\n  276              break;\n  277  \n  278:         case CMD_BALL_PEND_BASIS:\n  279              sol_lerp_cmd(&gl.lerp, &cs, cmd);\n  280              break;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/game_draw.c:\n   43      {\n   44          glTranslatef(vary->uv[0].p[0],\n   45:                      vary->uv[0].p[1] + BALL_FUDGE,\n   46                       vary->uv[0].p[2]);\n   47          glScalef(vary->uv[0].r,\n   ..\n  237      glTranslatef(+view->p[0], +view->p[1] * d, +view->p[2]);\n  238  \n  239:     glEnable(GL_LIGHT0);\n  240:     glLightfv(GL_LIGHT0, GL_POSITION, light_p[0]);\n  241:     glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_c[0]);\n  242:     glLightfv(GL_LIGHT0, GL_SPECULAR, light_c[0]);\n  243  \n  244:     glEnable(GL_LIGHT1);\n  245:     glLightfv(GL_LIGHT1, GL_POSITION, light_p[1]);\n  246:     glLightfv(GL_LIGHT1, GL_DIFFUSE,  light_c[1]);\n  247:     glLightfv(GL_LIGHT1, GL_SPECULAR, light_c[1]);\n  248  \n  249      glPopMatrix();\n  ...\n  285      /* Fudge to eliminate the floor from reflection. */\n  286  \n  287:     glClipPlane4f_(GL_CLIP_PLANE0, 0, 1, 0, -0.00001);\n  288  }\n  289  \n  ...\n  323      nz[1] *= d;\n  324  \n  325:     glClipPlane4f_(GL_CLIP_PLANE1, nz[0], nz[1], nz[2], nz[3]);\n  326:     glClipPlane4f_(GL_CLIP_PLANE2, pz[0], pz[1], pz[2], pz[3]);\n  327  }\n  328  \n  ...\n  348  \n  349          if (d < 0)\n  350:             glEnable(GL_CLIP_PLANE0);\n  351  \n  352          switch (pose)\n  ...\n  365                   */\n  366  \n  367:                 glDepthMask(GL_FALSE);\n  368                  sol_draw(draw, rend, 0, 1);\n  369:                 glDepthMask(GL_TRUE);\n  370              }\n  371              game_draw_balls(rend, draw->vary, M, t);\n  ...\n  390          /* Draw the billboards, entities, and  particles. */\n  391  \n  392:         glDisable(GL_LIGHTING);\n  393:         glDepthMask(GL_FALSE);\n  394          {\n  395              sol_bill(draw, rend, M, t);\n  ...\n  402              glColor4f(1.0f, 1.0f, 1.0f, 1.0f);\n  403          }\n  404:         glDepthMask(GL_TRUE);\n  405:         glEnable(GL_LIGHTING);\n  406  \n  407          if (d < 0)\n  408:             glDisable(GL_CLIP_PLANE0);\n  409      }\n  410      glPopMatrix();\n  ...\n  494              if (gd->draw.reflective && config_get_d(CONFIG_REFLECTION))\n  495              {\n  496:                 glEnable(GL_STENCIL_TEST);\n  497                  {\n  498                      /* Draw the mirrors only into the stencil buffer. */\n  499  \n  500:                     glStencilFunc(GL_ALWAYS, 1, 0xFFFFFFFF);\n  501:                     glStencilOp(GL_REPLACE, GL_REPLACE, GL_REPLACE);\n  502:                     glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);\n  503:                     glDepthMask(GL_FALSE);\n  504  \n  505                      game_refl_all(&rend, gd);\n  506  \n  507:                     glDepthMask(GL_TRUE);\n  508:                     glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);\n  509:                     glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);\n  510:                     glStencilFunc(GL_EQUAL, 1, 0xFFFFFFFF);\n  511  \n  512                      /* Draw the scene reflected into color and depth buffers. */\n  513  \n  514:                     glFrontFace(GL_CW);\n  515                      glPushMatrix();\n  516                      {\n  ...\n  523                      }\n  524                      glPopMatrix();\n  525:                     glFrontFace(GL_CCW);\n  526  \n  527:                     glStencilFunc(GL_ALWAYS, 0, 0xFFFFFFF);\n  528                  }\n  529:                 glDisable(GL_STENCIL_TEST);\n  530              }\n  531  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/game_server.c:\n  184  static void game_cmd_goalopen(void)\n  185  {\n  186:     cmd.type = CMD_GOAL_OPEN;\n  187      game_proxy_enq(&cmd);\n  188  }\n  ...\n  190  static void game_cmd_updball(void)\n  191  {\n  192:     cmd.type = CMD_BALL_POSITION;\n  193      v_cpy(cmd.ballpos.p, vary.uv[0].p);\n  194      game_proxy_enq(&cmd);\n  195  \n  196:     cmd.type = CMD_BALL_BASIS;\n  197      v_cpy(cmd.ballbasis.e[0], vary.uv[0].e[0]);\n  198      v_cpy(cmd.ballbasis.e[1], vary.uv[0].e[1]);\n  199      game_proxy_enq(&cmd);\n  200  \n  201:     cmd.type = CMD_BALL_PEND_BASIS;\n  202      v_cpy(cmd.ballpendbasis.E[0], vary.uv[0].E[0]);\n  203      v_cpy(cmd.ballpendbasis.E[1], vary.uv[0].E[1]);\n  ...\n  223  static void game_cmd_ballradius(void)\n  224  {\n  225:     cmd.type         = CMD_BALL_RADIUS;\n  226      cmd.ballradius.r = vary.uv[0].r;\n  227      game_proxy_enq(&cmd);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/level.c:\n  136      if (!sol_load_meta(&base, filename))\n  137      {\n  138:         fprintf(stderr, L_(\"Failure to load level file '%s'\\n\"), filename);\n  139          return 0;\n  140      }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/level.h:\n    1: #ifndef LEVEL_H\n    2: #define LEVEL_H\n    3  \n    4  #include \"base_config.h\"\n    .\n   14  };\n   15  \n   16: #define LEVEL_LOCKED    0x1\n   17: #define LEVEL_COMPLETED 0x2\n   18  \n   19  struct level\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/main.c:\n   75      if (wire)\n   76      {\n   77:         glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);\n   78          wire = 0;\n   79      }\n   80      else\n   81      {\n   82:         glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n   83          wire = 1;\n   84      }\n   ..\n   88  /*---------------------------------------------------------------------------*/\n   89  \n   90: static int handle_key_dn(SDL_Event *e)\n   91  {\n   92      int d = 1;\n   ..\n  125  \n  126      default:\n  127:         if (SDL_EnableUNICODE(-1))\n  128              d = st_keybd(e->key.keysym.unicode, 1);\n  129          else\n  ...\n  134  }\n  135  \n  136: static int handle_key_up(SDL_Event *e)\n  137  {\n  138      int d = 1;\n  ...\n  171  static int loop(void)\n  172  {\n  173:     SDL_Event e;\n  174      int d = 1;\n  175  \n  176      /* Process SDL events. */\n  177  \n  178:     while (d && SDL_PollEvent(&e))\n  179      {\n  180          switch (e.type)\n  181          {\n  182:         case SDL_QUIT:\n  183              return 0;\n  184  \n  185:         case SDL_MOUSEMOTION:\n  186              st_point(+e.motion.x,\n  187                       -e.motion.y + config_get_d(CONFIG_HEIGHT),\n  ...\n  191              break;\n  192  \n  193:         case SDL_MOUSEBUTTONDOWN:\n  194              d = st_click(e.button.button, 1);\n  195              break;\n  196  \n  197:         case SDL_MOUSEBUTTONUP:\n  198              d = st_click(e.button.button, 0);\n  199              break;\n  200  \n  201:         case SDL_KEYDOWN:\n  202              d = handle_key_dn(&e);\n  203              break;\n  204  \n  205:         case SDL_KEYUP:\n  206              d = handle_key_up(&e);\n  207              break;\n  208  \n  209:         case SDL_ACTIVEEVENT:\n  210:             if (e.active.state == SDL_APPINPUTFOCUS)\n  211                  if (e.active.gain == 0 && video_get_grab())\n  212                      goto_state(&st_pause);\n  213              break;\n  214  \n  215:         case SDL_JOYAXISMOTION:\n  216              st_stick(e.jaxis.axis, JOY_VALUE(e.jaxis.value));\n  217              break;\n  218  \n  219:         case SDL_JOYBUTTONDOWN:\n  220              d = st_buttn(e.jbutton.button, 1);\n  221              break;\n  222  \n  223:         case SDL_JOYBUTTONUP:\n  224              d = st_buttn(e.jbutton.button, 0);\n  225              break;\n  ...\n  281  \n  282  #define opt_usage \\\n  283:     L_(                                                                   \\\n  284          \"Usage: %s [options ...]\\n\"                                       \\\n  285          \"Options:\\n\"                                                      \\\n  ...\n  292  \n  293  #define opt_error(option) \\\n  294:     fprintf(stderr, L_(\"Option '%s' requires an argument.\\n\"), option)\n  295  \n  296  static void opt_parse(int argc, char **argv)\n  ...\n  440  int main(int argc, char *argv[])\n  441  {\n  442:     SDL_Joystick *joy = NULL;\n  443      int t1, t0;\n  444  \n  ...\n  467      /* Initialize SDL. */\n  468  \n  469:     if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_JOYSTICK) == -1)\n  470      {\n  471:         fprintf(stderr, \"%s\\n\", SDL_GetError());\n  472          return 1;\n  473      }\n  ...\n  480      /* Initialize joystick. */\n  481  \n  482:     if (config_get_d(CONFIG_JOYSTICK) && SDL_NumJoysticks() > 0)\n  483      {\n  484:         joy = SDL_JoystickOpen(config_get_d(CONFIG_JOYSTICK_DEVICE));\n  485          if (joy)\n  486:             SDL_JoystickEventState(SDL_ENABLE);\n  487      }\n  488  \n  ...\n  539      /* Run the main game loop. */\n  540  \n  541:     t0 = SDL_GetTicks();\n  542  \n  543      while (loop())\n  544      {\n  545:         if ((t1 = SDL_GetTicks()) > t0)\n  546          {\n  547              /* Step the game state. */\n  ...\n  558  \n  559              if (config_get_d(CONFIG_NICE))\n  560:                 SDL_Delay(1);\n  561          }\n  562      }\n  ...\n  565  \n  566      if (joy)\n  567:         SDL_JoystickClose(joy);\n  568  \n  569      tilt_free();\n  570:     SDL_Quit();\n  571  \n  572      return 0;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/set.c:\n  119              int flags = 0;\n  120  \n  121:             if (l->is_locked)    flags |= LEVEL_LOCKED;\n  122:             if (l->is_completed) flags |= LEVEL_COMPLETED;\n  123  \n  124              fs_printf(fp, \"level %d %d %s\\n\", flags, l->version_num, l->file);\n  ...\n  205                  /* Always prefer \"locked\" flag from the score file. */\n  206  \n  207:                 l->is_locked = !!(flags & LEVEL_LOCKED);\n  208  \n  209                  /* Only use \"completed\" flag and scores on version match. */\n  ...\n  211                  if (version == l->version_num)\n  212                  {\n  213:                     l->is_completed = !!(flags & LEVEL_COMPLETED);\n  214  \n  215                      get_score(fp, &l->scores[SCORE_TIME]);\n  ...\n  274      if (!fin)\n  275      {\n  276:         fprintf(stderr, L_(\"Failure to load set file '%s'\\n\"), filename);\n  277          return 0;\n  278      }\n  ...\n  574      {\n  575          union cmd cmd;\n  576:         cmd.type = CMD_GOAL_OPEN;\n  577          game_proxy_enq(&cmd);\n  578          game_client_sync(NULL);\n  ...\n  586          image_snap(filename);\n  587  \n  588:         SDL_GL_SwapBuffers();\n  589      }\n  590  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_ball.c:\n   38  enum\n   39  {\n   40:     BALL_NEXT = GUI_LAST,\n   41:     BALL_PREV,\n   42:     BALL_BACK\n   43  };\n   44  \n   ..\n   83      int i;\n   84  \n   85:     SAFECPY(ball_file, config_get_s(CONFIG_BALL_FILE));\n   86  \n   87      if ((balls = fs_dir_scan(\"ball\", has_ball_sols)))\n   ..\n  112              base_name(DIR_ITEM_GET(balls, curr_ball)->path));\n  113  \n  114:     config_set_s(CONFIG_BALL_FILE, ball_file);\n  115  \n  116      ball_free();\n  ...\n  126      switch (tok)\n  127      {\n  128:     case BALL_NEXT:\n  129          if (++curr_ball == array_len(balls))\n  130              curr_ball = 0;\n  ...\n  134          break;\n  135  \n  136:     case BALL_PREV:\n  137          if (--curr_ball == -1)\n  138              curr_ball = array_len(balls) - 1;\n  ...\n  142          break;\n  143  \n  144:     case BALL_BACK:\n  145          goto_state(&st_conf);\n  146          break;\n  ...\n  158      if (!demo_replay_init(\"gui/ball.nbr\", &g, NULL, NULL, NULL, NULL))\n  159      {\n  160:         ball_action(BALL_BACK, 0);\n  161          return;\n  162      }\n  ...\n  179              gui_label(jd, _(\"Ball Model\"), GUI_SML, GUI_ALL, 0, 0);\n  180              gui_space(jd);\n  181:             gui_start(jd, _(\"Back\"), GUI_SML, BALL_BACK, 0);\n  182          }\n  183  \n  ...\n  186          if ((jd = gui_hstack(id)))\n  187          {\n  188:             gui_state(jd, \" > \", GUI_SML, BALL_NEXT, 0);\n  189  \n  190              name_id = gui_label(jd, \"very-long-ball-name\",\n  ...\n  195              gui_set_fill(name_id);\n  196  \n  197:             gui_state(jd, \" < \", GUI_SML, BALL_PREV, 0);\n  198          }\n  199  \n  ...\n  260  \n  261          if (config_tst_d(CONFIG_JOYSTICK_BUTTON_EXIT, b))\n  262:             return ball_action(BALL_BACK, 0);\n  263      }\n  264      return 1;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_ball.h:\n    1: #ifndef ST_BALL_H\n    2: #define ST_BALL_H\n    3  \n    4  #include \"state.h\"\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_conf.c:\n  291  \n  292          const char *player = config_get_s(CONFIG_PLAYER);\n  293:         const char *ball   = config_get_s(CONFIG_BALL_FILE);\n  294  \n  295          int name_id = 0, ball_id = 0;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_demo.c:\n  509      if (d)\n  510      {\n  511:         if (b == SDL_BUTTON_WHEELUP)   set_speed(+1);\n  512:         if (b == SDL_BUTTON_WHEELDOWN) set_speed(-1);\n  513      }\n  514  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_fail.c:\n   35  enum\n   36  {\n   37:     FAIL_NEXT = GUI_LAST,\n   38:     FAIL_SAME,\n   39:     FAIL_SAVE,\n   40:     FAIL_BACK,\n   41:     FAIL_OVER\n   42  };\n   43  \n   ..\n   51      switch (tok)\n   52      {\n   53:     case FAIL_BACK:\n   54:     case FAIL_OVER:\n   55          progress_stop();\n   56          return goto_state(&st_exit);\n   57  \n   58:     case FAIL_SAVE:\n   59          progress_stop();\n   60          return goto_save(&st_fail, &st_fail);\n   61  \n   62:     case FAIL_NEXT:\n   63          if (progress_next())\n   64              return goto_state(&st_level);\n   65          break;\n   66  \n   67:     case FAIL_SAME:\n   68          if (progress_same())\n   69              return goto_state(&st_level);\n   ..\n   94          {\n   95              if (progress_dead())\n   96:                 gui_start(jd, _(\"Exit\"), GUI_SML, FAIL_OVER, 0);\n   97  \n   98              if (progress_next_avail())\n   99:                 gui_start(jd, _(\"Next Level\"),  GUI_SML, FAIL_NEXT, 0);\n  100  \n  101              if (progress_same_avail())\n  102:                 gui_start(jd, _(\"Retry Level\"), GUI_SML, FAIL_SAME, 0);\n  103  \n  104              if (demo_saved())\n  105:                 gui_state(jd, _(\"Save Replay\"), GUI_SML, FAIL_SAVE, 0);\n  106          }\n  107  \n  ...\n  169              return fail_action(gui_token(active), gui_value(active));\n  170          if (config_tst_d(CONFIG_JOYSTICK_BUTTON_EXIT, b))\n  171:             return fail_action(FAIL_BACK, 0);\n  172      }\n  173      return 1;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_fail.h:\n    1: #ifndef ST_FAIL_H\n    2: #define ST_FAIL_H\n    3  \n    4  #include <state.h>\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_goal.c:\n   37  enum\n   38  {\n   39:     GOAL_NEXT = GUI_LAST,\n   40:     GOAL_SAME,\n   41:     GOAL_SAVE,\n   42:     GOAL_BACK,\n   43:     GOAL_DONE,\n   44:     GOAL_OVER,\n   45:     GOAL_LAST\n   46  };\n   47  \n   ..\n   58      switch (tok)\n   59      {\n   60:     case GOAL_BACK:\n   61:     case GOAL_OVER:\n   62          progress_stop();\n   63          return goto_state(&st_exit);\n   64  \n   65:     case GOAL_SAVE:\n   66          progress_stop();\n   67          return goto_save(&st_goal, &st_goal);\n   ..\n   71          return goto_name(&st_goal, &st_goal, 0);\n   72  \n   73:     case GOAL_DONE:\n   74          progress_stop();\n   75          progress_exit();\n   76          return goto_state(&st_exit);\n   77  \n   78:     case GOAL_LAST:\n   79          progress_stop();\n   80          return goto_state(&st_exit);\n   ..\n   84          return goto_state(&st_goal);\n   85  \n   86:     case GOAL_NEXT:\n   87          if (progress_next())\n   88              return goto_state(&st_level);\n   89          break;\n   90  \n   91:     case GOAL_SAME:\n   92          if (progress_same())\n   93              return goto_state(&st_level);\n   ..\n  212          {\n  213              if      (progress_done())\n  214:                 gui_start(jd, _(\"Finish\"), GUI_SML, GOAL_DONE, 0);\n  215              else if (progress_last())\n  216:                 gui_start(jd, _(\"Finish\"), GUI_SML, GOAL_LAST, 0);\n  217  \n  218              if (progress_next_avail())\n  219:                 gui_start(jd, _(\"Next Level\"),  GUI_SML, GOAL_NEXT, 0);\n  220  \n  221              if (progress_same_avail())\n  222:                 gui_start(jd, _(\"Retry Level\"), GUI_SML, GOAL_SAME, 0);\n  223  \n  224              if (demo_saved())\n  225:                 gui_state(jd, _(\"Save Replay\"), GUI_SML, GOAL_SAVE, 0);\n  226          }\n  227  \n  ...\n  301              return goal_action(GUI_SCORE, GUI_SCORE_NEXT(gui_score_get()));\n  302          if (config_tst_d(CONFIG_KEY_RESTART, c) && progress_same_avail())\n  303:             return goal_action(GOAL_SAME, 0);\n  304      }\n  305  \n  ...\n  316              return goal_action(gui_token(active), gui_value(active));\n  317          if (config_tst_d(CONFIG_JOYSTICK_BUTTON_EXIT, b))\n  318:             return goal_action(GOAL_BACK, 0);\n  319      }\n  320      return 1;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_goal.h:\n    1: #ifndef ST_GOAL_H\n    2: #define ST_GOAL_H\n    3  \n    4  #include \"state.h\"\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_level.c:\n  106  static int level_click(int b, int d)\n  107  {\n  108:     return (b == SDL_BUTTON_LEFT && d == 1) ? goto_state(&st_play_ready) : 1;\n  109  }\n  110  \n  ...\n  219          /* Quit the game. */\n  220  \n  221:         SDL_Event e = { SDL_QUIT };\n  222:         SDL_PushEvent(&e);\n  223      }\n  224  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_level.h:\n    1: #ifndef ST_LEVEL_H\n    2: #define ST_LEVEL_H\n    3  \n    4  #include \"state.h\"\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_name.c:\n  138      }\n  139  \n  140:     SDL_EnableUNICODE(1);\n  141  \n  142      return name_gui();\n  ...\n  148          back_free();\n  149  \n  150:     SDL_EnableUNICODE(0);\n  151      gui_delete(id);\n  152  }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_over.c:\n   62  static int over_click(int b, int d)\n   63  {\n   64:     return (b == SDL_BUTTON_LEFT && d == 1) ? goto_state(&st_exit) : 1;\n   65  }\n   66  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_pause.c:\n   46      {\n   47      case PAUSE_CONTINUE:\n   48:         SDL_PauseAudio(0);\n   49          video_set_grab(0);\n   50          return goto_state(st_continue);\n   ..\n   53          if (progress_same())\n   54          {\n   55:             SDL_PauseAudio(0);\n   56              video_set_grab(1);\n   57              return goto_state(&st_play_ready);\n   ..\n   62          progress_stat(GAME_NONE);\n   63          progress_stop();\n   64:         SDL_PauseAudio(0);\n   65          audio_music_stop();\n   66          return goto_state(&st_exit);\n   ..\n  106  \n  107      video_clr_grab();\n  108:     SDL_PauseAudio(1);\n  109  \n  110      hud_update(0);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_play.c:\n  164          click_camera(b);\n  165  \n  166:         if (b == SDL_BUTTON_LEFT)\n  167              goto_state(&st_play_loop);\n  168      }\n  ...\n  245          click_camera(b);\n  246  \n  247:         if (b == SDL_BUTTON_LEFT)\n  248              goto_state(&st_play_loop);\n  249      }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_save.c:\n  138  static int save_enter(struct state *st, struct state *prev)\n  139  {\n  140:     SDL_EnableUNICODE(1);\n  141  \n  142      return save_gui();\n  ...\n  145  static void save_leave(struct state *st, struct state *next, int id)\n  146  {\n  147:     SDL_EnableUNICODE(0);\n  148      gui_delete(id);\n  149  }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_shared.c:\n   79      /* Activate on left click. */\n   80  \n   81:     if (b == SDL_BUTTON_LEFT && d)\n   82          return st_buttn(config_get_d(CONFIG_JOYSTICK_BUTTON_A), 1);\n   83      else\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_start.c:\n  345      if (d)\n  346      {\n  347:         if (b == SDL_BUTTON_WHEELUP)   start_score(-1);\n  348:         if (b == SDL_BUTTON_WHEELDOWN) start_score(+1);\n  349      }\n  350  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_title.c:\n   45          union cmd cmd;\n   46  \n   47:         cmd.type = CMD_GOAL_OPEN;\n   48          game_proxy_enq(&cmd);\n   49          game_client_sync(NULL);\n   ..\n   68      MODE_NONE,\n   69      MODE_LEVEL,\n   70:     MODE_LEVEL_FADE,\n   71      MODE_DEMO,\n   72      MODE_DEMO_FADE\n   ..\n  214      real_time = 0.0f;\n  215  \n  216:     SDL_EnableUNICODE(1);\n  217  \n  218      return title_gui();\n  ...\n  227      }\n  228  \n  229:     SDL_EnableUNICODE(0);\n  230      demo_replay_stop(0);\n  231      gui_delete(id);\n  ...\n  250              game_fade(+1.0f);\n  251              real_time = 0.0f;\n  252:             mode = MODE_LEVEL_FADE;\n  253          }\n  254          break;\n  255  \n  256:     case MODE_LEVEL_FADE: /* Fade out.  Load demo level. */\n  257  \n  258          if (real_time > 1.0f)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/util.h:\n    1: #ifndef UTIL_H\n    2: #define UTIL_H\n    3  \n    4  #include \"set.h\"\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs.c:\n   14  #include \"physfs.h\"\n   15  \n   16: #define __PHYSICSFS_INTERNAL__\n   17  #include \"physfs_internal.h\"\n   18  \n   ..\n  187      memset(&ecd, '\\0', sizeof (ecd));\n  188      ecd.list = (char **) allocator.Malloc(sizeof (char *));\n  189:     BAIL_IF_MACRO(ecd.list == NULL, ERR_OUT_OF_MEMORY, NULL);\n  190      func(enumStringListCallback, &ecd);\n  191:     BAIL_IF_MACRO(ecd.errorstr != NULL, ecd.errorstr, NULL);\n  192      ecd.list[ecd.size] = NULL;\n  193      return(ecd.list);\n  ...\n  421      const char *ext;\n  422  \n  423:     BAIL_IF_MACRO(!__PHYSFS_platformExists(d), ERR_NO_SUCH_FILE, NULL);\n  424  \n  425      ext = find_filename_extension(d);\n  ...\n  447      } /* else */\n  448  \n  449:     BAIL_IF_MACRO(retval == NULL, ERR_UNSUPPORTED_ARCHIVE, NULL);\n  450      return(retval);\n  451  } /* openDirectory */\n  ...\n  474  \n  475          if ((ch == ':') || (ch == '\\\\'))  /* illegal chars in a physfs path. */\n  476:             BAIL_MACRO(ERR_INSECURE_FNAME, 0);\n  477  \n  478          if (ch == '/')   /* path separator. */\n  ...\n  480              *dst = '\\0';  /* \".\" and \"..\" are illegal pathnames. */\n  481              if ((strcmp(prev, \".\") == 0) || (strcmp(prev, \"..\") == 0))\n  482:                 BAIL_MACRO(ERR_INSECURE_FNAME, 0);\n  483  \n  484              while (*src == '/')   /* chop out doubles... */\n  ...\n  595  \n  596      for (i = openList; i != NULL; i = i->next)\n  597:         BAIL_IF_MACRO(i->dirHandle == dh, ERR_FILES_STILL_OPEN, 0);\n  598  \n  599      dh->funcs->dirClose(dh->opaque);\n  ...\n  670  \n  671      /* We need argv0 to go on. */\n  672:     BAIL_IF_MACRO(argv0 == NULL, ERR_ARGV0_IS_NULL, NULL);\n  673  \n  674      dirsep = PHYSFS_getDirSeparator();\n  ...\n  693          size_t size = (size_t) (ptr - argv0);\n  694          retval = (char *) allocator.Malloc(size + 1);\n  695:         BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  696          memcpy(retval, argv0, size);\n  697          retval[size] = '\\0';\n  ...\n  700  \n  701      /* argv0 wasn't helpful. */\n  702:     BAIL_MACRO(ERR_INVALID_ARGUMENT, NULL);\n  703      return(NULL);\n  704  } /* calculateBaseDir */\n  ...\n  735      char *ptr;\n  736  \n  737:     BAIL_IF_MACRO(initialized, ERR_IS_INITIALIZED, 0);\n  738  \n  739      if (!externalAllocator)\n  ...\n  741  \n  742      if (allocator.Init != NULL)\n  743:         BAIL_IF_MACRO(!allocator.Init(), NULL, 0);\n  744  \n  745:     BAIL_IF_MACRO(!__PHYSFS_platformInit(), NULL, 0);\n  746  \n  747:     BAIL_IF_MACRO(!initializeMutexes(), NULL, 0);\n  748  \n  749      baseDir = calculateBaseDir(argv0);\n  750:     BAIL_IF_MACRO(baseDir == NULL, NULL, 0);\n  751  \n  752      /* !!! FIXME: only call this if we got this from argv0 (unreliable). */\n  753      ptr = __PHYSFS_platformRealPath(baseDir);\n  754      allocator.Free(baseDir);\n  755:     BAIL_IF_MACRO(ptr == NULL, NULL, 0);\n  756      baseDir = ptr;\n  757  \n  758:     BAIL_IF_MACRO(!appendDirSep(&baseDir), NULL, 0);\n  759  \n  760      userDir = calculateUserDir();\n  ...\n  820  int PHYSFS_deinit(void)\n  821  {\n  822:     BAIL_IF_MACRO(!initialized, ERR_NOT_INITIALIZED, 0);\n  823:     BAIL_IF_MACRO(!__PHYSFS_platformDeinit(), NULL, 0);\n  824  \n  825      closeFileHandleList(&openWriteList);\n  826:     BAIL_IF_MACRO(!PHYSFS_setWriteDir(NULL), ERR_FILES_STILL_OPEN, 0);\n  827  \n  828      freeSearchPath();\n  ...\n  928      if (writeDir != NULL)\n  929      {\n  930:         BAIL_IF_MACRO_MUTEX(!freeDirHandle(writeDir, openWriteList), NULL,\n  931                              stateLock, 0);\n  932          writeDir = NULL;\n  ...\n  951      DirHandle *i;\n  952  \n  953:     BAIL_IF_MACRO(newDir == NULL, ERR_INVALID_ARGUMENT, 0);\n  954  \n  955      if (mountPoint == NULL)\n  ...\n  961      {\n  962          /* already in search path? */\n  963:         BAIL_IF_MACRO_MUTEX(strcmp(newDir, i->dirName)==0, NULL, stateLock, 1);\n  964          prev = i;\n  965      } /* for */\n  966  \n  967      dh = createDirHandle(newDir, mountPoint, 0);\n  968:     BAIL_IF_MACRO_MUTEX(dh == NULL, NULL, stateLock, 0);\n  969  \n  970      if (appendToPath)\n  ...\n  998      DirHandle *next = NULL;\n  999  \n 1000:     BAIL_IF_MACRO(oldDir == NULL, ERR_INVALID_ARGUMENT, 0);\n 1001  \n 1002      __PHYSFS_platformGrabMutex(stateLock);\n ....\n 1006          {\n 1007              next = i->next;\n 1008:             BAIL_IF_MACRO_MUTEX(!freeDirHandle(i, openReadList), NULL,\n 1009                                  stateLock, 0);\n 1010  \n ....\n 1014                  prev->next = next;\n 1015  \n 1016:             BAIL_MACRO_MUTEX(NULL, stateLock, 1);\n 1017          } /* if */\n 1018          prev = i;\n 1019      } /* for */\n 1020  \n 1021:     BAIL_MACRO_MUTEX(ERR_NOT_IN_SEARCH_PATH, stateLock, 0);\n 1022  } /* PHYSFS_removeFromSearchPath */\n 1023  \n ....\n 1044      __PHYSFS_platformReleaseMutex(stateLock);\n 1045  \n 1046:     BAIL_MACRO(ERR_NOT_IN_SEARCH_PATH, NULL);\n 1047  } /* PHYSFS_getMountPoint */\n 1048  \n ....\n 1087      char *str = NULL;\n 1088  \n 1089:     BAIL_IF_MACRO(!initialized, ERR_NOT_INITIALIZED, 0);\n 1090  \n 1091      /* set write dir... */\n ....\n 1095      str = (char *) __PHYSFS_smallAlloc(len);\n 1096  \n 1097:     BAIL_IF_MACRO(str == NULL, ERR_OUT_OF_MEMORY, 0);\n 1098      sprintf(str, \"%s.%s%s%s\", userdir, organization, dirsep, appName);\n 1099  \n ....\n 1118              PHYSFS_setWriteDir(NULL);   /* just in case. */\n 1119              __PHYSFS_smallFree(str);\n 1120:             BAIL_MACRO(ERR_CANT_SET_WRITE_DIR, 0);\n 1121          } /* if */\n 1122      } /* if */\n ....\n 1215  \n 1216      str = (char *) allocator.Malloc(allocSize);\n 1217:     BAIL_IF_MACRO(str == NULL, ERR_OUT_OF_MEMORY, NULL);\n 1218  \n 1219      if (prepend == NULL)\n ....\n 1286          assert(mntpntlen > 1); /* root mount points should be NULL. */\n 1287          /* not under the mountpoint, so skip this archive. */\n 1288:         BAIL_IF_MACRO(len < mntpntlen-1, ERR_NO_SUCH_PATH, 0);\n 1289          /* !!! FIXME: Case insensitive? */\n 1290          retval = strncmp(h->mountPoint, fname, mntpntlen-1);\n 1291:         BAIL_IF_MACRO(retval != 0, ERR_NO_SUCH_PATH, 0);\n 1292          if (len > mntpntlen-1)  /* corner case... */\n 1293:             BAIL_IF_MACRO(fname[mntpntlen-1] != '/', ERR_NO_SUCH_PATH, 0);\n 1294          fname += mntpntlen-1;  /* move to start of actual archive path. */\n 1295          if (*fname == '/')\n ....\n 1311              if (end != NULL) *end = '/';\n 1312  \n 1313:             BAIL_IF_MACRO(rc, ERR_SYMLINK_DISALLOWED, 0);   /* insecure. */\n 1314  \n 1315              /* break out early if path element is missing. */\n ....\n 1345      int exists = 1;  /* force existance check on first path element. */\n 1346  \n 1347:     BAIL_IF_MACRO(!sanitizePlatformIndependentPath(_dname, dname), NULL, 0);\n 1348  \n 1349      __PHYSFS_platformGrabMutex(stateLock);\n 1350:     BAIL_IF_MACRO_MUTEX(writeDir == NULL, ERR_NO_WRITE_DIR, stateLock, 0);\n 1351      h = writeDir;\n 1352:     BAIL_IF_MACRO_MUTEX(!verifyPath(h, &dname, 1), NULL, stateLock, 0);\n 1353  \n 1354      start = dname;\n ....\n 1387      size_t len;\n 1388  \n 1389:     BAIL_IF_MACRO(_dname == NULL, ERR_INVALID_ARGUMENT, 0);\n 1390      len = strlen(_dname) + 1;\n 1391      dname = (char *) __PHYSFS_smallAlloc(len);\n 1392:     BAIL_IF_MACRO(dname == NULL, ERR_OUT_OF_MEMORY, 0);\n 1393      retval = doMkdir(_dname, dname);\n 1394      __PHYSFS_smallFree(dname);\n ....\n 1401      int retval;\n 1402      DirHandle *h;\n 1403:     BAIL_IF_MACRO(!sanitizePlatformIndependentPath(_fname, fname), NULL, 0);\n 1404  \n 1405      __PHYSFS_platformGrabMutex(stateLock);\n 1406  \n 1407:     BAIL_IF_MACRO_MUTEX(writeDir == NULL, ERR_NO_WRITE_DIR, stateLock, 0);\n 1408      h = writeDir;\n 1409:     BAIL_IF_MACRO_MUTEX(!verifyPath(h, &fname, 0), NULL, stateLock, 0);\n 1410      retval = h->funcs->remove(h->opaque, fname);\n 1411  \n ....\n 1421      size_t len;\n 1422  \n 1423:     BAIL_IF_MACRO(_fname == NULL, ERR_INVALID_ARGUMENT, 0);\n 1424      len = strlen(_fname) + 1;\n 1425      fname = (char *) __PHYSFS_smallAlloc(len);\n 1426:     BAIL_IF_MACRO(fname == NULL, ERR_OUT_OF_MEMORY, 0);\n 1427      retval = doDelete(_fname, fname);\n 1428      __PHYSFS_smallFree(fname);\n ....\n 1437      size_t len;\n 1438  \n 1439:     BAIL_IF_MACRO(_fname == NULL, ERR_INVALID_ARGUMENT, NULL);\n 1440      len = strlen(_fname) + 1;\n 1441      fname = __PHYSFS_smallAlloc(len);\n 1442:     BAIL_IF_MACRO(fname == NULL, ERR_OUT_OF_MEMORY, NULL);\n 1443      if (sanitizePlatformIndependentPath(_fname, fname))\n 1444      {\n ....\n 1537      memset(&ecd, '\\0', sizeof (ecd));\n 1538      ecd.list = (char **) allocator.Malloc(sizeof (char *));\n 1539:     BAIL_IF_MACRO(ecd.list == NULL, ERR_OUT_OF_MEMORY, NULL);\n 1540      PHYSFS_enumerateFilesCallback(path, enumFilesCallback, &ecd);\n 1541      ecd.list[ecd.size] = NULL;\n ....\n 1578      char *fname;\n 1579  \n 1580:     BAIL_IF_MACRO(_fname == NULL, ERR_INVALID_ARGUMENT, ) /*0*/;\n 1581:     BAIL_IF_MACRO(callback == NULL, ERR_INVALID_ARGUMENT, ) /*0*/;\n 1582  \n 1583      len = strlen(_fname) + 1;\n 1584      fname = (char *) __PHYSFS_smallAlloc(len);\n 1585:     BAIL_IF_MACRO(fname == NULL, ERR_OUT_OF_MEMORY, ) /*0*/;\n 1586  \n 1587      if (sanitizePlatformIndependentPath(_fname, fname))\n ....\n 1623      size_t len;\n 1624  \n 1625:     BAIL_IF_MACRO(_fname == NULL, ERR_INVALID_ARGUMENT, -1);\n 1626      len = strlen(_fname) + 1;\n 1627      fname = (char *) __PHYSFS_smallAlloc(len);\n 1628:     BAIL_IF_MACRO(fname == NULL, ERR_OUT_OF_MEMORY, -1);\n 1629  \n 1630      if (sanitizePlatformIndependentPath(_fname, fname))\n ....\n 1664      char *fname;\n 1665  \n 1666:     BAIL_IF_MACRO(_fname == NULL, ERR_INVALID_ARGUMENT, 0);\n 1667      len = strlen(_fname) + 1;\n 1668      fname = (char *) __PHYSFS_smallAlloc(len);\n 1669:     BAIL_IF_MACRO(fname == NULL, ERR_OUT_OF_MEMORY, 0);\n 1670  \n 1671      if (!sanitizePlatformIndependentPath(_fname, fname))\n ....\n 1703      char *fname;\n 1704  \n 1705:     BAIL_IF_MACRO(!allowSymLinks, ERR_SYMLINK_DISALLOWED, 0);\n 1706  \n 1707:     BAIL_IF_MACRO(_fname == NULL, ERR_INVALID_ARGUMENT, 0);\n 1708      len = strlen(_fname) + 1;\n 1709      fname = (char *) __PHYSFS_smallAlloc(len);\n 1710:     BAIL_IF_MACRO(fname == NULL, ERR_OUT_OF_MEMORY, 0);\n 1711  \n 1712      if (!sanitizePlatformIndependentPath(_fname, fname))\n ....\n 1744      char *fname;\n 1745  \n 1746:     BAIL_IF_MACRO(_fname == NULL, ERR_INVALID_ARGUMENT, 0);\n 1747      len = strlen(_fname) + 1;\n 1748      fname = (char *) __PHYSFS_smallAlloc(len);\n 1749:     BAIL_IF_MACRO(fname == NULL, ERR_OUT_OF_MEMORY, 0);\n 1750  \n 1751      if (sanitizePlatformIndependentPath(_fname, fname))\n ....\n 1813      size_t len;\n 1814  \n 1815:     BAIL_IF_MACRO(_fname == NULL, ERR_INVALID_ARGUMENT, 0);\n 1816      len = strlen(_fname) + 1;\n 1817      fname = (char *) __PHYSFS_smallAlloc(len);\n 1818:     BAIL_IF_MACRO(fname == NULL, ERR_OUT_OF_MEMORY, 0);\n 1819  \n 1820      if (sanitizePlatformIndependentPath(_fname, fname))\n ....\n 1914      /* -1 == close failure. 0 == not found. 1 == success. */\n 1915      rc = closeHandleInOpenList(&openReadList, handle);\n 1916:     BAIL_IF_MACRO_MUTEX(rc == -1, NULL, stateLock, 0);\n 1917      if (!rc)\n 1918      {\n 1919          rc = closeHandleInOpenList(&openWriteList, handle);\n 1920:         BAIL_IF_MACRO_MUTEX(rc == -1, NULL, stateLock, 0);\n 1921      } /* if */\n 1922  \n 1923      __PHYSFS_platformReleaseMutex(stateLock);\n 1924:     BAIL_IF_MACRO(!rc, ERR_NOT_A_HANDLE, 0);\n 1925      return(1);\n 1926  } /* PHYSFS_close */\n ....\n 1976      FileHandle *fh = (FileHandle *) handle;\n 1977  \n 1978:     BAIL_IF_MACRO(!fh->forReading, ERR_FILE_ALREADY_OPEN_W, -1);\n 1979:     BAIL_IF_MACRO(objSize == 0, NULL, 0);\n 1980:     BAIL_IF_MACRO(objCount == 0, NULL, 0);\n 1981      if (fh->buffer != NULL)\n 1982          return(doBufferedRead(fh, buffer, objSize, objCount));\n ....\n 2001  \n 2002      /* would overflow buffer. Flush and then write the new objects, too. */\n 2003:     BAIL_IF_MACRO(!PHYSFS_flush(handle), NULL, -1);\n 2004      return(fh->funcs->write(fh->opaque, buffer, objSize, objCount));\n 2005  } /* doBufferedWrite */\n ....\n 2011      FileHandle *fh = (FileHandle *) handle;\n 2012  \n 2013:     BAIL_IF_MACRO(fh->forReading, ERR_FILE_ALREADY_OPEN_R, -1);\n 2014:     BAIL_IF_MACRO(objSize == 0, NULL, 0);\n 2015:     BAIL_IF_MACRO(objCount == 0, NULL, 0);\n 2016      if (fh->buffer != NULL)\n 2017          return(doBufferedWrite(handle, buffer, objSize, objCount));\n ....\n 2047  {\n 2048      FileHandle *fh = (FileHandle *) handle;\n 2049:     BAIL_IF_MACRO(!PHYSFS_flush(handle), NULL, 0);\n 2050  \n 2051      if (fh->buffer && fh->forReading)\n ....\n 2081  \n 2082      /* !!! FIXME: Unlocalized string. */\n 2083:     BAIL_IF_MACRO(_bufsize > 0xFFFFFFFF, \"buffer must fit in 32-bits\", 0);\n 2084      bufsize = (PHYSFS_uint32) _bufsize;\n 2085  \n 2086:     BAIL_IF_MACRO(!PHYSFS_flush(handle), NULL, 0);\n 2087  \n 2088      /*\n ....\n 2095          PHYSFS_uint64 pos;\n 2096          PHYSFS_sint64 curpos = fh->funcs->tell(fh->opaque);\n 2097:         BAIL_IF_MACRO(curpos == -1, NULL, 0);\n 2098          pos = ((curpos - fh->buffill) + fh->bufpos);\n 2099:         BAIL_IF_MACRO(!fh->funcs->seek(fh->opaque, pos), NULL, 0);\n 2100      } /* if */\n 2101  \n ....\n 2113          PHYSFS_uint8 *newbuf;\n 2114          newbuf = (PHYSFS_uint8 *) allocator.Realloc(fh->buffer, bufsize);\n 2115:         BAIL_IF_MACRO(newbuf == NULL, ERR_OUT_OF_MEMORY, 0);\n 2116          fh->buffer = newbuf;\n 2117      } /* else */\n ....\n 2134      rc = fh->funcs->write(fh->opaque, fh->buffer + fh->bufpos,\n 2135                            fh->buffill - fh->bufpos, 1);\n 2136:     BAIL_IF_MACRO(rc <= 0, NULL, 0);\n 2137      fh->bufpos = fh->buffill = 0;\n 2138      return(1);\n ....\n 2142  int PHYSFS_setAllocator(const PHYSFS_Allocator *a)\n 2143  {\n 2144:     BAIL_IF_MACRO(initialized, ERR_IS_INITIALIZED, 0);\n 2145      externalAllocator = (a != NULL);\n 2146      if (externalAllocator)\n ....\n 2153  static void *mallocAllocatorMalloc(PHYSFS_uint64 s)\n 2154  {\n 2155:     BAIL_IF_MACRO(__PHYSFS_ui64FitsAddressSpace(s), ERR_OUT_OF_MEMORY, NULL);\n 2156      #undef malloc\n 2157      return(malloc((size_t) s));\n ....\n 2161  static void *mallocAllocatorRealloc(void *ptr, PHYSFS_uint64 s)\n 2162  {\n 2163:     BAIL_IF_MACRO(__PHYSFS_ui64FitsAddressSpace(s), ERR_OUT_OF_MEMORY, NULL);\n 2164      #undef realloc\n 2165      return(realloc(ptr, (size_t) s));\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs_byteorder.c:\n   12  #include <stdlib.h>\n   13  \n   14: #define __PHYSICSFS_INTERNAL__\n   15  #include \"physfs_internal.h\"\n   16  \n   ..\n   62  \n   63  /* Byteswap item from the specified endianness to the native endianness */\n   64: #if PHYSFS_BYTEORDER == PHYSFS_LIL_ENDIAN\n   65  PHYSFS_uint16 PHYSFS_swapULE16(PHYSFS_uint16 x) { return(x); }\n   66  PHYSFS_sint16 PHYSFS_swapSLE16(PHYSFS_sint16 x) { return(x); }\n   ..\n   96  {\n   97      PHYSFS_sint16 in;\n   98:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n   99:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  100      *val = PHYSFS_swapSLE16(in);\n  101      return(1);\n  ...\n  106  {\n  107      PHYSFS_uint16 in;\n  108:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  109:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  110      *val = PHYSFS_swapULE16(in);\n  111      return(1);\n  ...\n  116  {\n  117      PHYSFS_sint16 in;\n  118:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  119:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  120      *val = PHYSFS_swapSBE16(in);\n  121      return(1);\n  ...\n  126  {\n  127      PHYSFS_uint16 in;\n  128:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  129:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  130      *val = PHYSFS_swapUBE16(in);\n  131      return(1);\n  ...\n  136  {\n  137      PHYSFS_sint32 in;\n  138:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  139:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  140      *val = PHYSFS_swapSLE32(in);\n  141      return(1);\n  ...\n  146  {\n  147      PHYSFS_uint32 in;\n  148:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  149:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  150      *val = PHYSFS_swapULE32(in);\n  151      return(1);\n  ...\n  156  {\n  157      PHYSFS_sint32 in;\n  158:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  159:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  160      *val = PHYSFS_swapSBE32(in);\n  161      return(1);\n  ...\n  166  {\n  167      PHYSFS_uint32 in;\n  168:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  169:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  170      *val = PHYSFS_swapUBE32(in);\n  171      return(1);\n  ...\n  176  {\n  177      PHYSFS_sint64 in;\n  178:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  179:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  180      *val = PHYSFS_swapSLE64(in);\n  181      return(1);\n  ...\n  186  {\n  187      PHYSFS_uint64 in;\n  188:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  189:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  190      *val = PHYSFS_swapULE64(in);\n  191      return(1);\n  ...\n  196  {\n  197      PHYSFS_sint64 in;\n  198:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  199:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  200      *val = PHYSFS_swapSBE64(in);\n  201      return(1);\n  ...\n  206  {\n  207      PHYSFS_uint64 in;\n  208:     BAIL_IF_MACRO(val == NULL, ERR_INVALID_ARGUMENT, 0);\n  209:     BAIL_IF_MACRO(PHYSFS_read(file, &in, sizeof (in), 1) != 1, NULL, 0);\n  210      *val = PHYSFS_swapUBE64(in);\n  211      return(1);\n  ...\n  217  {\n  218      PHYSFS_sint16 out = PHYSFS_swapSLE16(val);\n  219:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  220      return(1);\n  221  } /* PHYSFS_writeSLE16 */\n  ...\n  225  {\n  226      PHYSFS_uint16 out = PHYSFS_swapULE16(val);\n  227:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  228      return(1);\n  229  } /* PHYSFS_writeULE16 */\n  ...\n  233  {\n  234      PHYSFS_sint16 out = PHYSFS_swapSBE16(val);\n  235:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  236      return(1);\n  237  } /* PHYSFS_writeSBE16 */\n  ...\n  241  {\n  242      PHYSFS_uint16 out = PHYSFS_swapUBE16(val);\n  243:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  244      return(1);\n  245  } /* PHYSFS_writeUBE16 */\n  ...\n  249  {\n  250      PHYSFS_sint32 out = PHYSFS_swapSLE32(val);\n  251:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  252      return(1);\n  253  } /* PHYSFS_writeSLE32 */\n  ...\n  257  {\n  258      PHYSFS_uint32 out = PHYSFS_swapULE32(val);\n  259:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  260      return(1);\n  261  } /* PHYSFS_writeULE32 */\n  ...\n  265  {\n  266      PHYSFS_sint32 out = PHYSFS_swapSBE32(val);\n  267:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  268      return(1);\n  269  } /* PHYSFS_writeSBE32 */\n  ...\n  273  {\n  274      PHYSFS_uint32 out = PHYSFS_swapUBE32(val);\n  275:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  276      return(1);\n  277  } /* PHYSFS_writeUBE32 */\n  ...\n  281  {\n  282      PHYSFS_sint64 out = PHYSFS_swapSLE64(val);\n  283:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  284      return(1);\n  285  } /* PHYSFS_writeSLE64 */\n  ...\n  289  {\n  290      PHYSFS_uint64 out = PHYSFS_swapULE64(val);\n  291:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  292      return(1);\n  293  } /* PHYSFS_writeULE64 */\n  ...\n  297  {\n  298      PHYSFS_sint64 out = PHYSFS_swapSBE64(val);\n  299:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  300      return(1);\n  301  } /* PHYSFS_writeSBE64 */\n  ...\n  305  {\n  306      PHYSFS_uint64 out = PHYSFS_swapUBE64(val);\n  307:     BAIL_IF_MACRO(PHYSFS_write(file, &out, sizeof (out), 1) != 1, NULL, 0);\n  308      return(1);\n  309  } /* PHYSFS_writeUBE64 */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs_casefolding.h:\n    8   */\n    9  \n   10: #ifndef __PHYSICSFS_INTERNAL__\n   11  #error Do not include this header from your applications.\n   12  #endif\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs_internal.h:\n    8   */\n    9  \n   10: #ifndef _INCLUDE_PHYSFS_INTERNAL_H_\n   11: #define _INCLUDE_PHYSFS_INTERNAL_H_\n   12  \n   13: #ifndef __PHYSICSFS_INTERNAL__\n   14  #error Do not include this header from your applications.\n   15  #endif\n   ..\n  102   #define GRP_ARCHIVE_DESCRIPTION  \"Build engine Groupfile format\"\n  103   #define HOG_ARCHIVE_DESCRIPTION  \"Descent I/II HOG file format\"\n  104:  #define MVL_ARCHIVE_DESCRIPTION  \"Descent II Movielib format\"\n  105   #define QPAK_ARCHIVE_DESCRIPTION \"Quake I/II format\"\n  106   #define ZIP_ARCHIVE_DESCRIPTION  \"PkZip/WinZip/Info-Zip compatible\"\n  ...\n  111   #define ERR_NOT_INITIALIZED      \"Not initialized\"\n  112   #define ERR_INVALID_ARGUMENT     \"Invalid argument\"\n  113:  #define ERR_FILES_STILL_OPEN     \"Files still open\"\n  114   #define ERR_NO_DIR_CREATE        \"Failed to create directories\"\n  115   #define ERR_OUT_OF_MEMORY        \"Out of memory\"\n  ...\n  154   #define ERR_MACOS_GENERIC        \"MacOS reported error (%d)\"\n  155   #define ERR_OS2_GENERIC          \"OS/2 reported error (%d)\"\n  156:  #define ERR_VOL_LOCKED_HW        \"Volume is locked through hardware\"\n  157:  #define ERR_VOL_LOCKED_SW        \"Volume is locked through software\"\n  158   #define ERR_FILE_LOCKED          \"File is locked\"\n  159   #define ERR_FILE_OR_DIR_BUSY     \"File/directory is busy\"\n  ...\n  164   #define ERR_VOLUME_OFFLINE       \"Volume is offline\"\n  165   #define ERR_PERMISSION_DENIED    \"Permission denied\"\n  166:  #define ERR_VOL_ALREADY_ONLINE   \"Volume already online\"\n  167   #define ERR_NO_SUCH_DRIVE        \"No such drive\"\n  168   #define ERR_NOT_MAC_DISK         \"Not a Macintosh disk\"\n  169:  #define ERR_VOL_EXTERNAL_FS      \"Volume belongs to an external filesystem\"\n  170   #define ERR_PROBLEM_RENAME       \"Problem during rename\"\n  171   #define ERR_BAD_MASTER_BLOCK     \"Bad master directory block\"\n  172   #define ERR_CANT_MOVE_FORBIDDEN  \"Attempt to move forbidden\"\n  173:  #define ERR_WRONG_VOL_TYPE       \"Wrong volume type\"\n  174:  #define ERR_SERVER_VOL_LOST      \"Server volume has been disconnected\"\n  175   #define ERR_FILE_ID_NOT_FOUND    \"File ID not found\"\n  176   #define ERR_FILE_ID_EXISTS       \"File ID already exists\"\n  ...\n  188   #define ERR_TOO_MANY_HANDLES     \"Too many open handles\"\n  189   #define ERR_SEEK_ERROR           \"Seek error\"\n  190:  #define ERR_DEL_CWD              \"Trying to delete current working directory\"\n  191   #define ERR_WRITE_PROTECT_ERROR  \"Write protect error\"\n  192   #define ERR_WRITE_FAULT          \"Write fault\"\n  ...\n  201   #define GRP_ARCHIVE_DESCRIPTION  \"Build engine Groupfile format\"\n  202   #define HOG_ARCHIVE_DESCRIPTION  \"Descent I/II HOG file format\"\n  203:  #define MVL_ARCHIVE_DESCRIPTION  \"Descent II Movielib format\"\n  204   #define QPAK_ARCHIVE_DESCRIPTION \"Quake I/II format\"\n  205   #define ZIP_ARCHIVE_DESCRIPTION  \"PkZip/WinZip/Info-Zip kompatibel\"\n  ...\n  210   #define ERR_NOT_INITIALIZED      \"Nicht initialisiert\"\n  211   #define ERR_INVALID_ARGUMENT     \"Ungültiges Argument\"\n  212:  #define ERR_FILES_STILL_OPEN     \"Dateien noch immer geöffnet\"\n  213   #define ERR_NO_DIR_CREATE        \"Fehler beim Erzeugen der Verzeichnisse\"\n  214   #define ERR_OUT_OF_MEMORY        \"Kein Speicher mehr frei\"\n  ...\n  253   #define ERR_MACOS_GENERIC        \"MacOS meldete Fehler (%d)\"\n  254   #define ERR_OS2_GENERIC          \"OS/2 meldete Fehler (%d)\"\n  255:  #define ERR_VOL_LOCKED_HW        \"Datencontainer ist durch Hardware gesperrt\"\n  256:  #define ERR_VOL_LOCKED_SW        \"Datencontainer ist durch Software gesperrt\"\n  257   #define ERR_FILE_LOCKED          \"Datei ist gesperrt\"\n  258   #define ERR_FILE_OR_DIR_BUSY     \"Datei/Verzeichnis ist beschäftigt\"\n  ...\n  263   #define ERR_VOLUME_OFFLINE       \"Datencontainer ist offline\"\n  264   #define ERR_PERMISSION_DENIED    \"Zugriff verweigert\"\n  265:  #define ERR_VOL_ALREADY_ONLINE   \"Datencontainer ist bereits online\"\n  266   #define ERR_NO_SUCH_DRIVE        \"Laufwerk nicht vorhanden\"\n  267   #define ERR_NOT_MAC_DISK         \"Ist kein Macintosh Laufwerk\"\n  268:  #define ERR_VOL_EXTERNAL_FS      \"Datencontainer liegt auf einem externen Dateisystem\"\n  269   #define ERR_PROBLEM_RENAME       \"Fehler beim Umbenennen\"\n  270   #define ERR_BAD_MASTER_BLOCK     \"Beschädigter Hauptverzeichnisblock\"\n  271   #define ERR_CANT_MOVE_FORBIDDEN  \"Verschieben nicht erlaubt\"\n  272:  #define ERR_WRONG_VOL_TYPE       \"Falscher Datencontainer-Typ\"\n  273:  #define ERR_SERVER_VOL_LOST      \"Datencontainer am Server wurde getrennt\"\n  274   #define ERR_FILE_ID_NOT_FOUND    \"Dateikennung nicht gefunden\"\n  275   #define ERR_FILE_ID_EXISTS       \"Dateikennung existiert bereits\"\n  ...\n  287   #define ERR_TOO_MANY_HANDLES     \"Zu viele offene Dateien\"\n  288   #define ERR_SEEK_ERROR           \"Fehler beim Suchen\"\n  289:  #define ERR_DEL_CWD              \"Aktuelles Arbeitsverzeichnis darf nicht gelöscht werden\"\n  290   #define ERR_WRITE_PROTECT_ERROR  \"Schreibschutzfehler\"\n  291   #define ERR_WRITE_FAULT          \"Schreibfehler\"\n  ...\n  300   #define GRP_ARCHIVE_DESCRIPTION  \"Формат группового файла Build engine\"\n  301   #define HOG_ARCHIVE_DESCRIPTION  \"Descent I/II HOG file format\"\n  302:  #define MVL_ARCHIVE_DESCRIPTION  \"Descent II Movielib format\"\n  303   #define ZIP_ARCHIVE_DESCRIPTION  \"PkZip/WinZip/Info-Zip совместимый\"\n  304   #define WAD_ARCHIVE_DESCRIPTION  \"DOOM engine format\" /* !!! FIXME: translate this line if needed */\n  ...\n  308   #define ERR_NOT_INITIALIZED      \"Не инициализирован\"\n  309   #define ERR_INVALID_ARGUMENT     \"Неверный аргумент\"\n  310:  #define ERR_FILES_STILL_OPEN     \"Файлы еще открыты\"\n  311   #define ERR_NO_DIR_CREATE        \"Не могу создать каталоги\"\n  312   #define ERR_OUT_OF_MEMORY        \"Кончилась память\"\n  ...\n  351   #define ERR_MACOS_GENERIC        \"MacOS сообщила ошибку (%d)\"\n  352   #define ERR_OS2_GENERIC          \"OS/2 сообщила ошибку (%d)\"\n  353:  #define ERR_VOL_LOCKED_HW        \"Том блокирован аппаратно\"\n  354:  #define ERR_VOL_LOCKED_SW        \"Том блокирован программно\"\n  355   #define ERR_FILE_LOCKED          \"Файл заблокирован\"\n  356   #define ERR_FILE_OR_DIR_BUSY     \"Файл/каталог занят\"\n  ...\n  361   #define ERR_VOLUME_OFFLINE       \"Том отсоединен\"\n  362   #define ERR_PERMISSION_DENIED    \"Отказано в разрешении\"\n  363:  #define ERR_VOL_ALREADY_ONLINE   \"Том уже подсоединен\"\n  364   #define ERR_NO_SUCH_DRIVE        \"Нет такого диска\"\n  365   #define ERR_NOT_MAC_DISK         \"Не диск Macintosh\"\n  366:  #define ERR_VOL_EXTERNAL_FS      \"Том принадлежит внешней файловой системе\"\n  367   #define ERR_PROBLEM_RENAME       \"Проблема при переименовании\"\n  368   #define ERR_BAD_MASTER_BLOCK     \"Плохой главный блок каталога\"\n  369   #define ERR_CANT_MOVE_FORBIDDEN  \"Попытка переместить запрещена\"\n  370:  #define ERR_WRONG_VOL_TYPE       \"Неверный тип тома\"\n  371:  #define ERR_SERVER_VOL_LOST      \"Серверный том был отсоединен\"\n  372   #define ERR_FILE_ID_NOT_FOUND    \"Идентификатор файла не найден\"\n  373   #define ERR_FILE_ID_EXISTS       \"Идентификатор файла уже существует\"\n  ...\n  385   #define ERR_TOO_MANY_HANDLES     \"Слишком много открытых дескрипторов\"\n  386   #define ERR_SEEK_ERROR           \"Ошибка позиционирования\"\n  387:  #define ERR_DEL_CWD              \"Попытка удалить текущий рабочий каталог\"\n  388   #define ERR_WRITE_PROTECT_ERROR  \"Ошибка защиты записи\"\n  389   #define ERR_WRITE_FAULT          \"Ошибка записи\"\n  ...\n  399   #define GRP_ARCHIVE_DESCRIPTION  \"Format Groupfile du moteur Build\"\n  400   #define HOG_ARCHIVE_DESCRIPTION  \"Descent I/II HOG file format\"\n  401:  #define MVL_ARCHIVE_DESCRIPTION  \"Descent II Movielib format\"\n  402   #define QPAK_ARCHIVE_DESCRIPTION \"Quake I/II format\"\n  403   #define ZIP_ARCHIVE_DESCRIPTION  \"Compatible PkZip/WinZip/Info-Zip\"\n  ...\n  408   #define ERR_NOT_INITIALIZED      \"Non initialisé\"\n  409   #define ERR_INVALID_ARGUMENT     \"Argument invalide\"\n  410:  #define ERR_FILES_STILL_OPEN     \"Fichiers encore ouverts\"\n  411   #define ERR_NO_DIR_CREATE        \"Echec de la création de répertoires\"\n  412   #define ERR_OUT_OF_MEMORY        \"A court de mémoire\"\n  ...\n  451   #define ERR_MACOS_GENERIC        \"Erreur rapportée par MacOS (%d)\"\n  452   #define ERR_OS2_GENERIC          \"Erreur rapportée par OS/2 (%d)\"\n  453:  #define ERR_VOL_LOCKED_HW        \"Le volume est verrouillé matériellement\"\n  454:  #define ERR_VOL_LOCKED_SW        \"Le volume est verrouillé par logiciel\"\n  455   #define ERR_FILE_LOCKED          \"Fichier verrouillé\"\n  456   #define ERR_FILE_OR_DIR_BUSY     \"Fichier/répertoire occupé\"\n  ...\n  461   #define ERR_VOLUME_OFFLINE       \"Le volume n'est pas en ligne\"\n  462   #define ERR_PERMISSION_DENIED    \"Permission refusée\"\n  463:  #define ERR_VOL_ALREADY_ONLINE   \"Volumé déjà en ligne\"\n  464   #define ERR_NO_SUCH_DRIVE        \"Lecteur inexistant\"\n  465   #define ERR_NOT_MAC_DISK         \"Pas un disque Macintosh\"\n  466:  #define ERR_VOL_EXTERNAL_FS      \"Le volume appartient à un système de fichiers externe\"\n  467   #define ERR_PROBLEM_RENAME       \"Problème lors du renommage\"\n  468   #define ERR_BAD_MASTER_BLOCK     \"Mauvais block maitre de répertoire\"\n  469   #define ERR_CANT_MOVE_FORBIDDEN  \"Essai de déplacement interdit\"\n  470:  #define ERR_WRONG_VOL_TYPE       \"Mauvais type de volume\"\n  471:  #define ERR_SERVER_VOL_LOST      \"Le volume serveur a été déconnecté\"\n  472   #define ERR_FILE_ID_NOT_FOUND    \"Identificateur de fichier non trouvé\"\n  473   #define ERR_FILE_ID_EXISTS       \"Identificateur de fichier existe déjà\"\n  ...\n  485   #define ERR_TOO_MANY_HANDLES     \"Trop de descripteurs ouverts\"\n  486   #define ERR_SEEK_ERROR           \"Erreur de positionement\"\n  487:  #define ERR_DEL_CWD              \"Essai de supprimer le répertoire courant\"\n  488   #define ERR_WRITE_PROTECT_ERROR  \"Erreur de protection en écriture\"\n  489   #define ERR_WRITE_FAULT          \"Erreur d'écriture\"\n  ...\n  498   #define GRP_ARCHIVE_DESCRIPTION  \"Formato Groupfile do engine Build\"\n  499   #define HOG_ARCHIVE_DESCRIPTION  \"Formato Descent I/II HOG file\"\n  500:  #define MVL_ARCHIVE_DESCRIPTION  \"Formato Descent II Movielib\"\n  501   #define QPAK_ARCHIVE_DESCRIPTION \"Formato Quake I/II\"\n  502   #define ZIP_ARCHIVE_DESCRIPTION  \"Formato compatível PkZip/WinZip/Info-Zip\"\n  ...\n  508   #define ERR_NOT_INITIALIZED      \"Não inicializado\"\n  509   #define ERR_INVALID_ARGUMENT     \"Argumento inválido\"\n  510:  #define ERR_FILES_STILL_OPEN     \"Arquivos ainda abertos\"\n  511   #define ERR_NO_DIR_CREATE        \"Falha na criação de diretórios\"\n  512   #define ERR_OUT_OF_MEMORY        \"Memória insuficiente\"\n  ...\n  551   #define ERR_MACOS_GENERIC        \"MacOS reportou um erro (%d)\"\n  552   #define ERR_OS2_GENERIC          \"OS/2 reportou um erro (%d)\"\n  553:  #define ERR_VOL_LOCKED_HW        \"Volume travado por hardware\"\n  554:  #define ERR_VOL_LOCKED_SW        \"Volume travado por software\"\n  555   #define ERR_FILE_LOCKED          \"Arquivo travado\"\n  556   #define ERR_FILE_OR_DIR_BUSY     \"Arquivo/Diretório está em uso\"\n  ...\n  561   #define ERR_VOLUME_OFFLINE       \"Volume está indisponível\"\n  562   #define ERR_PERMISSION_DENIED    \"Permissão negada\"\n  563:  #define ERR_VOL_ALREADY_ONLINE   \"Volume disponível\"\n  564   #define ERR_NO_SUCH_DRIVE        \"Drive inexistente\"\n  565   #define ERR_NOT_MAC_DISK         \"Não é um disco Macintosh\"\n  566:  #define ERR_VOL_EXTERNAL_FS      \"Volume pertence a um sistema de arquivos externo\"\n  567   #define ERR_PROBLEM_RENAME       \"Problema durante renomeação\"\n  568   #define ERR_BAD_MASTER_BLOCK     \"Bloco master do diretório inválido\"\n  569   #define ERR_CANT_MOVE_FORBIDDEN  \"Tentativa de mover proibida\"\n  570:  #define ERR_WRONG_VOL_TYPE       \"Tipo inválido de volume\"\n  571:  #define ERR_SERVER_VOL_LOST      \"Volume servidor desconectado\"\n  572   #define ERR_FILE_ID_NOT_FOUND    \"ID de Arquivo não encontrado\"\n  573   #define ERR_FILE_ID_EXISTS       \"ID de Arquivo já existente\"\n  ...\n  585   #define ERR_TOO_MANY_HANDLES     \"Muitos handles abertos\"\n  586   #define ERR_SEEK_ERROR           \"Erro de posicionamento\"\n  587:  #define ERR_DEL_CWD              \"Tentando remover diretório de trabalho atual\"\n  588   #define ERR_WRITE_PROTECT_ERROR  \"Erro de proteção de escrita\"\n  589   #define ERR_WRITE_FAULT          \"Erro de escrita\"\n  ...\n  598   #define GRP_ARCHIVE_DESCRIPTION  \"Formato Build engine Groupfile\"\n  599   #define HOG_ARCHIVE_DESCRIPTION  \"Formato Descent I/II HOG file\"\n  600:  #define MVL_ARCHIVE_DESCRIPTION  \"Formato Descent II Movielib\"\n  601   #define QPAK_ARCHIVE_DESCRIPTION \"Formato Quake I/II\"\n  602   #define ZIP_ARCHIVE_DESCRIPTION  \"Compatible con PkZip/WinZip/Info-Zip\"\n  ...\n  607   #define ERR_NOT_INITIALIZED      \"No está inicializado\"\n  608   #define ERR_INVALID_ARGUMENT     \"Argumento inválido\"\n  609:  #define ERR_FILES_STILL_OPEN     \"Archivos aún abiertos\"\n  610   #define ERR_NO_DIR_CREATE        \"Fallo al crear los directorios\"\n  611   #define ERR_OUT_OF_MEMORY        \"Memoria agotada\"\n  ...\n  650   #define ERR_MACOS_GENERIC        \"MacOS ha devuelto un error (%d)\"\n  651   #define ERR_OS2_GENERIC          \"OS/2 ha devuelto un error (%d)\"\n  652:  #define ERR_VOL_LOCKED_HW        \"El volumen está bloqueado por el hardware\"\n  653:  #define ERR_VOL_LOCKED_SW        \"El volumen está bloqueado por el software\"\n  654   #define ERR_FILE_LOCKED          \"El archivo está bloqueado\"\n  655   #define ERR_FILE_OR_DIR_BUSY     \"Fichero o directorio ocupados\"\n  ...\n  660   #define ERR_VOLUME_OFFLINE       \"El volumen está desconectado\"\n  661   #define ERR_PERMISSION_DENIED    \"Permiso denegado\"\n  662:  #define ERR_VOL_ALREADY_ONLINE   \"El volumen ya estaba conectado\"\n  663   #define ERR_NO_SUCH_DRIVE        \"No existe tal unidad\"\n  664   #define ERR_NOT_MAC_DISK         \"No es un disco Macintosh\"\n  665:  #define ERR_VOL_EXTERNAL_FS      \"El volumen pertence a un sistema de ficheros externo\"\n  666   #define ERR_PROBLEM_RENAME       \"Problemas al renombrar\"\n  667   #define ERR_BAD_MASTER_BLOCK     \"Bloque maestro de directorios incorrecto\"\n  668   #define ERR_CANT_MOVE_FORBIDDEN  \"Intento de mover forbidden\"\n  669:  #define ERR_WRONG_VOL_TYPE       \"Tipo de volumen incorrecto\"\n  670:  #define ERR_SERVER_VOL_LOST      \"El servidor de volúmenes ha sido desconectado\"\n  671   #define ERR_FILE_ID_NOT_FOUND    \"Identificador de archivo no encontrado\"\n  672   #define ERR_FILE_ID_EXISTS       \"El identificador de archivo ya existe\"\n  ...\n  684   #define ERR_TOO_MANY_HANDLES     \"Demasiados manejadores (handles)\"\n  685   #define ERR_SEEK_ERROR           \"Error de búsqueda\"\n  686:  #define ERR_DEL_CWD              \"Intentando borrar el directorio de trabajo actual\"\n  687   #define ERR_WRITE_PROTECT_ERROR  \"Error de protección contra escritura\"\n  688   #define ERR_WRITE_FAULT          \"Fallo al escribir\"\n  ...\n  968  \n  969  /* This byteorder stuff was lifted from SDL. http://www.libsdl.org/ */\n  970: #define PHYSFS_LIL_ENDIAN  1234\n  971  #define PHYSFS_BIG_ENDIAN  4321\n  972  \n  ...\n  974      (defined(__alpha__) || defined(__alpha)) || \\\n  975       defined(__arm__) || defined(ARM) || \\\n  976:     (defined(__mips__) && defined(__MIPSEL__)) || \\\n  977       defined(__SYMBIAN32__) || \\\n  978       defined(__x86_64__) || \\\n  979       defined(__LITTLE_ENDIAN__)\n  980: #define PHYSFS_BYTEORDER    PHYSFS_LIL_ENDIAN\n  981  #else\n  982  #define PHYSFS_BYTEORDER    PHYSFS_BIG_ENDIAN\n  ...\n 1010  \n 1011  /* These get used all over for lessening code clutter. */\n 1012: #define BAIL_MACRO(e, r) { __PHYSFS_setError(e); return r; }\n 1013: #define BAIL_IF_MACRO(c, e, r) if (c) { __PHYSFS_setError(e); return r; }\n 1014: #define BAIL_MACRO_MUTEX(e, m, r) { __PHYSFS_setError(e); __PHYSFS_platformReleaseMutex(m); return r; }\n 1015: #define BAIL_IF_MACRO_MUTEX(c, e, m, r) if (c) { __PHYSFS_setError(e); __PHYSFS_platformReleaseMutex(m); return r; }\n 1016  #define GOTO_MACRO(e, g) { __PHYSFS_setError(e); goto g; }\n 1017  #define GOTO_IF_MACRO(c, e, g) if (c) { __PHYSFS_setError(e); goto g; }\n ....\n 1457   * _DO NOT_ call __PHYSFS_setError() in here! Since setError calls this\n 1458   *  function, you'll cause an infinite recursion. This means you can't\n 1459:  *  use the BAIL_*MACRO* macros, either.\n 1460   */\n 1461  int __PHYSFS_platformGrabMutex(void *mutex);\n ....\n 1469   * _DO NOT_ call __PHYSFS_setError() in here! Since setError calls this\n 1470   *  function, you'll cause an infinite recursion. This means you can't\n 1471:  *  use the BAIL_*MACRO* macros, either.\n 1472   */\n 1473  void __PHYSFS_platformReleaseMutex(void *mutex);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs_platforms.h:\n    1: #ifndef _INCL_PHYSFS_PLATFORMS\n    2: #define _INCL_PHYSFS_PLATFORMS\n    3  \n    4: #ifndef __PHYSICSFS_INTERNAL__\n    5  #error Do not include this header from your applications.\n    6  #endif\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs_unicode.c:\n    1  #include \"physfs.h\"\n    2  \n    3: #define __PHYSICSFS_INTERNAL__\n    4  #include \"physfs_internal.h\"\n    5  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/dir.c:\n   12  #include \"physfs.h\"\n   13  \n   14: #define __PHYSICSFS_INTERNAL__\n   15  #include \"physfs_internal.h\"\n   16  \n   ..\n   64       *  state if it fails. Flush failures we can recover from.\n   65       */\n   66:     BAIL_IF_MACRO(!__PHYSFS_platformFlush(opaque), NULL, 0);\n   67:     BAIL_IF_MACRO(!__PHYSFS_platformClose(opaque), NULL, 0);\n   68      return(1);\n   69  } /* DIR_fileClose */\n   ..\n   85  \n   86      /* !!! FIXME: when is this not called right before openArchive? */\n   87:     BAIL_IF_MACRO(!DIR_isArchive(name, forWriting),\n   88                      ERR_UNSUPPORTED_ARCHIVE, 0);\n   89  \n   90      retval = allocator.Malloc(namelen + seplen + 1);\n   91:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n   92  \n   93          /* make sure there's a dir separator at the end of the string */\n   ..\n  119      int retval;\n  120  \n  121:     BAIL_IF_MACRO(f == NULL, NULL, 0);\n  122      retval = __PHYSFS_platformExists(f);\n  123      allocator.Free(f);\n  ...\n  131      int retval = 0;\n  132  \n  133:     BAIL_IF_MACRO(d == NULL, NULL, 0);\n  134      *fileExists = __PHYSFS_platformExists(d);\n  135      if (*fileExists)\n  ...\n  145      int retval = 0;\n  146  \n  147:     BAIL_IF_MACRO(f == NULL, NULL, 0);\n  148      *fileExists = __PHYSFS_platformExists(f);\n  149      if (*fileExists)\n  ...\n  161      PHYSFS_sint64 retval = -1;\n  162  \n  163:     BAIL_IF_MACRO(d == NULL, NULL, 0);\n  164      *fileExists = __PHYSFS_platformExists(d);\n  165      if (*fileExists)\n  ...\n  177      void *rc = NULL;\n  178  \n  179:     BAIL_IF_MACRO(f == NULL, NULL, NULL);\n  180  \n  181      if (fileExists != NULL)\n  ...\n  219      int retval;\n  220  \n  221:     BAIL_IF_MACRO(f == NULL, NULL, 0);\n  222      retval = __PHYSFS_platformDelete(f);\n  223      allocator.Free(f);\n  ...\n  231      int retval;\n  232  \n  233:     BAIL_IF_MACRO(f == NULL, NULL, 0);\n  234      retval = __PHYSFS_platformMkDir(f);\n  235      allocator.Free(f);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/grp.c:\n   32  #include \"physfs.h\"\n   33  \n   34: #define __PHYSICSFS_INTERNAL__\n   35  #include \"physfs_internal.h\"\n   36  \n   ..\n   90                                 PHYSFS_uint32 objSize, PHYSFS_uint32 objCount)\n   91  {\n   92:     BAIL_MACRO(ERR_NOT_SUPPORTED, -1);\n   93  } /* GRP_write */\n   94  \n   ..\n  114      int rc;\n  115  \n  116:     BAIL_IF_MACRO(offset < 0, ERR_INVALID_ARGUMENT, 0);\n  117:     BAIL_IF_MACRO(offset >= entry->size, ERR_PAST_EOF, 0);\n  118      rc = __PHYSFS_platformSeek(finfo->handle, entry->startPos + offset);\n  119      if (rc)\n  ...\n  134  {\n  135      GRPfileinfo *finfo = (GRPfileinfo *) opaque;\n  136:     BAIL_IF_MACRO(!__PHYSFS_platformClose(finfo->handle), NULL, 0);\n  137      allocator.Free(finfo);\n  138      return(1);\n  ...\n  146  \n  147      *fh = NULL;\n  148:     BAIL_IF_MACRO(forWriting, ERR_ARC_IS_READ_ONLY, 0);\n  149  \n  150      *fh = __PHYSFS_platformOpenRead(filename);\n  151:     BAIL_IF_MACRO(*fh == NULL, NULL, 0);\n  152      \n  153      if (__PHYSFS_platformRead(*fh, buf, 12, 1) != 1)\n  ...\n  224      char *ptr;\n  225  \n  226:     BAIL_IF_MACRO(!grp_open(name, forWriting, &fh, &fileCount), NULL, 0);\n  227      info->entryCount = fileCount;\n  228      info->entries = (GRPentry *) allocator.Malloc(sizeof(GRPentry)*fileCount);\n  ...\n  230      {\n  231          __PHYSFS_platformClose(fh);\n  232:         BAIL_MACRO(ERR_OUT_OF_MEMORY, 0);\n  233      } /* if */\n  234  \n  ...\n  271      GRPinfo *info = (GRPinfo *) allocator.Malloc(sizeof (GRPinfo));\n  272  \n  273:     BAIL_IF_MACRO(info == NULL, ERR_OUT_OF_MEMORY, 0);\n  274  \n  275      memset(info, '\\0', sizeof (GRPinfo));\n  ...\n  330       *   big filenames, or extensions > 3 chars.\n  331       */\n  332:     BAIL_IF_MACRO((ptr) && (strlen(ptr) > 4), ERR_NO_SUCH_FILE, NULL);\n  333:     BAIL_IF_MACRO(strlen(name) > 12, ERR_NO_SUCH_FILE, NULL);\n  334:     BAIL_IF_MACRO(strchr(name, '/') != NULL, ERR_NO_SUCH_FILE, NULL);\n  335  \n  336      while (lo <= hi)\n  ...\n  346      } /* while */\n  347  \n  348:     BAIL_MACRO(ERR_NO_SUCH_FILE, NULL);\n  349  } /* grp_find_entry */\n  350  \n  ...\n  393      entry = grp_find_entry(info, fnm);\n  394      *fileExists = (entry != NULL);\n  395:     BAIL_IF_MACRO(entry == NULL, NULL, NULL);\n  396  \n  397      finfo = (GRPfileinfo *) allocator.Malloc(sizeof (GRPfileinfo));\n  398:     BAIL_IF_MACRO(finfo == NULL, ERR_OUT_OF_MEMORY, NULL);\n  399  \n  400      finfo->handle = __PHYSFS_platformOpenRead(info->filename);\n  ...\n  414  static fvoid *GRP_openWrite(dvoid *opaque, const char *name)\n  415  {\n  416:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  417  } /* GRP_openWrite */\n  418  \n  ...\n  420  static fvoid *GRP_openAppend(dvoid *opaque, const char *name)\n  421  {\n  422:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  423  } /* GRP_openAppend */\n  424  \n  ...\n  426  static int GRP_remove(dvoid *opaque, const char *name)\n  427  {\n  428:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  429  } /* GRP_remove */\n  430  \n  ...\n  432  static int GRP_mkdir(dvoid *opaque, const char *name)\n  433  {\n  434:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  435  } /* GRP_mkdir */\n  436  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/hog.c:\n   37  #include \"physfs.h\"\n   38  \n   39: #define __PHYSICSFS_INTERNAL__\n   40  #include \"physfs_internal.h\"\n   41  \n   ..\n  104                                 PHYSFS_uint32 objSize, PHYSFS_uint32 objCount)\n  105  {\n  106:     BAIL_MACRO(ERR_NOT_SUPPORTED, -1);\n  107  } /* HOG_write */\n  108  \n  ...\n  128      int rc;\n  129  \n  130:     BAIL_IF_MACRO(offset < 0, ERR_INVALID_ARGUMENT, 0);\n  131:     BAIL_IF_MACRO(offset >= entry->size, ERR_PAST_EOF, 0);\n  132      rc = __PHYSFS_platformSeek(finfo->handle, entry->startPos + offset);\n  133      if (rc)\n  ...\n  148  {\n  149      HOGfileinfo *finfo = (HOGfileinfo *) opaque;\n  150:     BAIL_IF_MACRO(!__PHYSFS_platformClose(finfo->handle), NULL, 0);\n  151      allocator.Free(finfo);\n  152      return(1);\n  ...\n  164  \n  165      *fh = NULL;\n  166:     BAIL_IF_MACRO(forWriting, ERR_ARC_IS_READ_ONLY, 0);\n  167  \n  168      *fh = __PHYSFS_platformOpenRead(filename);\n  169:     BAIL_IF_MACRO(*fh == NULL, NULL, 0);\n  170  \n  171      if (__PHYSFS_platformRead(*fh, buf, 3, 1) != 1)\n  ...\n  259      HOGentry *entry;\n  260  \n  261:     BAIL_IF_MACRO(!hog_open(name, forWriting, &fh, &fileCount), NULL, 0);\n  262      info->entryCount = fileCount;\n  263      info->entries = (HOGentry *) allocator.Malloc(sizeof(HOGentry)*fileCount);\n  ...\n  265      {\n  266          __PHYSFS_platformClose(fh);\n  267:         BAIL_MACRO(ERR_OUT_OF_MEMORY, 0);\n  268      } /* if */\n  269  \n  ...\n  311      HOGinfo *info = (HOGinfo *) allocator.Malloc(sizeof (HOGinfo));\n  312  \n  313:     BAIL_IF_MACRO(info == NULL, ERR_OUT_OF_MEMORY, 0);\n  314      memset(info, '\\0', sizeof (HOGinfo));\n  315      info->filename = (char *) allocator.Malloc(strlen(name) + 1);\n  ...\n  369       *   big filenames, or extensions > 3 chars.\n  370       */\n  371:     BAIL_IF_MACRO((ptr) && (strlen(ptr) > 4), ERR_NO_SUCH_FILE, NULL);\n  372:     BAIL_IF_MACRO(strlen(name) > 12, ERR_NO_SUCH_FILE, NULL);\n  373:     BAIL_IF_MACRO(strchr(name, '/') != NULL, ERR_NO_SUCH_FILE, NULL);\n  374  \n  375      while (lo <= hi)\n  ...\n  385      } /* while */\n  386  \n  387:     BAIL_MACRO(ERR_NO_SUCH_FILE, NULL);\n  388  } /* hog_find_entry */\n  389  \n  ...\n  432      entry = hog_find_entry(info, fnm);\n  433      *fileExists = (entry != NULL);\n  434:     BAIL_IF_MACRO(entry == NULL, NULL, NULL);\n  435  \n  436      finfo = (HOGfileinfo *) allocator.Malloc(sizeof (HOGfileinfo));\n  437:     BAIL_IF_MACRO(finfo == NULL, ERR_OUT_OF_MEMORY, NULL);\n  438  \n  439      finfo->handle = __PHYSFS_platformOpenRead(info->filename);\n  ...\n  453  static fvoid *HOG_openWrite(dvoid *opaque, const char *name)\n  454  {\n  455:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  456  } /* HOG_openWrite */\n  457  \n  ...\n  459  static fvoid *HOG_openAppend(dvoid *opaque, const char *name)\n  460  {\n  461:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  462  } /* HOG_openAppend */\n  463  \n  ...\n  465  static int HOG_remove(dvoid *opaque, const char *name)\n  466  {\n  467:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  468  } /* HOG_remove */\n  469  \n  ...\n  471  static int HOG_mkdir(dvoid *opaque, const char *name)\n  472  {\n  473:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  474  } /* HOG_mkdir */\n  475  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/lzma.c:\n   16  #include \"physfs.h\"\n   17  \n   18: #define __PHYSICSFS_INTERNAL__\n   19  #include \"physfs_internal.h\"\n   20  \n   ..\n  212      LZMAfile *file = bsearch(name, archive->files, archive->db.Database.NumFiles, sizeof(*archive->files), lzma_file_cmp_stdlib); /* FIXME: Should become __PHYSFS_search!!! */\n  213  \n  214:     BAIL_IF_MACRO(file == NULL, ERR_NO_SUCH_FILE, NULL);\n  215  \n  216      return(file);\n  ...\n  332      size_t fileSize = 0;\n  333  \n  334:     BAIL_IF_MACRO(wantedSize == 0, NULL, 0); /* quick rejection. */\n  335:     BAIL_IF_MACRO(remainingSize == 0, ERR_PAST_EOF, 0);\n  336  \n  337      if (remainingSize < wantedSize)\n  ...\n  339          wantedSize = remainingSize - (remainingSize % objSize);\n  340          objCount = (PHYSFS_uint32) (remainingSize / objSize);\n  341:         BAIL_IF_MACRO(objCount == 0, ERR_PAST_EOF, 0); /* quick rejection. */\n  342          __PHYSFS_setError(ERR_PAST_EOF); /* this is always true here. */\n  343      } /* if */\n  ...\n  380                                 PHYSFS_uint32 objSize, PHYSFS_uint32 objCount)\n  381  {\n  382:     BAIL_MACRO(ERR_NOT_SUPPORTED, -1);\n  383  } /* LZMA_write */\n  384  \n  ...\n  402      LZMAfile *file = (LZMAfile *) opaque;\n  403  \n  404:     BAIL_IF_MACRO(offset < 0, ERR_SEEK_OUT_OF_RANGE, 0);\n  405:     BAIL_IF_MACRO(offset > file->item->Size, ERR_PAST_EOF, 0);\n  406  \n  407      file->position = offset; /* We only use a virtual position... */\n  ...\n  422      LZMAfile *file = (LZMAfile *) opaque;\n  423  \n  424:     BAIL_IF_MACRO(file->folder == NULL, ERR_NOT_A_FILE, 0);\n  425  \n  426  	/* Only decrease refcount if someone actually requested this file... Prevents from overflows and close-on-open... */\n  ...\n  443      void *in;\n  444  \n  445:     BAIL_IF_MACRO(forWriting, ERR_ARC_IS_READ_ONLY, 0);\n  446  \n  447      in = __PHYSFS_platformOpenRead(filename);\n  448:     BAIL_IF_MACRO(in == NULL, NULL, 0);\n  449  \n  450      /* Read signature bytes */\n  ...\n  452      {\n  453          __PHYSFS_platformClose(in); /* Don't forget to close the file before returning... */\n  454:         BAIL_MACRO(NULL, 0);\n  455      }\n  456  \n  ...\n  467      LZMAarchive *archive = NULL;\n  468  \n  469:     BAIL_IF_MACRO(forWriting, ERR_ARC_IS_READ_ONLY, NULL);\n  470:     BAIL_IF_MACRO(!LZMA_isArchive(name,forWriting), ERR_UNSUPPORTED_ARCHIVE, 0);\n  471  \n  472      archive = (LZMAarchive *) allocator.Malloc(sizeof (LZMAarchive));\n  473:     BAIL_IF_MACRO(archive == NULL, ERR_OUT_OF_MEMORY, NULL);\n  474  \n  475      lzma_archive_init(archive);\n  ...\n  502          __PHYSFS_platformClose(archive->stream.file);\n  503          lzma_archive_exit(archive);\n  504:         BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  505      }\n  506  \n  ...\n  518          __PHYSFS_platformClose(archive->stream.file);\n  519          lzma_archive_exit(archive);\n  520:         BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  521      }\n  522  \n  ...\n  532          __PHYSFS_platformClose(archive->stream.file);\n  533          lzma_archive_exit(archive);\n  534:         BAIL_MACRO(ERR_UNKNOWN_ERROR, NULL);\n  535      }\n  536  \n  ...\n  577          }\n  578  \n  579:     BAIL_IF_MACRO(file == NULL, ERR_NO_SUCH_FILE, );\n  580  \n  581      while (file < lastFile)\n  ...\n  617      *fileExists = (file != NULL);\n  618  \n  619:     BAIL_IF_MACRO(file == NULL, NULL, -1);\n  620: 	BAIL_IF_MACRO(!file->item->IsLastWriteTimeDefined, NULL, -1); /* write-time may not be defined for every file */\n  621  \n  622      return(lzma_filetime_to_unix_timestamp(&file->item->LastWriteTime));\n  ...\n  637  static int LZMA_isSymLink(dvoid *opaque, const char *name, int *fileExists)\n  638  {\n  639:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  640  } /* LZMA_isSymLink */\n  641  \n  ...\n  647  \n  648      *fileExists = (file != NULL);\n  649:     BAIL_IF_MACRO(file == NULL, ERR_NO_SUCH_FILE, NULL);\n  650:     BAIL_IF_MACRO(file->folder == NULL, ERR_NOT_A_FILE, NULL);\n  651  \n  652      file->position = 0;\n  ...\n  659  static fvoid *LZMA_openWrite(dvoid *opaque, const char *filename)\n  660  {\n  661:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  662  } /* LZMA_openWrite */\n  663  \n  ...\n  665  static fvoid *LZMA_openAppend(dvoid *opaque, const char *filename)\n  666  {\n  667:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  668  } /* LZMA_openAppend */\n  669  \n  ...\n  687  static int LZMA_remove(dvoid *opaque, const char *name)\n  688  {\n  689:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  690  } /* LZMA_remove */\n  691  \n  ...\n  693  static int LZMA_mkdir(dvoid *opaque, const char *name)\n  694  {\n  695:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  696  } /* LZMA_mkdir */\n  697  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/mvl.c:\n   35  #include \"physfs.h\"\n   36  \n   37: #define __PHYSICSFS_INTERNAL__\n   38  #include \"physfs_internal.h\"\n   39  \n   ..\n   61  \n   62  \n   63: static void MVL_dirClose(dvoid *opaque)\n   64  {\n   65      MVLinfo *info = ((MVLinfo *) opaque);\n   ..\n   67      allocator.Free(info->entries);\n   68      allocator.Free(info);\n   69: } /* MVL_dirClose */\n   70  \n   71  \n   72: static PHYSFS_sint64 MVL_read(fvoid *opaque, void *buffer,\n   73                                PHYSFS_uint32 objSize, PHYSFS_uint32 objCount)\n   74  {\n   ..\n   87  \n   88      return(rc);\n   89: } /* MVL_read */\n   90  \n   91  \n   92: static PHYSFS_sint64 MVL_write(fvoid *opaque, const void *buffer,\n   93                                 PHYSFS_uint32 objSize, PHYSFS_uint32 objCount)\n   94  {\n   95:     BAIL_MACRO(ERR_NOT_SUPPORTED, -1);\n   96: } /* MVL_write */\n   97  \n   98  \n   99: static int MVL_eof(fvoid *opaque)\n  100  {\n  101      MVLfileinfo *finfo = (MVLfileinfo *) opaque;\n  102      MVLentry *entry = finfo->entry;\n  103      return(finfo->curPos >= entry->size);\n  104: } /* MVL_eof */\n  105  \n  106  \n  107: static PHYSFS_sint64 MVL_tell(fvoid *opaque)\n  108  {\n  109      return(((MVLfileinfo *) opaque)->curPos);\n  110: } /* MVL_tell */\n  111  \n  112  \n  113: static int MVL_seek(fvoid *opaque, PHYSFS_uint64 offset)\n  114  {\n  115      MVLfileinfo *finfo = (MVLfileinfo *) opaque;\n  ...\n  117      int rc;\n  118  \n  119:     BAIL_IF_MACRO(offset < 0, ERR_INVALID_ARGUMENT, 0);\n  120:     BAIL_IF_MACRO(offset >= entry->size, ERR_PAST_EOF, 0);\n  121      rc = __PHYSFS_platformSeek(finfo->handle, entry->startPos + offset);\n  122      if (rc)\n  ...\n  124  \n  125      return(rc);\n  126: } /* MVL_seek */\n  127  \n  128  \n  129: static PHYSFS_sint64 MVL_fileLength(fvoid *opaque)\n  130  {\n  131      MVLfileinfo *finfo = (MVLfileinfo *) opaque;\n  132      return((PHYSFS_sint64) finfo->entry->size);\n  133: } /* MVL_fileLength */\n  134  \n  135  \n  136: static int MVL_fileClose(fvoid *opaque)\n  137  {\n  138      MVLfileinfo *finfo = (MVLfileinfo *) opaque;\n  139:     BAIL_IF_MACRO(!__PHYSFS_platformClose(finfo->handle), NULL, 0);\n  140      allocator.Free(finfo);\n  141      return(1);\n  142: } /* MVL_fileClose */\n  143  \n  144  \n  ...\n  149  \n  150      *fh = NULL;\n  151:     BAIL_IF_MACRO(forWriting, ERR_ARC_IS_READ_ONLY, 0);\n  152  \n  153      *fh = __PHYSFS_platformOpenRead(filename);\n  154:     BAIL_IF_MACRO(*fh == NULL, NULL, 0);\n  155      \n  156      if (__PHYSFS_platformRead(*fh, buf, 4, 1) != 1)\n  ...\n  180  \n  181  \n  182: static int MVL_isArchive(const char *filename, int forWriting)\n  183  {\n  184      void *fh;\n  ...\n  190  \n  191      return(retval);\n  192: } /* MVL_isArchive */\n  193  \n  194  \n  ...\n  226      MVLentry *entry;\n  227  \n  228:     BAIL_IF_MACRO(!mvl_open(name, forWriting, &fh, &fileCount), NULL, 0);\n  229      info->entryCount = fileCount;\n  230      info->entries = (MVLentry *) allocator.Malloc(sizeof(MVLentry)*fileCount);\n  ...\n  232      {\n  233          __PHYSFS_platformClose(fh);\n  234:         BAIL_MACRO(ERR_OUT_OF_MEMORY, 0);\n  235      } /* if */\n  236  \n  ...\n  264  \n  265  \n  266: static void *MVL_openArchive(const char *name, int forWriting)\n  267  {\n  268      PHYSFS_sint64 modtime = __PHYSFS_platformGetLastModTime(name);\n  269      MVLinfo *info = (MVLinfo *) allocator.Malloc(sizeof (MVLinfo));\n  270  \n  271:     BAIL_IF_MACRO(info == NULL, ERR_OUT_OF_MEMORY, NULL);\n  272      memset(info, '\\0', sizeof (MVLinfo));\n  273  \n  274      info->filename = (char *) allocator.Malloc(strlen(name) + 1);\n  275:     GOTO_IF_MACRO(!info->filename, ERR_OUT_OF_MEMORY, MVL_openArchive_failed);\n  276      if (!mvl_load_entries(name, forWriting, info))\n  277:         goto MVL_openArchive_failed;\n  278  \n  279      strcpy(info->filename, name);\n  ...\n  281      return(info);\n  282  \n  283: MVL_openArchive_failed:\n  284      if (info != NULL)\n  285      {\n  ...\n  292  \n  293      return(NULL);\n  294: } /* MVL_openArchive */\n  295  \n  296  \n  297: static void MVL_enumerateFiles(dvoid *opaque, const char *dname,\n  298                                 int omitSymLinks, PHYSFS_EnumFilesCallback cb,\n  299                                 const char *origdir, void *callbackdata)\n  ...\n  310              cb(callbackdata, origdir, entry->name);\n  311      } /* if */\n  312: } /* MVL_enumerateFiles */\n  313  \n  314  \n  ...\n  326       *   big filenames, or extensions > 3 chars.\n  327       */\n  328:     BAIL_IF_MACRO((ptr) && (strlen(ptr) > 4), ERR_NO_SUCH_FILE, NULL);\n  329:     BAIL_IF_MACRO(strlen(name) > 12, ERR_NO_SUCH_FILE, NULL);\n  330:     BAIL_IF_MACRO(strchr(name, '/') != NULL, ERR_NO_SUCH_FILE, NULL);\n  331  \n  332      while (lo <= hi)\n  ...\n  342      } /* while */\n  343  \n  344:     BAIL_MACRO(ERR_NO_SUCH_FILE, NULL);\n  345  } /* mvl_find_entry */\n  346  \n  347  \n  348: static int MVL_exists(dvoid *opaque, const char *name)\n  349  {\n  350      return(mvl_find_entry(((MVLinfo *) opaque), name) != NULL);\n  351: } /* MVL_exists */\n  352  \n  353  \n  354: static int MVL_isDirectory(dvoid *opaque, const char *name, int *fileExists)\n  355  {\n  356:     *fileExists = MVL_exists(opaque, name);\n  357      return(0);  /* never directories in a groupfile. */\n  358: } /* MVL_isDirectory */\n  359  \n  360  \n  361: static int MVL_isSymLink(dvoid *opaque, const char *name, int *fileExists)\n  362  {\n  363:     *fileExists = MVL_exists(opaque, name);\n  364      return(0);  /* never symlinks in a groupfile. */\n  365: } /* MVL_isSymLink */\n  366  \n  367  \n  368: static PHYSFS_sint64 MVL_getLastModTime(dvoid *opaque,\n  369                                          const char *name,\n  370                                          int *fileExists)\n  ...\n  378  \n  379      return(retval);\n  380: } /* MVL_getLastModTime */\n  381  \n  382  \n  383: static fvoid *MVL_openRead(dvoid *opaque, const char *fnm, int *fileExists)\n  384  {\n  385      MVLinfo *info = ((MVLinfo *) opaque);\n  ...\n  389      entry = mvl_find_entry(info, fnm);\n  390      *fileExists = (entry != NULL);\n  391:     BAIL_IF_MACRO(entry == NULL, NULL, NULL);\n  392  \n  393      finfo = (MVLfileinfo *) allocator.Malloc(sizeof (MVLfileinfo));\n  394:     BAIL_IF_MACRO(finfo == NULL, ERR_OUT_OF_MEMORY, NULL);\n  395  \n  396      finfo->handle = __PHYSFS_platformOpenRead(info->filename);\n  ...\n  405      finfo->entry = entry;\n  406      return(finfo);\n  407: } /* MVL_openRead */\n  408  \n  409  \n  410: static fvoid *MVL_openWrite(dvoid *opaque, const char *name)\n  411  {\n  412:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  413: } /* MVL_openWrite */\n  414  \n  415  \n  416: static fvoid *MVL_openAppend(dvoid *opaque, const char *name)\n  417  {\n  418:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  419: } /* MVL_openAppend */\n  420  \n  421  \n  422: static int MVL_remove(dvoid *opaque, const char *name)\n  423  {\n  424:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  425: } /* MVL_remove */\n  426  \n  427  \n  428: static int MVL_mkdir(dvoid *opaque, const char *name)\n  429  {\n  430:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  431: } /* MVL_mkdir */\n  432  \n  433  \n  ...\n  435  {\n  436      \"MVL\",\n  437:     MVL_ARCHIVE_DESCRIPTION,\n  438      \"Bradley Bell <btb@icculus.org>\",\n  439      \"http://icculus.org/physfs/\",\n  ...\n  444  {\n  445      &__PHYSFS_ArchiveInfo_MVL,\n  446:     MVL_isArchive,          /* isArchive() method      */\n  447:     MVL_openArchive,        /* openArchive() method    */\n  448:     MVL_enumerateFiles,     /* enumerateFiles() method */\n  449:     MVL_exists,             /* exists() method         */\n  450:     MVL_isDirectory,        /* isDirectory() method    */\n  451:     MVL_isSymLink,          /* isSymLink() method      */\n  452:     MVL_getLastModTime,     /* getLastModTime() method */\n  453:     MVL_openRead,           /* openRead() method       */\n  454:     MVL_openWrite,          /* openWrite() method      */\n  455:     MVL_openAppend,         /* openAppend() method     */\n  456:     MVL_remove,             /* remove() method         */\n  457:     MVL_mkdir,              /* mkdir() method          */\n  458:     MVL_dirClose,           /* dirClose() method       */\n  459:     MVL_read,               /* read() method           */\n  460:     MVL_write,              /* write() method          */\n  461:     MVL_eof,                /* eof() method            */\n  462:     MVL_tell,               /* tell() method           */\n  463:     MVL_seek,               /* seek() method           */\n  464:     MVL_fileLength,         /* fileLength() method     */\n  465:     MVL_fileClose           /* fileClose() method      */\n  466  };\n  467  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/qpak.c:\n   37  #include \"physfs.h\"\n   38  \n   39: #define __PHYSICSFS_INTERNAL__\n   40  #include \"physfs_internal.h\"\n   41  \n   ..\n  107                                 PHYSFS_uint32 objSize, PHYSFS_uint32 objCount)\n  108  {\n  109:     BAIL_MACRO(ERR_NOT_SUPPORTED, -1);\n  110  } /* QPAK_write */\n  111  \n  ...\n  131      int rc;\n  132  \n  133:     BAIL_IF_MACRO(offset < 0, ERR_INVALID_ARGUMENT, 0);\n  134:     BAIL_IF_MACRO(offset >= entry->size, ERR_PAST_EOF, 0);\n  135      rc = __PHYSFS_platformSeek(finfo->handle, entry->startPos + offset);\n  136      if (rc)\n  ...\n  151  {\n  152      QPAKfileinfo *finfo = (QPAKfileinfo *) opaque;\n  153:     BAIL_IF_MACRO(!__PHYSFS_platformClose(finfo->handle), NULL, 0);\n  154      allocator.Free(finfo);\n  155      return(1);\n  ...\n  163  \n  164      *fh = NULL;\n  165:     BAIL_IF_MACRO(forWriting, ERR_ARC_IS_READ_ONLY, 0);\n  166  \n  167      *fh = __PHYSFS_platformOpenRead(filename);\n  168:     BAIL_IF_MACRO(*fh == NULL, NULL, 0);\n  169      \n  170      if (__PHYSFS_platformRead(*fh, &buf, sizeof (PHYSFS_uint32), 1) != 1)\n  ...\n  248      QPAKentry *entry;\n  249  \n  250:     BAIL_IF_MACRO(!qpak_open(name, forWriting, &fh, &fileCount), NULL, 0);\n  251      info->entryCount = fileCount;\n  252      info->entries = (QPAKentry*) allocator.Malloc(sizeof(QPAKentry)*fileCount);\n  ...\n  254      {\n  255          __PHYSFS_platformClose(fh);\n  256:         BAIL_MACRO(ERR_OUT_OF_MEMORY, 0);\n  257      } /* if */\n  258  \n  ...\n  296      PHYSFS_sint64 modtime = __PHYSFS_platformGetLastModTime(name);\n  297  \n  298:     BAIL_IF_MACRO(info == NULL, ERR_OUT_OF_MEMORY, NULL);\n  299      memset(info, '\\0', sizeof (QPAKinfo));\n  300  \n  ...\n  490          *isDir = 0;\n  491  \n  492:     BAIL_MACRO(ERR_NO_SUCH_FILE, NULL);\n  493  } /* qpak_find_entry */\n  494  \n  ...\n  513          return(1); /* definitely a dir. */\n  514  \n  515:     BAIL_MACRO(ERR_NO_SUCH_FILE, 0);\n  516  } /* QPAK_isDirectory */\n  517  \n  ...\n  550      entry = qpak_find_entry(info, fnm, &isDir);\n  551      *fileExists = ((entry != NULL) || (isDir));\n  552:     BAIL_IF_MACRO(isDir, ERR_NOT_A_FILE, NULL);\n  553:     BAIL_IF_MACRO(entry == NULL, ERR_NO_SUCH_FILE, NULL);\n  554  \n  555      finfo = (QPAKfileinfo *) allocator.Malloc(sizeof (QPAKfileinfo));\n  556:     BAIL_IF_MACRO(finfo == NULL, ERR_OUT_OF_MEMORY, NULL);\n  557  \n  558      finfo->handle = __PHYSFS_platformOpenRead(info->filename);\n  ...\n  572  static fvoid *QPAK_openWrite(dvoid *opaque, const char *name)\n  573  {\n  574:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  575  } /* QPAK_openWrite */\n  576  \n  ...\n  578  static fvoid *QPAK_openAppend(dvoid *opaque, const char *name)\n  579  {\n  580:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  581  } /* QPAK_openAppend */\n  582  \n  ...\n  584  static int QPAK_remove(dvoid *opaque, const char *name)\n  585  {\n  586:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  587  } /* QPAK_remove */\n  588  \n  ...\n  590  static int QPAK_mkdir(dvoid *opaque, const char *name)\n  591  {\n  592:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  593  } /* QPAK_mkdir */\n  594  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/wad.c:\n   50  #include \"physfs.h\"\n   51  \n   52: #define __PHYSICSFS_INTERNAL__\n   53  #include \"physfs_internal.h\"\n   54  \n   ..\n  109                                 PHYSFS_uint32 objSize, PHYSFS_uint32 objCount)\n  110  {\n  111:     BAIL_MACRO(ERR_NOT_SUPPORTED, -1);\n  112  } /* WAD_write */\n  113  \n  ...\n  133      int rc;\n  134  \n  135:     BAIL_IF_MACRO(offset < 0, ERR_INVALID_ARGUMENT, 0);\n  136:     BAIL_IF_MACRO(offset >= entry->size, ERR_PAST_EOF, 0);\n  137      rc = __PHYSFS_platformSeek(finfo->handle, entry->startPos + offset);\n  138      if (rc)\n  ...\n  153  {\n  154      WADfileinfo *finfo = (WADfileinfo *) opaque;\n  155:     BAIL_IF_MACRO(!__PHYSFS_platformClose(finfo->handle), NULL, 0);\n  156      allocator.Free(finfo);\n  157      return(1);\n  ...\n  165  \n  166      *fh = NULL;\n  167:     BAIL_IF_MACRO(forWriting, ERR_ARC_IS_READ_ONLY, 0);\n  168  \n  169      *fh = __PHYSFS_platformOpenRead(filename);\n  170:     BAIL_IF_MACRO(*fh == NULL, NULL, 0);\n  171      \n  172      if (__PHYSFS_platformRead(*fh, buf, 4, 1) != 1)\n  ...\n  250      lastDirectory[8] = 0; /* Make sure lastDirectory stays null-terminated. */\n  251  \n  252:     BAIL_IF_MACRO(!wad_open(name, forWriting, &fh, &fileCount,&directoryOffset), NULL, 0);\n  253      info->entryCount = fileCount;\n  254      info->entries = (WADentry *) allocator.Malloc(sizeof(WADentry)*fileCount);\n  ...\n  256      {\n  257          __PHYSFS_platformClose(fh);\n  258:         BAIL_MACRO(ERR_OUT_OF_MEMORY, 0);\n  259      } /* if */\n  260  \n  ...\n  299      WADinfo *info = (WADinfo *) allocator.Malloc(sizeof (WADinfo));\n  300  \n  301:     BAIL_IF_MACRO(info == NULL, ERR_OUT_OF_MEMORY, NULL);\n  302      memset(info, '\\0', sizeof (WADinfo));\n  303  \n  ...\n  382      } /* while */\n  383  \n  384:     BAIL_MACRO(ERR_NO_SUCH_FILE, NULL);\n  385  } /* wad_find_entry */\n  386  \n  ...\n  452      entry = wad_find_entry(info, fnm);\n  453      *fileExists = (entry != NULL);\n  454:     BAIL_IF_MACRO(entry == NULL, NULL, NULL);\n  455  \n  456      finfo = (WADfileinfo *) allocator.Malloc(sizeof (WADfileinfo));\n  457:     BAIL_IF_MACRO(finfo == NULL, ERR_OUT_OF_MEMORY, NULL);\n  458  \n  459      finfo->handle = __PHYSFS_platformOpenRead(info->filename);\n  ...\n  473  static fvoid *WAD_openWrite(dvoid *opaque, const char *name)\n  474  {\n  475:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  476  } /* WAD_openWrite */\n  477  \n  ...\n  479  static fvoid *WAD_openAppend(dvoid *opaque, const char *name)\n  480  {\n  481:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n  482  } /* WAD_openAppend */\n  483  \n  ...\n  485  static int WAD_remove(dvoid *opaque, const char *name)\n  486  {\n  487:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  488  } /* WAD_remove */\n  489  \n  ...\n  491  static int WAD_mkdir(dvoid *opaque, const char *name)\n  492  {\n  493:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n  494  } /* WAD_mkdir */\n  495  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/zip.c:\n   20  #include \"zlib.h\"\n   21  \n   22: #define __PHYSICSFS_INTERNAL__\n   23  #include \"physfs_internal.h\"\n   24  \n   ..\n  100  \n  101  /* Magic numbers... */\n  102: #define ZIP_LOCAL_FILE_SIG          0x04034b50\n  103: #define ZIP_CENTRAL_DIR_SIG         0x02014b50\n  104: #define ZIP_END_OF_CENTRAL_DIR_SIG  0x06054b50\n  105  \n  106  /* compression methods... */\n  ...\n  181  {\n  182      PHYSFS_uint32 v;\n  183:     BAIL_IF_MACRO(__PHYSFS_platformRead(in, &v, sizeof (v), 1) != 1, NULL, 0);\n  184      *val = PHYSFS_swapULE32(v);\n  185      return(1);\n  ...\n  193  {\n  194      PHYSFS_uint16 v;\n  195:     BAIL_IF_MACRO(__PHYSFS_platformRead(in, &v, sizeof (v), 1) != 1, NULL, 0);\n  196      *val = PHYSFS_swapULE16(v);\n  197      return(1);\n  ...\n  209                            finfo->uncompressed_position;\n  210  \n  211:     BAIL_IF_MACRO(maxread == 0, NULL, 0);    /* quick rejection. */\n  212  \n  213      if (avail < maxread)\n  ...\n  215          maxread = avail - (avail % objSize);\n  216          objCount = (PHYSFS_uint32) (maxread / objSize);\n  217:         BAIL_IF_MACRO(objCount == 0, ERR_PAST_EOF, 0);  /* quick rejection. */\n  218          __PHYSFS_setError(ERR_PAST_EOF);   /* this is always true here. */\n  219      } /* if */\n  ...\n  276                                 PHYSFS_uint32 objSize, PHYSFS_uint32 objCount)\n  277  {\n  278:     BAIL_MACRO(ERR_NOT_SUPPORTED, -1);\n  279  } /* ZIP_write */\n  280  \n  ...\n  299      void *in = finfo->handle;\n  300  \n  301:     BAIL_IF_MACRO(offset > entry->uncompressed_size, ERR_PAST_EOF, 0);\n  302  \n  303      if (entry->compression_method == COMPMETH_NONE)\n  304      {\n  305          PHYSFS_sint64 newpos = offset + entry->offset;\n  306:         BAIL_IF_MACRO(!__PHYSFS_platformSeek(in, newpos), NULL, 0);\n  307          finfo->uncompressed_position = (PHYSFS_uint32) offset;\n  308      } /* if */\n  ...\n  360  {\n  361      ZIPfileinfo *finfo = (ZIPfileinfo *) opaque;\n  362:     BAIL_IF_MACRO(!__PHYSFS_platformClose(finfo->handle), NULL, 0);\n  363  \n  364      if (finfo->entry->compression_method != COMPMETH_NONE)\n  ...\n  385  \n  386      filelen = __PHYSFS_platformFileLength(in);\n  387:     BAIL_IF_MACRO(filelen == -1, NULL, 0);  /* !!! FIXME: unlocalized string */\n  388:     BAIL_IF_MACRO(filelen > 0xFFFFFFFF, \"ZIP bigger than 2 gigs?!\", 0);\n  389  \n  390      /*\n  ...\n  413      while ((totalread < filelen) && (totalread < 65557))\n  414      {\n  415:         BAIL_IF_MACRO(!__PHYSFS_platformSeek(in, filepos), NULL, -1);\n  416  \n  417          /* make sure we catch a signature between buffers. */\n  ...\n  452      } /* while */\n  453  \n  454:     BAIL_IF_MACRO(!found, ERR_NOT_AN_ARCHIVE, -1);\n  455  \n  456      if (len != NULL)\n  ...\n  468  \n  469      in = __PHYSFS_platformOpenRead(filename);\n  470:     BAIL_IF_MACRO(in == NULL, NULL, 0);\n  471  \n  472      /*\n  ...\n  476      if (readui32(in, &sig))\n  477      {\n  478:         retval = (sig == ZIP_LOCAL_FILE_SIG);\n  479          if (!retval)\n  480          {\n  ...\n  556          *isDir = 0;\n  557  \n  558:     BAIL_MACRO(ERR_NO_SUCH_FILE, NULL);\n  559  } /* zip_find_entry */\n  560  \n  ...\n  677       */\n  678  \n  679:     BAIL_IF_MACRO(!__PHYSFS_platformSeek(in, entry->offset), NULL, 0);\n  680  \n  681      path = (char *) allocator.Malloc(size + 1);\n  682:     BAIL_IF_MACRO(path == NULL, ERR_OUT_OF_MEMORY, 0);\n  683      \n  684      if (entry->compression_method == COMPMETH_NONE)\n  ...\n  742       */\n  743  \n  744:     BAIL_IF_MACRO(!__PHYSFS_platformSeek(in, entry->offset), NULL, 0);\n  745:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);\n  746:     BAIL_IF_MACRO(ui32 != ZIP_LOCAL_FILE_SIG, ERR_CORRUPTED, 0);\n  747:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);\n  748:     BAIL_IF_MACRO(ui16 != entry->version_needed, ERR_CORRUPTED, 0);\n  749:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);  /* general bits. */\n  750:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);\n  751:     BAIL_IF_MACRO(ui16 != entry->compression_method, ERR_CORRUPTED, 0);\n  752:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);  /* date/time */\n  753:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);\n  754:     BAIL_IF_MACRO(ui32 && (ui32 != entry->crc), ERR_CORRUPTED, 0);\n  755:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);\n  756:     BAIL_IF_MACRO(ui32 && (ui32 != entry->compressed_size), ERR_CORRUPTED, 0);\n  757:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);\n  758:     BAIL_IF_MACRO(ui32 && (ui32 != entry->uncompressed_size),ERR_CORRUPTED,0);\n  759:     BAIL_IF_MACRO(!readui16(in, &fnamelen), NULL, 0);\n  760:     BAIL_IF_MACRO(!readui16(in, &extralen), NULL, 0);\n  761  \n  762      entry->offset += fnamelen + extralen + 30;\n  ...\n  771  \n  772      /* Don't bother if we've failed to resolve this entry before. */\n  773:     BAIL_IF_MACRO(resolve_type == ZIP_BROKEN_FILE, ERR_CORRUPTED, 0);\n  774:     BAIL_IF_MACRO(resolve_type == ZIP_BROKEN_SYMLINK, ERR_CORRUPTED, 0);\n  775  \n  776      /* uhoh...infinite symlink loop! */\n  777:     BAIL_IF_MACRO(resolve_type == ZIP_RESOLVING, ERR_SYMLINK_LOOP, 0);\n  778  \n  779      /*\n  ...\n  904  \n  905      /* sanity check with central directory signature... */\n  906:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);\n  907:     BAIL_IF_MACRO(ui32 != ZIP_CENTRAL_DIR_SIG, ERR_CORRUPTED, 0);\n  908  \n  909      /* Get the pertinent parts of the record... */\n  910:     BAIL_IF_MACRO(!readui16(in, &entry->version), NULL, 0);\n  911:     BAIL_IF_MACRO(!readui16(in, &entry->version_needed), NULL, 0);\n  912:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);  /* general bits */\n  913:     BAIL_IF_MACRO(!readui16(in, &entry->compression_method), NULL, 0);\n  914:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);\n  915      entry->last_mod_time = zip_dos_time_to_physfs_time(ui32);\n  916:     BAIL_IF_MACRO(!readui32(in, &entry->crc), NULL, 0);\n  917:     BAIL_IF_MACRO(!readui32(in, &entry->compressed_size), NULL, 0);\n  918:     BAIL_IF_MACRO(!readui32(in, &entry->uncompressed_size), NULL, 0);\n  919:     BAIL_IF_MACRO(!readui16(in, &fnamelen), NULL, 0);\n  920:     BAIL_IF_MACRO(!readui16(in, &extralen), NULL, 0);\n  921:     BAIL_IF_MACRO(!readui16(in, &commentlen), NULL, 0);\n  922:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);  /* disk number start */\n  923:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);  /* internal file attribs */\n  924:     BAIL_IF_MACRO(!readui32(in, &external_attr), NULL, 0);\n  925:     BAIL_IF_MACRO(!readui32(in, &entry->offset), NULL, 0);\n  926      entry->offset += ofs_fixup;\n  927  \n  ...\n  931  \n  932      entry->name = (char *) allocator.Malloc(fnamelen + 1);\n  933:     BAIL_IF_MACRO(entry->name == NULL, ERR_OUT_OF_MEMORY, 0);\n  934      if (__PHYSFS_platformRead(in, entry->name, fnamelen, 1) != 1)\n  935          goto zip_load_entry_puked;\n  ...\n  986      PHYSFS_uint32 i;\n  987  \n  988:     BAIL_IF_MACRO(!__PHYSFS_platformSeek(in, central_ofs), NULL, 0);\n  989  \n  990      info->entries = (ZIPentry *) allocator.Malloc(sizeof (ZIPentry) * max);\n  991:     BAIL_IF_MACRO(info->entries == NULL, ERR_OUT_OF_MEMORY, 0);\n  992  \n  993      for (i = 0; i < max; i++)\n  ...\n 1016      /* find the end-of-central-dir record, and seek to it. */\n 1017      pos = zip_find_end_of_central_dir(in, &len);\n 1018:     BAIL_IF_MACRO(pos == -1, NULL, 0);\n 1019:     BAIL_IF_MACRO(!__PHYSFS_platformSeek(in, pos), NULL, 0);\n 1020  \n 1021      /* check signature again, just in case. */\n 1022:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);\n 1023:     BAIL_IF_MACRO(ui32 != ZIP_END_OF_CENTRAL_DIR_SIG, ERR_NOT_AN_ARCHIVE, 0);\n 1024  \n 1025      /* number of this disk */\n 1026:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);\n 1027:     BAIL_IF_MACRO(ui16 != 0, ERR_UNSUPPORTED_ARCHIVE, 0);\n 1028  \n 1029      /* number of the disk with the start of the central directory */\n 1030:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);\n 1031:     BAIL_IF_MACRO(ui16 != 0, ERR_UNSUPPORTED_ARCHIVE, 0);\n 1032  \n 1033      /* total number of entries in the central dir on this disk */\n 1034:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);\n 1035  \n 1036      /* total number of entries in the central dir */\n 1037:     BAIL_IF_MACRO(!readui16(in, &info->entryCount), NULL, 0);\n 1038:     BAIL_IF_MACRO(ui16 != info->entryCount, ERR_UNSUPPORTED_ARCHIVE, 0);\n 1039  \n 1040      /* size of the central directory */\n 1041:     BAIL_IF_MACRO(!readui32(in, &ui32), NULL, 0);\n 1042  \n 1043      /* offset of central directory */\n 1044:     BAIL_IF_MACRO(!readui32(in, central_dir_ofs), NULL, 0);\n 1045:     BAIL_IF_MACRO(pos < *central_dir_ofs + ui32, ERR_UNSUPPORTED_ARCHIVE, 0);\n 1046  \n 1047      /*\n ....\n 1059  \n 1060      /* zipfile comment length */\n 1061:     BAIL_IF_MACRO(!readui16(in, &ui16), NULL, 0);\n 1062  \n 1063      /*\n ....\n 1066       *  file is corrupted, but we give up either way.\n 1067       */\n 1068:     BAIL_IF_MACRO((pos + 22 + ui16) != len, ERR_UNSUPPORTED_ARCHIVE, 0);\n 1069  \n 1070      return(1);  /* made it. */\n ....\n 1076      char *ptr;\n 1077      ZIPinfo *info = (ZIPinfo *) allocator.Malloc(sizeof (ZIPinfo));\n 1078:     BAIL_IF_MACRO(info == NULL, ERR_OUT_OF_MEMORY, 0);\n 1079      memset(info, '\\0', sizeof (ZIPinfo));\n 1080  \n ....\n 1083      {\n 1084          allocator.Free(info);\n 1085:         BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n 1086      } /* if */\n 1087  \n ....\n 1099      PHYSFS_uint32 cent_dir_ofs;\n 1100  \n 1101:     BAIL_IF_MACRO(forWriting, ERR_ARC_IS_READ_ONLY, NULL);\n 1102  \n 1103      if ((in = __PHYSFS_platformOpenRead(name)) == NULL)\n ....\n 1268          return(1);  /* Best I can do for a dir... */\n 1269  \n 1270:     BAIL_IF_MACRO(entry == NULL, NULL, -1);\n 1271      return(entry->last_mod_time);\n 1272  } /* ZIP_getLastModTime */\n ....\n 1284  \n 1285      /* Follow symlinks. This means we might need to resolve entries. */\n 1286:     BAIL_IF_MACRO(entry == NULL, ERR_NO_SUCH_FILE, 0);\n 1287  \n 1288      if (entry->resolved == ZIP_UNRESOLVED_SYMLINK) /* gotta resolve it. */\n ....\n 1290          int rc;\n 1291          void *in = __PHYSFS_platformOpenRead(info->archiveName);\n 1292:         BAIL_IF_MACRO(in == NULL, NULL, 0);\n 1293          rc = zip_resolve(in, info, entry);\n 1294          __PHYSFS_platformClose(in);\n ....\n 1297      } /* if */\n 1298  \n 1299:     BAIL_IF_MACRO(entry->resolved == ZIP_BROKEN_SYMLINK, NULL, 0);\n 1300:     BAIL_IF_MACRO(entry->symlink == NULL, ERR_NOT_A_DIR, 0);\n 1301  \n 1302      return(zip_find_start_of_dir(info, entry->symlink->name, 1) >= 0);\n ....\n 1309      const ZIPentry *entry = zip_find_entry((ZIPinfo *) opaque, name, &isDir);\n 1310      *fileExists = ((isDir) || (entry != NULL));\n 1311:     BAIL_IF_MACRO(entry == NULL, NULL, 0);\n 1312      return(zip_entry_is_symlink(entry));\n 1313  } /* ZIP_isSymLink */\n ....\n 1318      int success;\n 1319      void *retval = __PHYSFS_platformOpenRead(fn);\n 1320:     BAIL_IF_MACRO(retval == NULL, NULL, NULL);\n 1321  \n 1322      success = zip_resolve(retval, inf, entry);\n ....\n 1346  \n 1347      *fileExists = (entry != NULL);\n 1348:     BAIL_IF_MACRO(entry == NULL, NULL, NULL);\n 1349  \n 1350      in = zip_get_file_handle(info->archiveName, info, entry);\n 1351:     BAIL_IF_MACRO(in == NULL, NULL, NULL);\n 1352  \n 1353      finfo = (ZIPfileinfo *) allocator.Malloc(sizeof (ZIPfileinfo));\n ....\n 1355      {\n 1356          __PHYSFS_platformClose(in);\n 1357:         BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n 1358      } /* if */\n 1359  \n ....\n 1374          {\n 1375              ZIP_fileClose(finfo);\n 1376:             BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n 1377          } /* if */\n 1378      } /* if */\n ....\n 1384  static fvoid *ZIP_openWrite(dvoid *opaque, const char *filename)\n 1385  {\n 1386:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n 1387  } /* ZIP_openWrite */\n 1388  \n ....\n 1390  static fvoid *ZIP_openAppend(dvoid *opaque, const char *filename)\n 1391  {\n 1392:     BAIL_MACRO(ERR_NOT_SUPPORTED, NULL);\n 1393  } /* ZIP_openAppend */\n 1394  \n ....\n 1405  static int ZIP_remove(dvoid *opaque, const char *name)\n 1406  {\n 1407:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n 1408  } /* ZIP_remove */\n 1409  \n ....\n 1411  static int ZIP_mkdir(dvoid *opaque, const char *name)\n 1412  {\n 1413:     BAIL_MACRO(ERR_NOT_SUPPORTED, 0);\n 1414  } /* ZIP_mkdir */\n 1415  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/lzma/C/Compress/Huffman/HuffmanEncode.c:\n   10  #define NUM_COUNTERS 64\n   11  \n   12: /* use BLOCK_SORT_EXTERNAL_FLAGS if blockSize > 1M */\n   13  #define HUFFMAN_SPEED_OPT\n   14  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/macosx.c:\n    7   */\n    8  \n    9: #define __PHYSICSFS_INTERNAL__\n   10  #include \"physfs_platforms.h\"\n   11  \n   ..\n   67      ctx.deallocate = cfallocFree;\n   68      cfallocator = CFAllocatorCreate(kCFAllocatorUseContext, &ctx);\n   69:     BAIL_IF_MACRO(cfallocator == NULL, ERR_OUT_OF_MEMORY, 0);\n   70      return(1);  /* success. */\n   71  } /* __PHYSFS_platformInit */\n   ..\n  171  \n  172      if (IOMasterPort(MACH_PORT_NULL, &masterPort) != KERN_SUCCESS)\n  173:         BAIL_MACRO(ERR_OS_ERROR, ) /*return void*/;\n  174  \n  175      mounts = getmntinfo(&mntbufp, MNT_WAIT);  /* NOT THREAD SAFE! */\n  ...\n  193                                                      kCFStringEncodingUTF8) + 1;\n  194      char *retval = (char *) allocator.Malloc(len);\n  195:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  196  \n  197      if (CFStringGetCString(cfstr, retval, len, kCFStringEncodingUTF8))\n  ...\n  210      {\n  211          allocator.Free(retval);\n  212:         BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  213      } /* else */\n  214  \n  ...\n  227      char *retval = NULL;\n  228  \n  229:     BAIL_IF_MACRO(GetProcessBundleLocation(&psn, &fsref) != noErr, NULL, NULL);\n  230      cfurl = CFURLCreateFromFSRef(cfallocator, &fsref);\n  231:     BAIL_IF_MACRO(cfurl == NULL, NULL, NULL);\n  232      cfstr = CFURLCopyFileSystemPath(cfurl, kCFURLPOSIXPathStyle);\n  233      CFRelease(cfurl);\n  234:     BAIL_IF_MACRO(cfstr == NULL, NULL, NULL);\n  235      cfmutstr = CFStringCreateMutableCopy(cfallocator, 0, cfstr);\n  236      CFRelease(cfstr);\n  237:     BAIL_IF_MACRO(cfmutstr == NULL, NULL, NULL);\n  238  \n  239      /* Find last dirsep so we can chop the binary's filename from the path. */\n  ...\n  277      char *retval = NULL;\n  278      OSStatus rc = osxerr(FSPathMakeRef((UInt8 *) path, &fsref, NULL));\n  279:     BAIL_IF_MACRO(rc != noErr, NULL, NULL);\n  280  \n  281      /* Now get it to spit out a full path. */\n  282      cfurl = CFURLCreateFromFSRef(cfallocator, &fsref);\n  283:     BAIL_IF_MACRO(cfurl == NULL, ERR_OUT_OF_MEMORY, NULL);\n  284      cfstr = CFURLCopyFileSystemPath(cfurl, kCFURLPOSIXPathStyle);\n  285      CFRelease(cfurl);\n  286:     BAIL_IF_MACRO(cfstr == NULL, ERR_OUT_OF_MEMORY, NULL);\n  287      retval = convertCFString(cfstr);\n  288      CFRelease(cfstr);\n  ...\n  325  static void *macosxAllocatorMalloc(PHYSFS_uint64 s)\n  326  {\n  327:     BAIL_IF_MACRO(__PHYSFS_ui64FitsAddressSpace(s), ERR_OUT_OF_MEMORY, NULL);\n  328      return(CFAllocatorAllocate(cfallocdef, (CFIndex) s, 0));\n  329  } /* macosxAllocatorMalloc */\n  ...\n  332  static void *macosxAllocatorRealloc(void *ptr, PHYSFS_uint64 s)\n  333  {\n  334:     BAIL_IF_MACRO(__PHYSFS_ui64FitsAddressSpace(s), ERR_OUT_OF_MEMORY, NULL);\n  335      return(CFAllocatorReallocate(cfallocdef, ptr, (CFIndex) s, 0));\n  336  } /* macosxAllocatorRealloc */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/os2.c:\n    7   */\n    8  \n    9: #define __PHYSICSFS_INTERNAL__\n   10  #include \"physfs_platforms.h\"\n   11  \n   12  #ifdef PHYSFS_PLATFORM_OS2\n   13  \n   14: #define INCL_DOSSEMAPHORES\n   15: #define INCL_DOSDATETIME\n   16: #define INCL_DOSFILEMGR\n   17: #define INCL_DOSMODULEMGR\n   18: #define INCL_DOSERRORS\n   19: #define INCL_DOSPROCESS\n   20: #define INCL_DOSDEVICES\n   21: #define INCL_DOSDEVIOCTL\n   22: #define INCL_DOSMISC\n   23  #include <os2.h>\n   24  \n   ..\n   61          case ERROR_SEEK_ON_DEVICE: return(ERR_SEEK_ERROR);\n   62          case ERROR_NEGATIVE_SEEK: return(ERR_SEEK_OUT_OF_RANGE);\n   63:         /*!!! FIXME: Where did this go?  case ERROR_DEL_CURRENT_DIRECTORY: return(ERR_DEL_CWD);*/\n   64          case ERROR_WRITE_PROTECT: return(ERR_WRITE_PROTECT_ERROR);\n   65          case ERROR_WRITE_FAULT: return(ERR_WRITE_FAULT);\n   ..\n  141  \n  142          rc = DosFindFirst(spec, &hdir, FILE_DIRECTORY,\n  143:                           &fb, sizeof (fb), &count, FIL_STANDARD);\n  144          if (rc == NO_ERROR)\n  145          {\n  ...\n  179  \n  180      assert(baseDir == NULL);\n  181:     BAIL_IF_MACRO(os2err(DosGetInfoBlocks(&ptib, &ppib)) != NO_ERROR, NULL, 0);\n  182      rc = DosQueryModuleName(ppib->pib_hmte, sizeof (buf), (PCHAR) buf);\n  183:     BAIL_IF_MACRO(os2err(rc) != NO_ERROR, NULL, 0);\n  184  \n  185      /* chop off filename, leave path. */\n  ...\n  199  \n  200      baseDir = (char *) allocator.Malloc(len + 1);\n  201:     BAIL_IF_MACRO(baseDir == NULL, ERR_OUT_OF_MEMORY, 0);\n  202      strcpy(baseDir, buf);\n  203      return(1);  /* success. */\n  ...\n  219      char buf[20];\n  220      DosError(FERR_DISABLEHARDERR | FERR_DISABLEEXCEPTION);\n  221:     rc = DosQueryFSInfo(drive + 1, FSIL_VOLSER, buf, sizeof (buf));\n  222      DosError(FERR_ENABLEHARDERR | FERR_ENABLEEXCEPTION);\n  223      return(rc == NO_ERROR);\n  ...\n  237  \n  238      rc = DosOpen(drivename, &hfile, &ul1, 0, 0,\n  239:                  OPEN_ACTION_OPEN_IF_EXISTS | OPEN_ACTION_FAIL_IF_NEW,\n  240:                  OPEN_FLAGS_DASD | OPEN_FLAGS_FAIL_ON_ERROR |\n  241                   OPEN_FLAGS_NOINHERIT | OPEN_SHARE_DENYNONE, NULL);\n  242:     BAIL_IF_MACRO(rc != NO_ERROR, NULL, 0);\n  243  \n  244      data = 0;\n  245      param = PHYSFS_swapULE32(CD01);\n  246      ul1 = ul2 = sizeof (PHYSFS_uint32);\n  247:     rc = DosDevIOCtl(hfile, IOCTL_CDROMDISK, CDROMDISK_GETDRIVER,\n  248                       &param, sizeof (param), &ul1, &data, sizeof (data), &ul2);\n  249  \n  ...\n  280  {\n  281      char *retval = (char *) allocator.Malloc(strlen(baseDir) + 1);\n  282:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  283      strcpy(retval, baseDir); /* calculated at init time. */\n  284      return(retval);\n  ...\n  301  {\n  302      FILESTATUS3 fs;\n  303:     APIRET rc = DosQueryPathInfo(fname, FIL_STANDARD, &fs, sizeof (fs));\n  304      return(os2err(rc) == NO_ERROR);\n  305  } /* __PHYSFS_platformExists */\n  ...\n  315  {\n  316      FILESTATUS3 fs;\n  317:     APIRET rc = DosQueryPathInfo(fname, FIL_STANDARD, &fs, sizeof (fs));\n  318:     BAIL_IF_MACRO(os2err(rc) != NO_ERROR, NULL, 0)\n  319      return((fs.attrFile & FILE_DIRECTORY) != 0);\n  320  } /* __PHYSFS_platformIsDirectory */\n  ...\n  332      char *p;\n  333  \n  334:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  335  \n  336      if (prepend)\n  ...\n  375                        FILE_DIRECTORY | FILE_ARCHIVED |\n  376                        FILE_READONLY | FILE_HIDDEN | FILE_SYSTEM,\n  377:                       &fb, sizeof (fb), &count, FIL_STANDARD);\n  378  \n  379      if (os2err(rc) != NO_ERROR)\n  ...\n  402  \n  403      rc = DosQueryCurrentDisk(&currentDisk, &dummy);\n  404:     BAIL_IF_MACRO(os2err(rc) != NO_ERROR, NULL, NULL);\n  405  \n  406      /* The first call just tells us how much space we need for the string. */\n  ...\n  408      pathSize++; /* Add space for null terminator. */\n  409      retval = (char *) allocator.Malloc(pathSize + 3);  /* plus \"x:\\\\\" */\n  410:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  411  \n  412      /* Actually get the string this time. */\n  ...\n  429      char buf[CCHMAXPATH];\n  430      char *retval;\n  431:     APIRET rc = DosQueryPathInfo(path, FIL_QUERYFULLNAME, buf, sizeof (buf));\n  432:     BAIL_IF_MACRO(os2err(rc) != NO_ERROR, NULL, NULL);\n  433      retval = (char *) allocator.Malloc(strlen(buf) + 1);\n  434:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  435      strcpy(retval, buf);\n  436      return(retval);\n  ...\n  454       */\n  455      os2err(DosOpen(filename, &hfile, &actionTaken, 0, FILE_NORMAL,\n  456:                    OPEN_ACTION_OPEN_IF_EXISTS | OPEN_ACTION_FAIL_IF_NEW,\n  457:                    OPEN_FLAGS_FAIL_ON_ERROR | OPEN_FLAGS_NO_LOCALITY |\n  458                     OPEN_FLAGS_NOINHERIT | OPEN_SHARE_DENYWRITE |\n  459                     OPEN_ACCESS_READONLY, NULL));\n  ...\n  474      os2err(DosOpen(filename, &hfile, &actionTaken, 0, FILE_NORMAL,\n  475                     OPEN_ACTION_REPLACE_IF_EXISTS | OPEN_ACTION_CREATE_IF_NEW,\n  476:                    OPEN_FLAGS_FAIL_ON_ERROR | OPEN_FLAGS_NO_LOCALITY |\n  477                     OPEN_FLAGS_NOINHERIT | OPEN_SHARE_DENYWRITE |\n  478                     OPEN_ACCESS_READWRITE, NULL));\n  ...\n  494      rc = os2err(DosOpen(filename, &hfile, &dummy, 0, FILE_NORMAL,\n  495                     OPEN_ACTION_OPEN_IF_EXISTS | OPEN_ACTION_CREATE_IF_NEW,\n  496:                    OPEN_FLAGS_FAIL_ON_ERROR | OPEN_FLAGS_NO_LOCALITY |\n  497                     OPEN_FLAGS_NOINHERIT | OPEN_SHARE_DENYWRITE |\n  498                     OPEN_ACCESS_READWRITE, NULL));\n  ...\n  564  \n  565      /* hooray for 32-bit filesystem limits!  :) */\n  566:     BAIL_IF_MACRO((PHYSFS_uint64) dist != pos, ERR_SEEK_OUT_OF_RANGE, 0);\n  567  \n  568      return(os2err(DosSetFilePtr(hfile, dist, FILE_BEGIN, &dummy)) == NO_ERROR);\n  ...\n  575      HFILE hfile = (HFILE) opaque;\n  576      APIRET rc = os2err(DosSetFilePtr(hfile, 0, FILE_CURRENT, &pos));\n  577:     BAIL_IF_MACRO(rc != NO_ERROR, NULL, -1);\n  578      return((PHYSFS_sint64) pos);\n  579  } /* __PHYSFS_platformTell */\n  ...\n  584      FILESTATUS3 fs;\n  585      HFILE hfile = (HFILE) opaque;\n  586:     APIRET rc = DosQueryFileInfo(hfile, FIL_STANDARD, &fs, sizeof (fs));\n  587:     BAIL_IF_MACRO(os2err(rc) != NO_ERROR, NULL, -1);\n  588      return((PHYSFS_sint64) fs.cbFile);\n  589  } /* __PHYSFS_platformFileLength */\n  ...\n  595  \n  596      len = __PHYSFS_platformFileLength(opaque);\n  597:     BAIL_IF_MACRO(len == -1, NULL, 1);  /* (*shrug*) */\n  598      pos = __PHYSFS_platformTell(opaque);\n  599:     BAIL_IF_MACRO(pos == -1, NULL, 1);  /* (*shrug*) */\n  600  \n  601      return(pos >= len);\n  ...\n  629      struct tm tm;\n  630      FILESTATUS3 fs;\n  631:     APIRET rc = DosQueryPathInfo(fname, FIL_STANDARD, &fs, sizeof (fs));\n  632:     BAIL_IF_MACRO(os2err(rc) != NO_ERROR, NULL, -1);\n  633  \n  634      /* Convert to a format that mktime() can grok... */\n  ...\n  645      /* Convert to a format PhysicsFS can grok... */\n  646      retval = (PHYSFS_sint64) mktime(&tm);\n  647:     BAIL_IF_MACRO(retval == -1, strerror(errno), -1);\n  648      return(retval);\n  649  } /* __PHYSFS_platformGetLastModTime */\n  ...\n  659       *  default value (zero might as well do) if it does.\n  660       */\n  661:     BAIL_IF_MACRO(os2err(DosGetInfoBlocks(&ptib, &ppib)) != NO_ERROR, 0, 0);\n  662      return((PHYSFS_uint64) ptib->tib_ordinal);\n  663  } /* __PHYSFS_platformGetThreadID */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/pocketpc.c:\n    7   */\n    8  \n    9: #define __PHYSICSFS_INTERNAL__\n   10  #include \"physfs_platforms.h\"\n   11  \n   ..\n   85      TCHAR *retval = (TCHAR*) allocator.Malloc(sizeof (TCHAR) * (MAX_PATH + 1));\n   86      char *charretval;\n   87:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n   88  \n   89      retval[0] = _T('\\0');\n   ..\n  125  {\n  126      userDir = getExePath();\n  127:     BAIL_IF_MACRO(userDir == NULL, NULL, 0); /* failed? */\n  128      return(1);  /* always succeed. */\n  129  } /* __PHYSFS_platformInit */\n  ...\n  151  char *__PHYSFS_platformGetUserName(void)\n  152  {\n  153:     BAIL_MACRO(ERR_NOT_IMPLEMENTED, NULL);\n  154  } /* __PHYSFS_platformGetUserName */\n  155  \n  ...\n  158  {\n  159      return userDir;\n  160:     BAIL_MACRO(ERR_NOT_IMPLEMENTED, NULL);\n  161  } /* __PHYSFS_platformGetUserDir */\n  162  \n  ...\n  184  int __PHYSFS_platformIsSymLink(const char *fname)\n  185  {\n  186:     BAIL_MACRO(ERR_NOT_IMPLEMENTED, 0);\n  187  } /* __PHYSFS_platformIsSymlink */\n  188  \n  ...\n  212      char *p;\n  213  \n  214:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  215  \n  216      if (prepend)\n  ...\n  256      /* Allocate a new string for path, maybe '\\\\', \"*\", and NULL terminator */\n  257      SearchPath = (char *) __PHYSFS_smallAlloc(len + 3);\n  258:     BAIL_IF_MACRO(SearchPath == NULL, ERR_OUT_OF_MEMORY, NULL);    \n  259  \n  260      /* Copy current dirname */\n  ...\n  336      __PHYSFS_smallFree(w_fname);\n  337  \n  338:     BAIL_IF_MACRO(fileHandle == INVALID_HANDLE_VALUE, win32strerror(), NULL);\n  339  \n  340      retval = (winCEfile *) allocator.Malloc(sizeof (winCEfile));\n  ...\n  342      {\n  343          CloseHandle(fileHandle);\n  344:         BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  345      } /* if */\n  346  \n  ...\n  374              CloseHandle(h);\n  375              allocator.Free(retval);\n  376:             BAIL_MACRO(err, NULL);\n  377          } /* if */\n  378      } /* if */\n  ...\n  450      if ((rc == INVALID_SET_FILE_POINTER) && (GetLastError() != NO_ERROR))\n  451      {\n  452:         BAIL_MACRO(win32strerror(), 0);\n  453      }\n  454  \n  ...\n  468      if ((LowPos == INVALID_SET_FILE_POINTER) && (GetLastError() != NO_ERROR))\n  469      {\n  470:         BAIL_MACRO(win32strerror(), 0);\n  471      } /* if */\n  472      else\n  ...\n  491      if ((SizeLow == INVALID_SET_FILE_POINTER) && (GetLastError() != NO_ERROR))\n  492      {\n  493:         BAIL_MACRO(win32strerror(), -1);\n  494      } /* if */\n  495      else\n  ...\n  524      winCEfile *fh = ((winCEfile *) opaque);\n  525      if (!fh->readonly)\n  526:         BAIL_IF_MACRO(!FlushFileBuffers(fh->handle), win32strerror(), 0);\n  527  \n  528      return(1);\n  ...\n  533  {\n  534      HANDLE Handle = ((winCEfile *) opaque)->handle;\n  535:     BAIL_IF_MACRO(!CloseHandle(Handle), win32strerror(), 0);\n  536      allocator.Free(opaque);\n  537      return(1);\n  ...\n  549          int retval = !RemoveDirectory(w_path);\n  550          __PHYSFS_smallFree(w_path);\n  551:         BAIL_IF_MACRO(retval, win32strerror(), 0);\n  552      } /* if */\n  553      else\n  ...\n  555          int retval = !DeleteFile(w_path);\n  556          __PHYSFS_smallFree(w_path);\n  557:         BAIL_IF_MACRO(retval, win32strerror(), 0);\n  558      } /* else */\n  559  \n  ...\n  593  PHYSFS_sint64 __PHYSFS_platformGetLastModTime(const char *fname)\n  594  {\n  595:     BAIL_MACRO(ERR_NOT_IMPLEMENTED, -1);\n  596  } /* __PHYSFS_platformGetLastModTime */\n  597  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/posix.c:\n    7   */\n    8  \n    9: #define __PHYSICSFS_INTERNAL__\n   10  #include \"physfs_platforms.h\"\n   11  \n   ..\n  120  {\n  121      struct stat statbuf;\n  122:     BAIL_IF_MACRO(lstat(fname, &statbuf) == -1, strerror(errno), 0);\n  123      return(1);\n  124  } /* __PHYSFS_platformExists */\n  ...\n  128  {\n  129      struct stat statbuf;\n  130:     BAIL_IF_MACRO(lstat(fname, &statbuf) == -1, strerror(errno), 0);\n  131      return( (S_ISLNK(statbuf.st_mode)) ? 1 : 0 );\n  132  } /* __PHYSFS_platformIsSymlink */\n  ...\n  136  {\n  137      struct stat statbuf;\n  138:     BAIL_IF_MACRO(stat(fname, &statbuf) == -1, strerror(errno), 0);\n  139      return( (S_ISDIR(statbuf.st_mode)) ? 1 : 0 );\n  140  } /* __PHYSFS_platformIsDirectory */\n  ...\n  150      char *retval = (char *) allocator.Malloc(len);\n  151  \n  152:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  153  \n  154      /* platform-independent notation is Unix-style already.  :)  */\n  ...\n  243      errno = 0;\n  244      rc = mkdir(path, S_IRWXU);\n  245:     BAIL_IF_MACRO(rc == -1, strerror(errno), 0);\n  246      return(1);\n  247  } /* __PHYSFS_platformMkDir */\n  ...\n  259  \n  260      fd = open(filename, mode, S_IRUSR | S_IWUSR);\n  261:     BAIL_IF_MACRO(fd < 0, strerror(errno), NULL);\n  262  \n  263      if (appending)\n  ...\n  266          {\n  267              close(fd);\n  268:             BAIL_MACRO(strerror(errno), NULL);\n  269          } /* if */\n  270      } /* if */\n  ...\n  274      {\n  275          close(fd);\n  276:         BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  277      } /* if */\n  278  \n  ...\n  307      int rc = read(fd, buffer, max);\n  308  \n  309:     BAIL_IF_MACRO(rc == -1, strerror(errno), rc);\n  310      assert(rc <= max);\n  311  \n  ...\n  324      int rc = write(fd, (void *) buffer, max);\n  325  \n  326:     BAIL_IF_MACRO(rc == -1, strerror(errno), rc);\n  327      assert(rc <= max);\n  328  \n  ...\n  343        loff_t retoffset;\n  344        int rc = llseek(fd, offset_high, offset_low, &retoffset, SEEK_SET);\n  345:       BAIL_IF_MACRO(rc == -1, strerror(errno), 0);\n  346      #else\n  347:       BAIL_IF_MACRO(lseek(fd, (int) pos, SEEK_SET) == -1, strerror(errno), 0);\n  348      #endif\n  349  \n  ...\n  360        loff_t retoffset;\n  361        int rc = llseek(fd, 0, &retoffset, SEEK_CUR);\n  362:       BAIL_IF_MACRO(rc == -1, strerror(errno), -1);\n  363        retval = (PHYSFS_sint64) retoffset;\n  364      #else\n  365        retval = (PHYSFS_sint64) lseek(fd, 0, SEEK_CUR);\n  366:       BAIL_IF_MACRO(retval == -1, strerror(errno), -1);\n  367      #endif\n  368  \n  ...\n  375      int fd = *((int *) opaque);\n  376      struct stat statbuf;\n  377:     BAIL_IF_MACRO(fstat(fd, &statbuf) == -1, strerror(errno), -1);\n  378      return((PHYSFS_sint64) statbuf.st_size);\n  379  } /* __PHYSFS_platformFileLength */\n  ...\n  391  {\n  392      int fd = *((int *) opaque);\n  393:     BAIL_IF_MACRO(fsync(fd) == -1, strerror(errno), 0);\n  394      return(1);\n  395  } /* __PHYSFS_platformFlush */\n  ...\n  399  {\n  400      int fd = *((int *) opaque);\n  401:     BAIL_IF_MACRO(close(fd) == -1, strerror(errno), 0);\n  402      allocator.Free(opaque);\n  403      return(1);\n  ...\n  407  int __PHYSFS_platformDelete(const char *path)\n  408  {\n  409:     BAIL_IF_MACRO(remove(path) == -1, strerror(errno), 0);\n  410      return(1);\n  411  } /* __PHYSFS_platformDelete */\n  ...\n  415  {\n  416      struct stat statbuf;\n  417:     BAIL_IF_MACRO(stat(fname, &statbuf) < 0, strerror(errno), -1);\n  418      return statbuf.st_mtime;\n  419  } /* __PHYSFS_platformGetLastModTime */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/unix.c:\n    7   */\n    8  \n    9: #define __PHYSICSFS_INTERNAL__\n   10  #include \"physfs_platforms.h\"\n   11  \n   ..\n   98  \n   99      mounts = setmntent(\"/etc/mtab\", \"r\");\n  100:     BAIL_IF_MACRO(mounts == NULL, ERR_IO_ERROR, /*return void*/);\n  101  \n  102      while ( (ent = getmntent(mounts)) != NULL )\n  ...\n  147      char *ptr;\n  148  \n  149:     BAIL_IF_MACRO(bin == NULL, ERR_INVALID_ARGUMENT, NULL);\n  150:     BAIL_IF_MACRO(envr == NULL, ERR_INVALID_ARGUMENT, NULL);\n  151  \n  152      do\n  ...\n  165                  if (exe != NULL)\n  166                      allocator.Free(exe);\n  167:                 BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  168              } /* if */\n  169  \n  ...\n  262          /* If there's no dirsep on argv0, then look through $PATH for it. */\n  263          envr = __PHYSFS_platformCopyEnvironmentVariable(\"PATH\");\n  264:         BAIL_IF_MACRO(!envr, NULL, NULL);\n  265          retval = findBinaryInPath(argv0, envr);\n  266          allocator.Free(envr);\n  ...\n  285  \n  286      errno = 0;\n  287:     BAIL_IF_MACRO(!realpath(path, resolved_path), strerror(errno), NULL);\n  288      retval = (char *) allocator.Malloc(strlen(resolved_path) + 1);\n  289:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  290      strcpy(retval, resolved_path);\n  291  \n  ...\n  313              if (retval != NULL)\n  314                  allocator.Free(retval);\n  315:             BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  316          } /* if */\n  317  \n  ...\n  328          if (retval != NULL)\n  329              allocator.Free(retval);\n  330:         BAIL_MACRO(ERR_NO_SUCH_FILE, NULL);\n  331      } /* if */\n  332  \n  ...\n  383      int rc;\n  384      PthreadMutex *m = (PthreadMutex *) allocator.Malloc(sizeof (PthreadMutex));\n  385:     BAIL_IF_MACRO(m == NULL, ERR_OUT_OF_MEMORY, NULL);\n  386      rc = pthread_mutex_init(&m->mutex, NULL);\n  387      if (rc != 0)\n  388      {\n  389          allocator.Free(m);\n  390:         BAIL_MACRO(strerror(rc), NULL);\n  391      } /* if */\n  392  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/platform/windows.c:\n    7   */\n    8  \n    9: #define __PHYSICSFS_INTERNAL__\n   10  #include \"physfs_platforms.h\"\n   11  \n   ..\n   71          const PHYSFS_uint64 len = (wStrLen(w_str) * 4) + 1;\n   72          retval = allocator.Malloc(len);\n   73:         BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n   74          PHYSFS_utf8FromUcs2((const PHYSFS_uint16 *) w_str, retval, len);\n   75          ptr = allocator.Realloc(retval, strlen(retval) + 1); /* shrink. */\n   ..\n   88          const int len = (int) (strlen(cpstr) + 1);\n   89          WCHAR *wbuf = (WCHAR *) __PHYSFS_smallAlloc(len * sizeof (WCHAR));\n   90:         BAIL_IF_MACRO(wbuf == NULL, ERR_OUT_OF_MEMORY, NULL);\n   91          MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, cpstr, len, wbuf, len);\n   92          retval = (char *) allocator.Malloc(len * 4);\n   ..\n  379          {\n  380              allocator.Free(modpath);\n  381:             BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  382          } /* if */\n  383          modpath = (LPWSTR) ptr;\n  ...\n  387          {\n  388              allocator.Free(modpath);\n  389:             BAIL_MACRO(winApiStrError(), NULL);\n  390          } /* if */\n  391  \n  ...\n  481          /* Might just be a non-NT system; resort to the basedir. */\n  482          userDir = getExePath();\n  483:         BAIL_IF_MACRO(userDir == NULL, NULL, 0); /* STILL failed?! */\n  484      } /* if */\n  485  \n  ...\n  539      {\n  540          LPWSTR wbuf = (LPWSTR) __PHYSFS_smallAlloc(bufsize * sizeof (WCHAR));\n  541:         BAIL_IF_MACRO(wbuf == NULL, ERR_OUT_OF_MEMORY, NULL);\n  542          if (pGetUserNameW(wbuf, &bufsize) == 0)  /* ?! */\n  543              __PHYSFS_setError(winApiStrError());\n  ...\n  554  {\n  555      char *retval = (char *) allocator.Malloc(strlen(userDir) + 1);\n  556:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  557      strcpy(retval, userDir); /* calculated at init time. */\n  558      return(retval);\n  ...\n  568  static int doPlatformExists(LPWSTR wpath)\n  569  {\n  570:     BAIL_IF_MACRO\n  571      (\n  572          pGetFileAttributesW(wpath) == PHYSFS_INVALID_FILE_ATTRIBUTES,\n  ...\n  582      LPWSTR wpath;\n  583      UTF8_TO_UNICODE_STACK_MACRO(wpath, fname);\n  584:     BAIL_IF_MACRO(wpath == NULL, ERR_OUT_OF_MEMORY, 0);\n  585      retval = doPlatformExists(wpath);\n  586      __PHYSFS_smallFree(wpath);\n  ...\n  611  \n  612      /* no unicode entry points? Probably no symlinks. */\n  613:     BAIL_IF_MACRO(pFindFirstFileW == NULL, NULL, 0);\n  614  \n  615      UTF8_TO_UNICODE_STACK_MACRO(wpath, fname);\n  616:     BAIL_IF_MACRO(wpath == NULL, ERR_OUT_OF_MEMORY, 0);\n  617  \n  618      /* !!! FIXME: filter wildcard chars? */\n  ...\n  634      LPWSTR wpath;\n  635      UTF8_TO_UNICODE_STACK_MACRO(wpath, fname);\n  636:     BAIL_IF_MACRO(wpath == NULL, ERR_OUT_OF_MEMORY, 0);\n  637      retval = ((pGetFileAttributesW(wpath) & FILE_ATTRIBUTE_DIRECTORY) != 0);\n  638      __PHYSFS_smallFree(wpath);\n  ...\n  651      char *p;\n  652  \n  653:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  654  \n  655      if (prepend)\n  ...\n  784      buflen = pGetCurrentDirectoryW(buflen, NULL);\n  785      wbuf = (WCHAR *) __PHYSFS_smallAlloc((buflen + 2) * sizeof (WCHAR));\n  786:     BAIL_IF_MACRO(wbuf == NULL, ERR_OUT_OF_MEMORY, NULL);\n  787      pGetCurrentDirectoryW(buflen, wbuf);\n  788  \n  ...\n  811      char *p = NULL;\n  812  \n  813:     BAIL_IF_MACRO(path == NULL, ERR_INVALID_ARGUMENT, NULL);\n  814:     BAIL_IF_MACRO(*path == '\\0', ERR_INVALID_ARGUMENT, NULL);\n  815  \n  816      retval = (char *) allocator.Malloc(MAX_PATH);\n  817:     BAIL_IF_MACRO(retval == NULL, ERR_OUT_OF_MEMORY, NULL);\n  818  \n  819          /*\n  ...\n  830          {\n  831              allocator.Free(retval);\n  832:             BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n  833          } /* if */\n  834  \n  ...\n  933      rc = pCreateDirectoryW(wpath, NULL);\n  934      __PHYSFS_smallFree(wpath);\n  935:     BAIL_IF_MACRO(rc == 0, winApiStrError(), 0);\n  936      return(1);\n  937  } /* __PHYSFS_platformMkDir */\n  ...\n  947      OSVERSIONINFO osVerInfo;     /* Information about the OS */\n  948      osVerInfo.dwOSVersionInfoSize = sizeof(osVerInfo);\n  949:     BAIL_IF_MACRO(!GetVersionEx(&osVerInfo), winApiStrError(), 0);\n  950      osHasUnicode = (osVerInfo.dwPlatformId != VER_PLATFORM_WIN32_WINDOWS);\n  951      return(1);\n  ...\n  955  int __PHYSFS_platformInit(void)\n  956  {\n  957:     BAIL_IF_MACRO(!getOSInfo(), NULL, 0);\n  958:     BAIL_IF_MACRO(!findApiSymbols(), NULL, 0);\n  959:     BAIL_IF_MACRO(!determineUserDir(), NULL, 0);\n  960      return(1);  /* It's all good */\n  961  } /* __PHYSFS_platformInit */\n  ...\n  989  \n  990      UTF8_TO_UNICODE_STACK_MACRO(wfname, fname);\n  991:     BAIL_IF_MACRO(wfname == NULL, ERR_OUT_OF_MEMORY, NULL);\n  992      fileHandle = pCreateFileW(wfname, mode, FILE_SHARE_READ | FILE_SHARE_WRITE,\n  993                                NULL, creation, FILE_ATTRIBUTE_NORMAL, NULL);\n  994      __PHYSFS_smallFree(wfname);\n  995  \n  996:     BAIL_IF_MACRO\n  997      (\n  998          fileHandle == INVALID_HANDLE_VALUE,\n  ...\n 1004      {\n 1005          CloseHandle(fileHandle);\n 1006:         BAIL_MACRO(ERR_OUT_OF_MEMORY, NULL);\n 1007      } /* if */\n 1008  \n ....\n 1037              CloseHandle(h);\n 1038              allocator.Free(retval);\n 1039:             BAIL_MACRO(err, NULL);\n 1040          } /* if */\n 1041      } /* if */\n ....\n 1056      if(!ReadFile(Handle, buffer, count * size, &CountOfBytesRead, NULL))\n 1057      {\n 1058:         BAIL_MACRO(winApiStrError(), -1);\n 1059      } /* if */\n 1060      else\n ....\n 1080      if(!WriteFile(Handle, buffer, count * size, &CountOfBytesWritten, NULL))\n 1081      {\n 1082:         BAIL_MACRO(winApiStrError(), -1);\n 1083      } /* if */\n 1084      else\n ....\n 1124           (GetLastError() != NO_ERROR) )\n 1125      {\n 1126:         BAIL_MACRO(winApiStrError(), 0);\n 1127      } /* if */\n 1128      \n ....\n 1143           (GetLastError() != NO_ERROR) )\n 1144      {\n 1145:         BAIL_MACRO(winApiStrError(), 0);\n 1146      } /* if */\n 1147      else\n ....\n 1167           (GetLastError() != NO_ERROR) )\n 1168      {\n 1169:         BAIL_MACRO(winApiStrError(), -1);\n 1170      } /* if */\n 1171      else\n ....\n 1200      WinApiFile *fh = ((WinApiFile *) opaque);\n 1201      if (!fh->readonly)\n 1202:         BAIL_IF_MACRO(!FlushFileBuffers(fh->handle), winApiStrError(), 0);\n 1203  \n 1204      return(1);\n ....\n 1209  {\n 1210      HANDLE Handle = ((WinApiFile *) opaque)->handle;\n 1211:     BAIL_IF_MACRO(!CloseHandle(Handle), winApiStrError(), 0);\n 1212      allocator.Free(opaque);\n 1213      return(1);\n ....\n 1220      if (pGetFileAttributesW(wpath) & FILE_ATTRIBUTE_DIRECTORY)\n 1221      {\n 1222:         BAIL_IF_MACRO(!pRemoveDirectoryW(wpath), winApiStrError(), 0);\n 1223      } /* if */\n 1224      else\n 1225      {\n 1226:         BAIL_IF_MACRO(!pDeleteFileW(wpath), winApiStrError(), 0);\n 1227      } /* else */\n 1228  \n ....\n 1236      LPWSTR wpath;\n 1237      UTF8_TO_UNICODE_STACK_MACRO(wpath, path);\n 1238:     BAIL_IF_MACRO(wpath == NULL, ERR_OUT_OF_MEMORY, 0);\n 1239      retval = doPlatformDelete(wpath);\n 1240      __PHYSFS_smallFree(wpath);\n ....\n 1281      struct tm tm;\n 1282  \n 1283:     BAIL_IF_MACRO(!FileTimeToSystemTime(ft, &st_utc), winApiStrError(), -1);\n 1284      tzid = GetTimeZoneInformation(&tzi);\n 1285:     BAIL_IF_MACRO(tzid == TIME_ZONE_ID_INVALID, winApiStrError(), -1);\n 1286  \n 1287      /* (This API is unsupported and fails on non-NT systems. */\n ....\n 1308          /* Convert to something human-readable... */\n 1309          if (!FileTimeToSystemTime(&new_ft, &st_localtz))\n 1310:             BAIL_MACRO(winApiStrError(), -1);\n 1311      } /* if */\n 1312  \n ....\n 1324      /* Convert to a format PhysicsFS can grok... */\n 1325      retval = (PHYSFS_sint64) mktime(&tm);\n 1326:     BAIL_IF_MACRO(retval == -1, strerror(errno), -1);\n 1327      return(retval);\n 1328  } /* FileTimeToPhysfsTime */\n ....\n 1378          const char *err;\n 1379          WinApiFile *f = (WinApiFile *) __PHYSFS_platformOpenRead(fname);\n 1380:         BAIL_IF_MACRO(f == NULL, NULL, -1)\n 1381          rc = GetFileTime(f->handle, NULL, NULL, &ft);\n 1382          err = winApiStrError();\n 1383          CloseHandle(f->handle);\n 1384          allocator.Free(f);\n 1385:         BAIL_IF_MACRO(!rc, err, -1);\n 1386          retval = FileTimeToPhysfsTime(&ft);\n 1387      } /* if */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/deflate.c:\n  438      if (func != configuration_table[level].func && strm->total_in != 0) {\n  439          /* Flush the last buffer: */\n  440:         err = deflate(strm, Z_PARTIAL_FLUSH);\n  441      }\n  442      if (s->level != level) {\n  ...\n  807          }\n  808          if (bstate == block_done) {\n  809:             if (flush == Z_PARTIAL_FLUSH) {\n  810                  _tr_align(s);\n  811:             } else { /* FULL_FLUSH or SYNC_FLUSH */\n  812                  _tr_stored_block(s, (char*)0, 0L, 0);\n  813                  /* For a full flush, this empty block will be recognized\n  814                   * as a special marker by inflate_sync().\n  815                   */\n  816:                 if (flush == Z_FULL_FLUSH) {\n  817                      CLEAR_HASH(s);             /* forget history */\n  818                  }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/deflate.h:\n   34  /* number of literal bytes 0..255 */\n   35  \n   36: #define L_CODES (LITERALS+1+LENGTH_CODES)\n   37  /* number of Literal or Length codes, including the END_BLOCK code */\n   38  \n   ..\n   40  /* number of distance codes */\n   41  \n   42: #define BL_CODES  19\n   43  /* number of codes used to transfer the bit lengths */\n   44  \n   45: #define HEAP_SIZE (2*L_CODES+1)\n   46  /* maximum heap size */\n   47  \n   ..\n  192      struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  193      struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  194:     struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n  195  \n  196      struct tree_desc_s l_desc;               /* desc. for literal tree */\n  ...\n  201      /* number of codes at each bit length for an optimal tree */\n  202  \n  203:     int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  204      int heap_len;               /* number of elements in the heap */\n  205      int heap_max;               /* element of largest frequency */\n  ...\n  208       */\n  209  \n  210:     uch depth[2*L_CODES+1];\n  211      /* Depth of each subtree used as tie breaker for trees of equal frequency\n  212       */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/inflate.c:\n 1305  /*\n 1306     Returns true if inflate is currently at the end of a block generated by\n 1307:    Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n 1308     implementation to provide an additional safety check. PPP uses\n 1309     Z_SYNC_FLUSH but removes the length bytes of the resulting empty stored\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/trees.c:\n   44   */\n   45  \n   46: #define MAX_BL_BITS 7\n   47: /* Bit length codes must not exceed MAX_BL_BITS bits */\n   48  \n   49  #define END_BLOCK 256\n   ..\n   65     = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};\n   66  \n   67: local const int extra_blbits[BL_CODES]/* extra bits for each bit length code */\n   68     = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};\n   69  \n   70: local const uch bl_order[BL_CODES]\n   71     = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};\n   72  /* The lengths of the bit length codes are sent in order of decreasing\n   ..\n   88  /* non ANSI compilers may not accept trees.h */\n   89  \n   90: local ct_data static_ltree[L_CODES+2];\n   91  /* The static literal tree. Since the bit lengths are imposed, there is no\n   92:  * need for the L_CODES extra codes used during heap construction. However\n   93   * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n   94   * below).\n   ..\n  128  \n  129  local static_tree_desc  static_l_desc =\n  130: {static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS};\n  131  \n  132  local static_tree_desc  static_d_desc =\n  ...\n  134  \n  135  local static_tree_desc  static_bl_desc =\n  136: {(const ct_data *)0, extra_blbits, 0,   BL_CODES, MAX_BL_BITS};\n  137  \n  138  /* ===========================================================================\n  ...\n  301       * all ones)\n  302       */\n  303:     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);\n  304  \n  305      /* The static distance tree is trivial: */\n  ...\n  337              \"/* header created automatically with -DGEN_TREES_H */\\n\\n\");\n  338  \n  339:     fprintf(header, \"local const ct_data static_ltree[L_CODES+2] = {\\n\");\n  340:     for (i = 0; i < L_CODES+2; i++) {\n  341          fprintf(header, \"{{%3u},{%3u}}%s\", static_ltree[i].Code,\n  342:                 static_ltree[i].Len, SEPARATOR(i, L_CODES+1, 5));\n  343      }\n  344  \n  ...\n  415  \n  416      /* Initialize the trees. */\n  417:     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;\n  418      for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;\n  419:     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;\n  420  \n  421      s->dyn_ltree[END_BLOCK].Freq = 1;\n  ...\n  678                                  s->depth[n] : s->depth[m]) + 1);\n  679          tree[n].Dad = tree[m].Dad = (ush)node;\n  680: #ifdef DUMP_BL_TREE\n  681          if (tree == s->bl_tree) {\n  682              fprintf(stderr,\"\\nnode %d(%d), sons %d(%d) %d(%d)\",\n  ...\n  820       * 3 but the actual value used is 4.)\n  821       */\n  822:     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {\n  823          if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;\n  824      }\n  ...\n  843  \n  844      Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  845:     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  846              \"too many codes\");\n  847      Tracev((stderr, \"\\nbl counts: \"));\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/trees.h:\n    1  /* header created automatically with -DGEN_TREES_H */\n    2  \n    3: local const ct_data static_ltree[L_CODES+2] = {\n    4  {{ 12},{  8}}, {{140},{  8}}, {{ 76},{  8}}, {{204},{  8}}, {{ 44},{  8}},\n    5  {{172},{  8}}, {{108},{  8}}, {{236},{  8}}, {{ 28},{  8}}, {{156},{  8}},\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/zconf.h:\n  181  #  if defined(M_I86SM) || defined(M_I86MM)\n  182       /* MSC small or medium model */\n  183: #    define SMALL_MEDIUM\n  184  #    ifdef _MSC_VER\n  185  #      define FAR _far\n  ...\n  188  #    endif\n  189  #  endif\n  190: #  if (defined(__SMALL__) || defined(__MEDIUM__))\n  191       /* Turbo C small or medium model */\n  192: #    define SMALL_MEDIUM\n  193  #    ifdef __BORLANDC__\n  194  #      define FAR _far\n  ...\n  264  typedef unsigned long  uLong; /* 32 bits or more */\n  265  \n  266: #ifdef SMALL_MEDIUM\n  267     /* Borland C/C++ and some old MSC versions ignore FAR inside typedef */\n  268  #  define Bytef Byte FAR\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/zlib.h:\n  161  \n  162  #define Z_NO_FLUSH      0\n  163: #define Z_PARTIAL_FLUSH 1 /* will be removed, use Z_SYNC_FLUSH instead */\n  164  #define Z_SYNC_FLUSH    2\n  165: #define Z_FULL_FLUSH    3\n  166  #define Z_FINISH        4\n  167  #define Z_BLOCK         5\n  ...\n  281    algorithms and so it should be used only when necessary.\n  282  \n  283:     If flush is set to Z_FULL_FLUSH, all output is flushed as with\n  284    Z_SYNC_FLUSH, and the compression state is reset so that decompression can\n  285    restart from this point if previous compressed data has been damaged or if\n  286:   random access is desired. Using Z_FULL_FLUSH too often can seriously degrade\n  287    compression.\n  288  \n  ...\n  290    with the same value of the flush parameter and more output space (updated\n  291    avail_out), until the flush is complete (deflate returns with non-zero\n  292:   avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that\n  293    avail_out is greater than six to avoid repeated flush markers due to\n  294    avail_out == 0 on return.\n  ...\n  759  /*\n  760      Skips invalid compressed data until a full flush point (see above the\n  761:   description of deflate with Z_FULL_FLUSH) can be found, or until all\n  762    available input is skipped. No output is provided.\n  763  \n  ...\n 1343  \n 1344  \n 1345: #if !defined(ZUTIL_H) && !defined(NO_DUMMY_DECL)\n 1346      struct internal_state {int dummy;}; /* hack for buggy compilers */\n 1347  #endif\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/physfs-2.0.2/zlib123/zutil.h:\n   11  /* @(#) $Id$ */\n   12  \n   13: #ifndef ZUTIL_H\n   14: #define ZUTIL_H\n   15  \n   16  #define ZLIB_INTERNAL\n   ..\n  212  #  define NO_MEMCPY\n  213  #endif\n  214: #if defined(SMALL_MEDIUM) && !defined(_MSC_VER) && !defined(__SC__)\n  215   /* Use our own functions for small and medium model with MSC <= 5.0.\n  216    * You may have to use the same strategy for Borland C (untested).\n  ...\n  223  #endif\n  224  #ifdef HAVE_MEMCPY\n  225: #  ifdef SMALL_MEDIUM /* MSDOS small or medium model */\n  226  #    define zmemcpy _fmemcpy\n  227  #    define zmemcmp _fmemcmp\n  ...\n  267  #define TRY_FREE(s, p) {if (p) ZFREE(s, p);}\n  268  \n  269: #endif /* ZUTIL_H */\n  270  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/audio.c:\n   49  static float music_vol   = 1.0f;\n   50  \n   51: static SDL_AudioSpec spec;\n   52  \n   53  static struct voice *music  = NULL;\n   ..\n   71  static int voice_step(struct voice *V, float volume, Uint8 *stream, int length)\n   72  {\n   73: #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n   74      int order = 1;\n   75  #else\n   ..\n  269          /* Start the audio thread. */\n  270  \n  271:         if (SDL_OpenAudio(&spec, NULL) == 0)\n  272          {\n  273              audio_state = 1;\n  274:             SDL_PauseAudio(0);\n  275          }\n  276:         else fprintf(stderr, \"%s\\n\", SDL_GetError());\n  277      }\n  278  \n  ...\n  287      /* Halt the audio thread. */\n  288  \n  289:     SDL_CloseAudio();\n  290  \n  291      /* Release the input buffer. */\n  ...\n  304          /* If we're already playing this sound, preempt the running copy. */\n  305  \n  306:         SDL_LockAudio();\n  307          {\n  308              for (V = voices; V; V = V->next)\n  ...\n  316                      if (V->amp < 0.0) V->amp = 0.0;\n  317  \n  318:                     SDL_UnlockAudio();\n  319                      return;\n  320                  }\n  321          }\n  322:         SDL_UnlockAudio();\n  323  \n  324          /* Create a new voice structure. */\n  ...\n  328          /* Add it to the list of sounding voices. */\n  329  \n  330:         SDL_LockAudio();\n  331          {\n  332              V->next = voices;\n  333              voices  = V;\n  334          }\n  335:         SDL_UnlockAudio();\n  336      }\n  337  }\n  ...\n  345          audio_music_stop();\n  346  \n  347:         SDL_LockAudio();\n  348          {\n  349              if ((music = voice_init(filename, 0.0f)))\n  ...\n  352              }\n  353          }\n  354:         SDL_UnlockAudio();\n  355      }\n  356  }\n  ...\n  360      if (audio_state)\n  361      {\n  362:         SDL_LockAudio();\n  363          {\n  364              if ((queue = voice_init(filename, 0.0f)))\n  ...\n  370              }\n  371          }\n  372:         SDL_UnlockAudio();\n  373      }\n  374  }\n  ...\n  378      if (audio_state)\n  379      {\n  380:         SDL_LockAudio();\n  381          {\n  382              if (music)\n  ...\n  386              music = NULL;\n  387          }\n  388:         SDL_UnlockAudio();\n  389      }\n  390  }\n  ...\n  394  void audio_music_fade_out(float t)\n  395  {\n  396:     SDL_LockAudio();\n  397      {\n  398          if (music) music->damp = -1.0f / (AUDIO_RATE * t);\n  399      }\n  400:     SDL_UnlockAudio();\n  401  }\n  402  \n  403  void audio_music_fade_in(float t)\n  404  {\n  405:     SDL_LockAudio();\n  406      {\n  407          if (music) music->damp = +1.0f / (AUDIO_RATE * t);\n  408      }\n  409:     SDL_UnlockAudio();\n  410  }\n  411  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/ball.c:\n   80  void ball_init(void)\n   81  {\n   82:     char *solid_file = concat_string(config_get_s(CONFIG_BALL_FILE),\n   83                                       \"-solid.sol\", NULL);\n   84:     char *inner_file = concat_string(config_get_s(CONFIG_BALL_FILE),\n   85                                       \"-inner.sol\", NULL);\n   86:     char *outer_file = concat_string(config_get_s(CONFIG_BALL_FILE),\n   87                                       \"-outer.sol\", NULL);\n   88  \n   ..\n  131          if (solid_alpha < 1.0f)\n  132          {\n  133:             glEnable(GL_ALPHA_TEST);\n  134:             glAlphaFunc(GL_GEQUAL, solid_alpha);\n  135          }\n  136  \n  ...\n  145              if (solid.base.rc)\n  146              {\n  147:                 if (test == 0) glDisable(GL_DEPTH_TEST);\n  148:                 if (mask == 0) glDepthMask(GL_FALSE);\n  149:                 glDisable(GL_LIGHTING);\n  150                  {\n  151                      sol_bill(&solid.draw, rend, ball_bill_M, t);\n  152                  }\n  153:                 glEnable(GL_LIGHTING);\n  154:                 if (mask == 0) glDepthMask(GL_TRUE);\n  155:                 if (test == 0) glEnable(GL_DEPTH_TEST);\n  156              }\n  157  \n  ...\n  163  \n  164          if (solid_alpha < 1.0f)\n  165:             glDisable(GL_ALPHA_TEST);\n  166      }\n  167  }\n  ...\n  180          if (inner_alpha < 1.0f)\n  181          {\n  182:             glEnable(GL_ALPHA_TEST);\n  183:             glAlphaFunc(GL_GEQUAL, inner_alpha);\n  184          }\n  185  \n  ...\n  200          if (inner.base.rc)\n  201          {\n  202:             if (test == 0) glDisable(GL_DEPTH_TEST);\n  203:             if (mask == 0) glDepthMask(GL_FALSE);\n  204:             glDisable(GL_LIGHTING);\n  205              {\n  206                  if (pend)\n  ...\n  210              }\n  211  \n  212:             glEnable(GL_LIGHTING);\n  213:             if (mask == 0) glDepthMask(GL_TRUE);\n  214:             if (test == 0) glEnable(GL_DEPTH_TEST);\n  215          }\n  216  \n  ...\n  219  \n  220          if (inner_alpha < 1.0f)\n  221:             glDisable(GL_ALPHA_TEST);\n  222      }\n  223  }\n  ...\n  236          if (outer_alpha < 1.0f)\n  237          {\n  238:             glEnable(GL_ALPHA_TEST);\n  239:             glAlphaFunc(GL_GEQUAL, outer_alpha);\n  240          }\n  241  \n  ...\n  256          if (outer.base.rc)\n  257          {\n  258:             if (test == 0) glDisable(GL_DEPTH_TEST);\n  259:             if (mask == 0) glDepthMask(GL_FALSE);\n  260:             glDisable(GL_LIGHTING);\n  261              {\n  262                  if (pend)\n  ...\n  265                      sol_bill(&outer.draw, rend, bill_M,      t);\n  266              }\n  267:             glEnable(GL_LIGHTING);\n  268:             if (mask == 0) glDepthMask(GL_TRUE);\n  269:             if (test == 0) glEnable(GL_DEPTH_TEST);\n  270          }\n  271  \n  ...\n  274  \n  275          if (outer_alpha < 1.0f)\n  276:             glDisable(GL_ALPHA_TEST);\n  277      }\n  278  }\n  ...\n  291      if      (inner_flags & F_DRAWCLIP)\n  292      {\n  293:         glEnable(GL_CLIP_PLANE1);\n  294          ball_draw_inner(rend, pend_M, bill_M, pend_bill_M, t);\n  295:         glDisable(GL_CLIP_PLANE1);\n  296  \n  297:         glEnable(GL_CLIP_PLANE2);\n  298          ball_draw_inner(rend, pend_M, bill_M, pend_bill_M, t);\n  299:         glDisable(GL_CLIP_PLANE2);\n  300      }\n  301  \n  ...\n  304      else if (inner_flags & F_DRAWBACK)\n  305      {\n  306:         glCullFace(GL_FRONT);\n  307          ball_draw_inner(rend, pend_M, bill_M, pend_bill_M, t);\n  308:         glCullFace(GL_BACK);\n  309          ball_draw_inner(rend, pend_M, bill_M, pend_bill_M, t);\n  310      }\n  ...\n  329      if      (solid_flags & F_DRAWCLIP)\n  330      {\n  331:         glEnable(GL_CLIP_PLANE1);\n  332          ball_draw_solid(rend, ball_M,                 ball_bill_M, t);\n  333:         glDisable(GL_CLIP_PLANE1);\n  334  \n  335          ball_pass_inner(rend, ball_M, pend_M, bill_M, ball_bill_M, pend_bill_M, t);\n  336  \n  337:         glEnable(GL_CLIP_PLANE2);\n  338          ball_draw_solid(rend, ball_M,                 ball_bill_M, t);\n  339:         glDisable(GL_CLIP_PLANE2);\n  340      }\n  341  \n  ...\n  344      else if (solid_flags & F_DRAWBACK)\n  345      {\n  346:         glCullFace(GL_FRONT);\n  347          ball_draw_solid(rend, ball_M,                 ball_bill_M, t);\n  348:         glCullFace(GL_BACK);\n  349  \n  350          ball_pass_inner(rend, ball_M, pend_M, bill_M, ball_bill_M, pend_bill_M, t);\n  ...\n  372      if      (outer_flags & F_DRAWCLIP)\n  373      {\n  374:         glEnable(GL_CLIP_PLANE1);\n  375          ball_draw_outer(rend,         pend_M, bill_M,              pend_bill_M, t);\n  376:         glDisable(GL_CLIP_PLANE1);\n  377  \n  378          ball_pass_solid(rend, ball_M, pend_M, bill_M, ball_bill_M, pend_bill_M, t);\n  379  \n  380:         glEnable(GL_CLIP_PLANE2);\n  381          ball_draw_outer(rend,         pend_M, bill_M,              pend_bill_M, t);\n  382:         glDisable(GL_CLIP_PLANE2);\n  383      }\n  384  \n  ...\n  387      else if (outer_flags & F_DRAWBACK)\n  388      {\n  389:         glCullFace(GL_FRONT);\n  390          ball_draw_outer(rend,         pend_M, bill_M,              pend_bill_M, t);\n  391:         glCullFace(GL_BACK);\n  392  \n  393          ball_pass_solid(rend, ball_M, pend_M, bill_M, ball_bill_M, pend_bill_M, t);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/ball.h:\n   13   */\n   14  \n   15: #ifndef BALL_H\n   16: #define BALL_H\n   17  \n   18  #include \"solid_draw.h\"\n   ..\n   20  /*---------------------------------------------------------------------------*/\n   21  \n   22: #define BALL_FUDGE 0.001f\n   23  \n   24  void ball_init(void);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/base_config.c:\n   36          return arg_data_path;\n   37  \n   38:     if ((env = getenv(\"NEVERBALL_DATA\")))\n   39          return env;\n   40  \n   ..\n   54      static char path[MAX_PATH];\n   55  \n   56:     if (SHGetFolderPath(NULL, CSIDL_PERSONAL, NULL, 0, path) == S_OK)\n   57          return path;\n   58      else\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/base_config.h:\n   22  \n   23  #include <stdio.h>\n   24: #include <SDL_endian.h>\n   25  \n   26  /*---------------------------------------------------------------------------*/\n   ..\n   59  /*---------------------------------------------------------------------------*/\n   60  \n   61: #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n   62  #define RMASK 0xFF000000\n   63  #define GMASK 0x00FF0000\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/binary.c:\n   17  #include <string.h>\n   18  \n   19: #include <SDL_endian.h>\n   20  \n   21  #include \"fs.h\"\n   ..\n   27      unsigned char *p = (unsigned char *) &f;\n   28  \n   29: #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n   30      fs_putc((int) p[3], fout);\n   31      fs_putc((int) p[2], fout);\n   ..\n   44      unsigned char *p = (unsigned char *) &i;\n   45  \n   46: #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n   47      fs_putc((int) p[3], fout);\n   48      fs_putc((int) p[2], fout);\n   ..\n   61      unsigned char *p = (unsigned char *) &s;\n   62  \n   63: #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n   64      fs_putc((int) p[1], fout);\n   65      fs_putc((int) p[0], fout);\n   ..\n   84      unsigned char *p = (unsigned char *) f;\n   85  \n   86: #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n   87      p[3] = (unsigned char) fs_getc(fin);\n   88      p[2] = (unsigned char) fs_getc(fin);\n   ..\n  101      unsigned char *p = (unsigned char *) i;\n  102  \n  103: #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n  104      p[3] = (unsigned char) fs_getc(fin);\n  105      p[2] = (unsigned char) fs_getc(fin);\n  ...\n  118      unsigned char *p = (unsigned char *) s;\n  119  \n  120: #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n  121      p[1] = (unsigned char) fs_getc(fin);\n  122      p[0] = (unsigned char) fs_getc(fin);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/cmd.c:\n  279  #define BYTES 0\n  280  \n  281: PUT_FUNC(CMD_GOAL_OPEN) { } END_FUNC;\n  282: GET_FUNC(CMD_GOAL_OPEN) { } END_FUNC;\n  283  \n  284  /*---------------------------------------------------------------------------*/\n  ...\n  355  #define BYTES FLOAT_BYTES\n  356  \n  357: PUT_FUNC(CMD_BALL_RADIUS)\n  358  {\n  359      put_float(fp, cmd->ballradius.r);\n  ...\n  361  END_FUNC;\n  362  \n  363: GET_FUNC(CMD_BALL_RADIUS)\n  364  {\n  365      get_float(fp, &cmd->ballradius.r);\n  ...\n  388  #define BYTES ARRAY_BYTES(3)\n  389  \n  390: PUT_FUNC(CMD_BALL_POSITION)\n  391  {\n  392      put_array(fp, cmd->ballpos.p, 3);\n  ...\n  394  END_FUNC;\n  395  \n  396: GET_FUNC(CMD_BALL_POSITION)\n  397  {\n  398      get_array(fp, cmd->ballpos.p, 3);\n  ...\n  405  #define BYTES (ARRAY_BYTES(3) + ARRAY_BYTES(3))\n  406  \n  407: PUT_FUNC(CMD_BALL_BASIS)\n  408  {\n  409      put_array(fp, cmd->ballbasis.e[0], 3);\n  ...\n  412  END_FUNC;\n  413  \n  414: GET_FUNC(CMD_BALL_BASIS)\n  415  {\n  416      get_array(fp, cmd->ballbasis.e[0], 3);\n  ...\n  424  #define BYTES (ARRAY_BYTES(3) + ARRAY_BYTES(3))\n  425  \n  426: PUT_FUNC(CMD_BALL_PEND_BASIS)\n  427  {\n  428      put_array(fp, cmd->ballpendbasis.E[0], 3);\n  ...\n  431  END_FUNC;\n  432  \n  433: GET_FUNC(CMD_BALL_PEND_BASIS)\n  434  {\n  435      get_array(fp, cmd->ballpendbasis.E[0], 3);\n  ...\n  657          PUT_CASE(CMD_BODY_PATH);\n  658          PUT_CASE(CMD_BODY_TIME);\n  659:         PUT_CASE(CMD_GOAL_OPEN);\n  660          PUT_CASE(CMD_SWCH_ENTER);\n  661          PUT_CASE(CMD_SWCH_TOGGLE);\n  662          PUT_CASE(CMD_SWCH_EXIT);\n  663          PUT_CASE(CMD_UPDATES_PER_SECOND);\n  664:         PUT_CASE(CMD_BALL_RADIUS);\n  665          PUT_CASE(CMD_CLEAR_ITEMS);\n  666          PUT_CASE(CMD_CLEAR_BALLS);\n  667:         PUT_CASE(CMD_BALL_POSITION);\n  668:         PUT_CASE(CMD_BALL_BASIS);\n  669:         PUT_CASE(CMD_BALL_PEND_BASIS);\n  670          PUT_CASE(CMD_VIEW_POSITION);\n  671          PUT_CASE(CMD_VIEW_CENTER);\n  ...\n  724              GET_CASE(CMD_BODY_PATH);\n  725              GET_CASE(CMD_BODY_TIME);\n  726:             GET_CASE(CMD_GOAL_OPEN);\n  727              GET_CASE(CMD_SWCH_ENTER);\n  728              GET_CASE(CMD_SWCH_TOGGLE);\n  729              GET_CASE(CMD_SWCH_EXIT);\n  730              GET_CASE(CMD_UPDATES_PER_SECOND);\n  731:             GET_CASE(CMD_BALL_RADIUS);\n  732              GET_CASE(CMD_CLEAR_ITEMS);\n  733              GET_CASE(CMD_CLEAR_BALLS);\n  734:             GET_CASE(CMD_BALL_POSITION);\n  735:             GET_CASE(CMD_BALL_BASIS);\n  736:             GET_CASE(CMD_BALL_PEND_BASIS);\n  737              GET_CASE(CMD_VIEW_POSITION);\n  738              GET_CASE(CMD_VIEW_CENTER);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/cmd.h:\n   47      CMD_BODY_PATH,\n   48      CMD_BODY_TIME,\n   49:     CMD_GOAL_OPEN,\n   50      CMD_SWCH_ENTER,\n   51      CMD_SWCH_TOGGLE,\n   52      CMD_SWCH_EXIT,\n   53      CMD_UPDATES_PER_SECOND,\n   54:     CMD_BALL_RADIUS,\n   55      CMD_CLEAR_ITEMS,\n   56      CMD_CLEAR_BALLS,\n   57:     CMD_BALL_POSITION,\n   58:     CMD_BALL_BASIS,\n   59:     CMD_BALL_PEND_BASIS,\n   60      CMD_VIEW_POSITION,\n   61      CMD_VIEW_CENTER,\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/common.h:\n   28  \n   29  #ifdef __GNUC__\n   30: #define NULL_TERMINATED __attribute__ ((__sentinel__))\n   31  #else\n   32: #define NULL_TERMINATED\n   33  #endif\n   34  \n   ..\n   62  \n   63  char *dupe_string(const char *);\n   64: char *concat_string(const char *first, ...) NULL_TERMINATED;\n   65  \n   66  #ifdef strdup\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/config.c:\n  103  \n  104  int CONFIG_PLAYER;\n  105: int CONFIG_BALL_FILE;\n  106  int CONFIG_WIIMOTE_ADDR;\n  107  int CONFIG_REPLAY_NAME;\n  ...\n  136      { &CONFIG_MOUSE_CAMERA_2,      \"mouse_camera_2\",      0 },\n  137      { &CONFIG_MOUSE_CAMERA_3,      \"mouse_camera_3\",      0 },\n  138:     { &CONFIG_MOUSE_CAMERA_TOGGLE, \"mouse_camera_toggle\", SDL_BUTTON_MIDDLE },\n  139:     { &CONFIG_MOUSE_CAMERA_L,      \"mouse_camera_l\",      SDL_BUTTON_LEFT },\n  140:     { &CONFIG_MOUSE_CAMERA_R,      \"mouse_camera_r\",      SDL_BUTTON_RIGHT },\n  141  \n  142      { &CONFIG_NICE,         \"nice\",         0 },\n  ...\n  203  } option_s[] = {\n  204      { &CONFIG_PLAYER,       \"player\",       \"\" },\n  205:     { &CONFIG_BALL_FILE,    \"ball_file\",    \"ball/basic-ball/basic-ball\" },\n  206      { &CONFIG_WIIMOTE_ADDR, \"wiimote_addr\", \"\" },\n  207      { &CONFIG_REPLAY_NAME,  \"replay_name\",  \"%s-%l\" }\n  ...\n  219  \n  220      for (c = 0; c < SDLK_LAST; c++)\n  221:         if (strcmp(s, SDL_GetKeyName((SDLKey) c)) == 0)\n  222          {\n  223              config_set_d(i, c);\n  ...\n  233          config_set_d(i, 0);\n  234      else if (strcmp(s, \"left\") == 0)\n  235:         config_set_d(i, SDL_BUTTON_LEFT);\n  236      else if (strcmp(s, \"right\") == 0)\n  237:         config_set_d(i, SDL_BUTTON_RIGHT);\n  238      else if (strcmp(s, \"wheelup\") == 0)\n  239:         config_set_d(i, SDL_BUTTON_WHEELUP);\n  240      else if (strcmp(s, \"middle\") == 0)\n  241:         config_set_d(i, SDL_BUTTON_MIDDLE);\n  242      else if (strcmp(s, \"wheeldown\") == 0)\n  243:         config_set_d(i, SDL_BUTTON_WHEELDOWN);\n  244      else\n  245          config_set_d(i, atoi(s));\n  ...\n  255      {\n  256      case 0:                    return \"none\";      break;\n  257:     case SDL_BUTTON_LEFT:      return \"left\";      break;\n  258:     case SDL_BUTTON_RIGHT:     return \"right\";     break;\n  259:     case SDL_BUTTON_WHEELUP:   return \"wheelup\";   break;\n  260:     case SDL_BUTTON_MIDDLE:    return \"middle\";    break;\n  261:     case SDL_BUTTON_WHEELDOWN: return \"wheeldown\"; break;\n  262      default:                   return buff;        break;\n  263      }\n  ...\n  439                       i == CONFIG_KEY_ROTATE_FAST)\n  440              {\n  441:                 s = SDL_GetKeyName((SDLKey) option_d[i].cur);\n  442              }\n  443              else if (i == CONFIG_CHEAT)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/config.h:\n  109  \n  110  extern int CONFIG_PLAYER;\n  111: extern int CONFIG_BALL_FILE;\n  112  extern int CONFIG_WIIMOTE_ADDR;\n  113  extern int CONFIG_REPLAY_NAME;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_jpg.c:\n  221    if (cinfo->src == NULL) {	/* first time for this JPEG object? */\n  222      cinfo->src = (struct jpeg_source_mgr *)\n  223:       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,\n  224  				  sizeof (my_source_mgr));\n  225      src = (my_src_ptr) cinfo->src;\n  226      src->buffer = (JOCTET *)\n  227:       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,\n  228  				  INPUT_BUF_SIZE * sizeof (JOCTET));\n  229    }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_rwops.c:\n   15  #include \"fs_rwops.h\"\n   16  \n   17: static int rwops_seek(SDL_RWops *ctx, int offset, int whence)\n   18  {\n   19      fs_file fh = ctx->hidden.unknown.data1;\n   ..\n   21  }\n   22  \n   23: static int rwops_read(SDL_RWops *ctx, void *ptr, int size, int maxnum)\n   24  {\n   25      return fs_read(ptr, size, maxnum, ctx->hidden.unknown.data1);\n   26  }\n   27  \n   28: static int rwops_write(SDL_RWops *ctx, const void *ptr, int size, int num)\n   29  {\n   30      return fs_write(ptr, size, num, ctx->hidden.unknown.data1);\n   31  }\n   32  \n   33: static int rwops_close(SDL_RWops *ctx)\n   34  {\n   35      fs_file fh = ctx->hidden.unknown.data1;\n   ..\n   38          return -1;\n   39  \n   40:     SDL_FreeRW(ctx);\n   41      return 0;\n   42  }\n   43  \n   44: SDL_RWops *fs_rwops_make(fs_file fh)\n   45  {\n   46:     SDL_RWops *ctx;\n   47  \n   48:     if ((ctx = SDL_AllocRW()))\n   49      {\n   50          ctx->seek  = rwops_seek;\n   ..\n   59  }\n   60  \n   61: SDL_RWops *fs_rwops_open(const char *path, const char *mode)\n   62  {\n   63      fs_file fh;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_rwops.h:\n    2  #define FS_RWOPS_H\n    3  \n    4: #include <SDL_rwops.h>\n    5  #include \"fs.h\"\n    6  \n    7: SDL_RWops *fs_rwops_make(fs_file);\n    8: SDL_RWops *fs_rwops_open(const char *path, const char *mode);\n    9  \n   10  #endif\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/geom.c:\n   41      1,\n   42      {\n   43:         { GL_TEXTURE0, TEX_STAGE_TEXTURE }\n   44      }\n   45  };\n   ..\n   49      2,\n   50      {\n   51:         { GL_TEXTURE0, TEX_STAGE_SHADOW },\n   52:         { GL_TEXTURE1, TEX_STAGE_TEXTURE }\n   53      }\n   54  };\n   ..\n   58      3,\n   59      {\n   60:         { GL_TEXTURE0, TEX_STAGE_SHADOW },\n   61:         { GL_TEXTURE1, TEX_STAGE_CLIP },\n   62:         { GL_TEXTURE2, TEX_STAGE_TEXTURE }\n   63      }\n   64  };\n   ..\n   68      2,\n   69      {\n   70:         { GL_TEXTURE0, TEX_STAGE_SHADOW },\n   71:         { GL_TEXTURE1, TEX_STAGE_TEXTURE }\n   72      }\n   73  };\n   ..\n   80          if (enable)\n   81          {\n   82:             glEnable(GL_TEXTURE_2D);\n   83  \n   84              /* Modulate is the default mode. */\n   85  \n   86:             glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);\n   87  \n   88:             glMatrixMode(GL_TEXTURE);\n   89              glLoadIdentity();\n   90:             glMatrixMode(GL_MODELVIEW);\n   91          }\n   92          else\n   93          {\n   94:             glDisable(GL_TEXTURE_2D);\n   95          }\n   96          break;\n   ..\n  105          if (enable)\n  106          {\n  107:             glDisable(GL_TEXTURE_2D);\n  108  \n  109              /* Modulate primary color and shadow alpha. */\n  110  \n  111:             glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);\n  112  \n  113:             glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_MODULATE);\n  114:             glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_RGB, GL_PREVIOUS);\n  115:             glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_RGB, GL_TEXTURE);\n  116:             glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_RGB, GL_SRC_COLOR);\n  117:             glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_ONE_MINUS_SRC_ALPHA);\n  118  \n  119              /* Copy incoming alpha. */\n  120  \n  121:             glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_REPLACE);\n  122:             glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_ALPHA, GL_PREVIOUS);\n  123:             glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);\n  124  \n  125:             glMatrixMode(GL_TEXTURE);\n  126              glLoadIdentity();\n  127:             glMatrixMode(GL_MODELVIEW);\n  128          }\n  129          else\n  130          {\n  131:             glDisable(GL_TEXTURE_2D);\n  132          }\n  133          break;\n  ...\n  136          if (enable)\n  137          {\n  138:             glDisable(GL_TEXTURE_2D);\n  139  \n  140              /* Interpolate shadowed and non-shadowed primary color. */\n  141  \n  142:             glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE);\n  143  \n  144:             glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_RGB, GL_INTERPOLATE);\n  145:             glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_RGB, GL_PREVIOUS);\n  146:             glTexEnvi(GL_TEXTURE_ENV, GL_SRC1_RGB, GL_PRIMARY_COLOR);\n  147:             glTexEnvi(GL_TEXTURE_ENV, GL_SRC2_RGB, GL_TEXTURE);\n  148:             glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_RGB, GL_SRC_COLOR);\n  149:             glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND1_RGB, GL_SRC_COLOR);\n  150:             glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND2_RGB, GL_SRC_ALPHA);\n  151  \n  152              /* Copy incoming alpha. */\n  153  \n  154:             glTexEnvi(GL_TEXTURE_ENV, GL_COMBINE_ALPHA, GL_REPLACE);\n  155:             glTexEnvi(GL_TEXTURE_ENV, GL_SRC0_ALPHA, GL_PREVIOUS);\n  156:             glTexEnvi(GL_TEXTURE_ENV, GL_OPERAND0_ALPHA, GL_SRC_ALPHA);\n  157  \n  158:             glMatrixMode(GL_TEXTURE);\n  159              glLoadIdentity();\n  160:             glMatrixMode(GL_MODELVIEW);\n  161          }\n  162          else\n  163          {\n  164:             glDisable(GL_TEXTURE_2D);\n  165          }\n  166          break;\n  ...\n  185          if (enable)\n  186          {\n  187:             glDisable(GL_TEXTURE_2D);\n  188  \n  189              /* Make shadow texture override everything else. */\n  190  \n  191:             glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);\n  192          }\n  193          else\n  194          {\n  195:             glDisable(GL_TEXTURE_2D);\n  196          }\n  197          break;\n  ...\n  328      {\n  329          back.draw.mv[0].o = make_image_from_file(name);\n  330:         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n  331          back_state = 1;\n  332      }\n  ...\n  345  static void jump_part_draw(struct s_rend *rend, GLfloat s, GLfloat a)\n  346  {\n  347:     glMatrixMode(GL_TEXTURE);\n  348      glTranslatef(s, 0.0f, 0.0f);\n  349:     glMatrixMode(GL_MODELVIEW);\n  350  \n  351      glRotatef(a, 0.0f, 1.0f, 0.0f);\n  ...\n  356  static void goal_part_draw(struct s_rend *rend, GLfloat s)\n  357  {\n  358:     glMatrixMode(GL_TEXTURE);\n  359      glTranslatef(0.0f, -s, 0.0f);\n  360:     glMatrixMode(GL_MODELVIEW);\n  361  \n  362      sol_draw(&goal.draw, rend, 1, 1);\n  ...\n  380          goal_part_draw(rend, t * 0.10f);\n  381  \n  382:         glMatrixMode(GL_TEXTURE);\n  383          glLoadIdentity();\n  384:         glMatrixMode(GL_MODELVIEW);\n  385  \n  386          glColor4f(1.0f, 1.0f, 1.0f, 1.0f);\n  ...\n  408          jump_part_draw(rend, t * 0.25f, t * 360.0f);\n  409  \n  410:         glMatrixMode(GL_TEXTURE);\n  411          glLoadIdentity();\n  412:         glMatrixMode(GL_MODELVIEW);\n  413  \n  414          glColor4f(1.0f, 1.0f, 1.0f, 1.0f);\n  ...\n  463          GLfloat dz = 180.0f * fsinf(t / 12.0f);\n  464  \n  465:         glDisable(GL_DEPTH_TEST);\n  466:         glDisable(GL_CULL_FACE);\n  467:         glDisable(GL_LIGHTING);\n  468:         glDepthMask(GL_FALSE);\n  469          {\n  470              glScalef(-BACK_DIST, BACK_DIST, -BACK_DIST);\n  ...\n  474              sol_draw(&back.draw, rend, 1, 1);\n  475          }\n  476:         glDepthMask(GL_TRUE);\n  477:         glEnable(GL_LIGHTING);\n  478:         glEnable(GL_CULL_FACE);\n  479:         glEnable(GL_DEPTH_TEST);\n  480      }\n  481      glPopMatrix();\n  ...\n  517      if (config_get_d(CONFIG_SHADOW) == 2)\n  518      {\n  519:         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n  520:         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n  521      }\n  522  \n  ...\n  524  \n  525      glGenTextures(1, &clip_text);\n  526:     glBindTexture(GL_TEXTURE_2D, clip_text);\n  527  \n  528:     glTexImage2D(GL_TEXTURE_2D, 0,\n  529:                  GL_LUMINANCE_ALPHA, 1, 2, 0,\n  530:                  GL_LUMINANCE_ALPHA, GL_UNSIGNED_BYTE, clip_data);\n  531  \n  532:     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n  533:     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n  534  \n  535:     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n  536:     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n  537  }\n  538  \n  ...\n  547      if (tex_env_stage(TEX_STAGE_SHADOW))\n  548      {\n  549:         glEnable(GL_TEXTURE_2D);\n  550:         glBindTexture(GL_TEXTURE_2D, shad_text);\n  551  \n  552          if (tex_env_stage(TEX_STAGE_CLIP))\n  553          {\n  554:             glBindTexture(GL_TEXTURE_2D, clip_text);\n  555:             glEnable(GL_TEXTURE_2D);\n  556          }\n  557  \n  ...\n  564      if (tex_env_stage(TEX_STAGE_SHADOW))\n  565      {\n  566:         glBindTexture(GL_TEXTURE_2D, 0);\n  567:         glDisable(GL_TEXTURE_2D);\n  568  \n  569          if (tex_env_stage(TEX_STAGE_CLIP))\n  570          {\n  571:             glBindTexture(GL_TEXTURE_2D, 0);\n  572:             glDisable(GL_TEXTURE_2D);\n  573          }\n  574  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/geom.h:\n   13  #define JUMP_HEIGHT   2.00f\n   14  #define SWCH_HEIGHT   2.00f\n   15: #define GOAL_HEIGHT   3.00f\n   16: #define GOAL_SPARKS  64\n   17  \n   18  /*---------------------------------------------------------------------------*/\n   ..\n   71  extern const struct tex_env *curr_tex_env;\n   72  \n   73: void tex_env_select(const struct tex_env *, ...) NULL_TERMINATED;\n   74  void tex_env_active(const struct tex_env *);\n   75  int  tex_env_stage(int);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/glext.c:\n   48      /* Search for the given string in the OpenGL extension strings. */\n   49  \n   50:     for (haystack = glGetString(GL_EXTENSIONS); *haystack; haystack++)\n   51      {\n   52          for (c = (const GLubyte *) needle; *c && *haystack; c++, haystack++)\n   ..\n   73  /*---------------------------------------------------------------------------*/\n   74  \n   75: #define SDL_GL_GFPA(fun, str) do {       \\\n   76:     ptr = SDL_GL_GetProcAddress(str);    \\\n   77      memcpy(&fun, &ptr, sizeof (void *)); \\\n   78  } while(0)\n   ..\n   89  \n   90      gli.max_texture_units = 1;\n   91:     glGetIntegerv(GL_MAX_TEXTURE_SIZE, &gli.max_texture_size);\n   92  \n   93  #if !ENABLE_OPENGLES\n   ..\n   96      if (glext_assert(\"ARB_multitexture\"))\n   97      {\n   98:         glGetIntegerv(GL_MAX_TEXTURE_UNITS, &gli.max_texture_units);\n   99  \n  100:         SDL_GL_GFPA(glClientActiveTexture_, \"glClientActiveTextureARB\");\n  101:         SDL_GL_GFPA(glActiveTexture_,       \"glActiveTextureARB\");\n  102  \n  103          gli.multitexture = 1;\n  ...\n  106      if (glext_assert(\"ARB_vertex_buffer_object\"))\n  107      {\n  108:         SDL_GL_GFPA(glGenBuffers_,          \"glGenBuffersARB\");\n  109:         SDL_GL_GFPA(glBindBuffer_,          \"glBindBufferARB\");\n  110:         SDL_GL_GFPA(glBufferData_,          \"glBufferDataARB\");\n  111:         SDL_GL_GFPA(glBufferSubData_,       \"glBufferSubDataARB\");\n  112:         SDL_GL_GFPA(glDeleteBuffers_,       \"glDeleteBuffersARB\");\n  113:         SDL_GL_GFPA(glIsBuffer_,            \"glIsBufferARB\");\n  114  \n  115          gli.vertex_buffer_object = 1;\n  ...\n  118      if (glext_assert(\"ARB_point_parameters\"))\n  119      {\n  120:         SDL_GL_GFPA(glPointParameterfv_,   \"glPointParameterfvARB\");\n  121  \n  122          gli.point_parameters = 1;\n  ...\n  124  \n  125      if (glext_check(\"GREMEDY_string_marker\"))\n  126:         SDL_GL_GFPA(glStringMarkerGREMEDY_, \"glStringMarkerGREMEDY\");\n  127  \n  128      return (gli.multitexture &&\n  ...\n  132      /* GLES init. */\n  133  \n  134:     glGetIntegerv(GL_MAX_TEXTURE_UNITS, &gli.max_texture_units);\n  135  \n  136      gli.multitexture = 1;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/glext.h:\n   51  /*---------------------------------------------------------------------------*/\n   52  \n   53: #ifndef GL_MULTISAMPLE\n   54: #define GL_MULTISAMPLE                0x809D\n   55  #endif\n   56  \n   57: #ifndef GL_TEXTURE0\n   58: #define GL_TEXTURE0                   0x84C0\n   59  #endif\n   60  \n   61: #ifndef GL_TEXTURE1\n   62: #define GL_TEXTURE1                   0x84C1\n   63  #endif\n   64  \n   65: #ifndef GL_TEXTURE2\n   66: #define GL_TEXTURE2                   0x84C2\n   67  #endif\n   68  \n   69: #ifndef GL_ARRAY_BUFFER\n   70: #define GL_ARRAY_BUFFER               0x8892\n   71  #endif\n   72  \n   73: #ifndef GL_ELEMENT_ARRAY_BUFFER\n   74: #define GL_ELEMENT_ARRAY_BUFFER       0x8893\n   75  #endif\n   76  \n   77: #ifndef GL_STATC_DRAW\n   78: #define GL_STATIC_DRAW                0x88E4\n   79  #endif\n   80  \n   81: #ifndef GL_DYNAMIC_DRAW\n   82: #define GL_DYNAMIC_DRAW               0x88E8\n   83  #endif\n   84  \n   85: #ifndef GL_POINT_SPRITE\n   86: #define GL_POINT_SPRITE               0x8861\n   87  #endif\n   88  \n   89: #ifndef GL_COORD_REPLACE\n   90: #define GL_COORD_REPLACE              0x8862\n   91  #endif\n   92  \n   93: #ifndef GL_POINT_DISTANCE_ATTENUATIAN\n   94: #define GL_POINT_DISTANCE_ATTENUATION 0x8129\n   95  #endif\n   96  \n   ..\n  107  /* they need it or not.                                                      */\n  108  \n  109: #if defined(GL_VERSION_ES_CM_1_0) || \\\n  110:     defined(GL_VERSION_ES_CM_1_1) || \\\n  111:     defined(GL_OES_VERSION_1_0)\n  112  \n  113  #define ENABLE_OPENGLES 1\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.c:\n  110  static void      *fontdata;\n  111  static int        fontdatalen;\n  112: static SDL_RWops *fontrwops;\n  113  \n  114  /*---------------------------------------------------------------------------*/\n  ...\n  156  static void draw_enable(GLboolean c, GLboolean u, GLboolean p)\n  157  {\n  158:     glBindBuffer_(GL_ARRAY_BUFFER, vert_obj);\n  159  \n  160      if (c)\n  161      {\n  162:         glEnableClientState(GL_COLOR_ARRAY);\n  163:         glColorPointer   (4, GL_UNSIGNED_BYTE, sizeof (struct vert),\n  164                                    (GLvoid *) offsetof (struct vert, c));\n  165      }\n  166      if (u)\n  167      {\n  168:         glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  169:         glTexCoordPointer(2, GL_FLOAT,         sizeof (struct vert),\n  170                                    (GLvoid *) offsetof (struct vert, u));\n  171      }\n  172      if (p)\n  173      {\n  174:         glEnableClientState(GL_VERTEX_ARRAY);\n  175:         glVertexPointer  (2, GL_SHORT,         sizeof (struct vert),\n  176                                    (GLvoid *) offsetof (struct vert, p));\n  177      }\n  ...\n  180  static void draw_rect(int id)\n  181  {\n  182:     glDrawArrays(GL_TRIANGLE_STRIP, id * WIDGET_VERT,  RECT_VERT);\n  183  }\n  184  \n  185  static void draw_text(int id)\n  186  {\n  187:     glDrawArrays(GL_TRIANGLE_STRIP, id * WIDGET_VERT + RECT_VERT, TEXT_VERT);\n  188  }\n  189  \n  190  static void draw_disable(void)\n  191  {\n  192:     glBindBuffer_(GL_ARRAY_BUFFER, 0);\n  193  \n  194:     glDisableClientState(GL_VERTEX_ARRAY);\n  195:     glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  196:     glDisableClientState(GL_COLOR_ARRAY);\n  197  }\n  198  \n  ...\n  243      /* Copy this off to the VBO. */\n  244  \n  245:     glBindBuffer_   (GL_ARRAY_BUFFER, vert_obj);\n  246:     glBufferSubData_(GL_ARRAY_BUFFER,\n  247                       id * WIDGET_VERT * sizeof (struct vert),\n  248                              RECT_VERT * sizeof (struct vert), v);\n  ...\n  290      /* Copy this off to the VBO. */\n  291  \n  292:     glBindBuffer_   (GL_ARRAY_BUFFER, vert_obj);\n  293:     glBufferSubData_(GL_ARRAY_BUFFER,\n  294                       (id * WIDGET_VERT + RECT_VERT) * sizeof (struct vert),\n  295                                           TEXT_VERT  * sizeof (struct vert), v);\n  ...\n  306      if (!fs_exists(path))\n  307      {\n  308:         fprintf(stderr, L_(\"Font '%s' doesn't exist, trying default font.\\n\"),\n  309                  path);\n  310  \n  ...\n  331          if ((fontdata = fs_load(path, &fontdatalen)))\n  332          {\n  333:             fontrwops = SDL_RWFromConstMem(fontdata, fontdatalen);\n  334  \n  335              /* Load small, medium, and large typefaces. */\n  ...\n  337              font[GUI_SML] = TTF_OpenFontRW(fontrwops, 0, s0);\n  338  \n  339:             SDL_RWseek(fontrwops, 0, SEEK_SET);\n  340              font[GUI_MED] = TTF_OpenFontRW(fontrwops, 0, s1);\n  341  \n  342:             SDL_RWseek(fontrwops, 0, SEEK_SET);\n  343              font[GUI_LRG] = TTF_OpenFontRW(fontrwops, 0, s2);\n  344  \n  ...\n  353              font[GUI_LRG] = NULL;\n  354  \n  355:             fprintf(stderr, L_(\"Could not load font '%s'.\\n\"), path);\n  356          }\n  357  \n  ...\n  369      if (font[GUI_SML]) TTF_CloseFont(font[GUI_SML]);\n  370  \n  371:     if (fontrwops) SDL_RWclose(fontrwops);\n  372      if (fontdata)  free(fontdata);\n  373  \n  ...\n  390  \n  391      glGenBuffers_(1,              &vert_obj);\n  392:     glBindBuffer_(GL_ARRAY_BUFFER, vert_obj);\n  393:     glBufferData_(GL_ARRAY_BUFFER, sizeof (vert_buf), vert_buf, GL_STATIC_DRAW);\n  394:     glBindBuffer_(GL_ARRAY_BUFFER, 0);\n  395  \n  396      /* Cache digit glyphs for HUD rendering. */\n  ...\n 1369                   widget[id].scale);\n 1370  \n 1371:         glBindTexture(GL_TEXTURE_2D, widget[id].image);\n 1372          glColor4ub(gui_wht[0], gui_wht[1], gui_wht[2], gui_wht[3]);\n 1373          draw_rect(id);\n ....\n 1408                  int id = digit_id[i][j % 10];\n 1409  \n 1410:                 glBindTexture(GL_TEXTURE_2D, widget[id].image);\n 1411                  draw_text(id);\n 1412                  glTranslatef((GLfloat) -widget[id].text_w, 0.0f, 0.0f);\n ....\n 1417              /* If the value is zero, just display a zero in place. */\n 1418  \n 1419:             glBindTexture(GL_TEXTURE_2D, widget[digit_id[i][0]].image);\n 1420              draw_text(digit_id[i][0]);\n 1421          }\n ....\n 1462          if (mt > 0)\n 1463          {\n 1464:             glBindTexture(GL_TEXTURE_2D, widget[digit_id[i][mt]].image);\n 1465              draw_text(digit_id[i][mt]);\n 1466              glTranslatef(dx_large, 0.0f, 0.0f);\n 1467          }\n 1468  \n 1469:         glBindTexture(GL_TEXTURE_2D, widget[digit_id[i][mo]].image);\n 1470          draw_text(digit_id[i][mo]);\n 1471          glTranslatef(dx_small, 0.0f, 0.0f);\n ....\n 1473          /* Render the colon. */\n 1474  \n 1475:         glBindTexture(GL_TEXTURE_2D, widget[digit_id[i][10]].image);\n 1476          draw_text(digit_id[i][10]);\n 1477          glTranslatef(dx_small, 0.0f, 0.0f);\n ....\n 1479          /* Render the seconds counter. */\n 1480  \n 1481:         glBindTexture(GL_TEXTURE_2D, widget[digit_id[i][st]].image);\n 1482          draw_text(digit_id[i][st]);\n 1483          glTranslatef(dx_large, 0.0f, 0.0f);\n 1484  \n 1485:         glBindTexture(GL_TEXTURE_2D, widget[digit_id[i][so]].image);\n 1486          draw_text(digit_id[i][so]);\n 1487          glTranslatef(dx_small, 0.0f, 0.0f);\n ....\n 1491          glScalef(0.5f, 0.5f, 1.0f);\n 1492  \n 1493:         glBindTexture(GL_TEXTURE_2D, widget[digit_id[i][ht]].image);\n 1494          draw_text(digit_id[i][ht]);\n 1495          glTranslatef(dx_large, 0.0f, 0.0f);\n 1496  \n 1497:         glBindTexture(GL_TEXTURE_2D, widget[digit_id[i][ho]].image);\n 1498          draw_text(digit_id[i][ho]);\n 1499      }\n ....\n 1514                   widget[id].scale);\n 1515  \n 1516:         glBindTexture(GL_TEXTURE_2D, widget[id].image);\n 1517          draw_text(id);\n 1518      }\n ....\n 1543          video_push_ortho();\n 1544          {\n 1545:             glDisable(GL_LIGHTING);\n 1546:             glDisable(GL_DEPTH_TEST);\n 1547              {\n 1548:                 draw_enable(GL_FALSE, GL_FALSE, GL_TRUE);\n 1549:                 glDisable(GL_TEXTURE_2D);\n 1550                  gui_paint_rect(id, 0);\n 1551  \n 1552:                 draw_enable(GL_TRUE, GL_TRUE, GL_TRUE);\n 1553:                 glEnable(GL_TEXTURE_2D);\n 1554                  gui_paint_text(id);\n 1555  \n ....\n 1557                  glColor4ub(gui_wht[0], gui_wht[1], gui_wht[2], gui_wht[3]);\n 1558              }\n 1559:             glEnable(GL_DEPTH_TEST);\n 1560:             glEnable(GL_LIGHTING);\n 1561          }\n 1562          video_pop_matrix();\n ....\n 1928  int gui_click(int b, int d)\n 1929  {\n 1930:     if (b == SDL_BUTTON_LEFT)\n 1931      {\n 1932          if (d)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/image.c:\n   14  \n   15  #include <SDL.h>\n   16: #include <SDL_ttf.h>\n   17  #include <string.h>\n   18  #include <math.h>\n   ..\n   69          if ((p = (unsigned char *) malloc(w * h * 4)))\n   70          {\n   71:             glReadPixels(0, 0, w, h, GL_RGBA, GL_UNSIGNED_BYTE, p);\n   72  \n   73              /* Allocate and initialize the row pointers. */\n   ..\n  105  {\n  106      static const GLenum format[] =\n  107:         { 0, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_RGBA };\n  108  \n  109      GLuint o = 0;\n  ...\n  111      /* Scale the image as configured, or to fit the OpenGL limitations. */\n  112  \n  113: #ifdef GL_TEXTURE_MAX_ANISOTROPY_EXT\n  114      int a = config_get_d(CONFIG_ANISO);\n  115  #endif\n  116: #ifdef GL_GENERATE_MIPMAP_SGIS\n  117      int m = config_get_d(CONFIG_MIPMAP);\n  118  #endif\n  ...\n  134  \n  135      glGenTextures(1, &o);\n  136:     glBindTexture(GL_TEXTURE_2D, o);\n  137  \n  138:     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n  139:     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n  140  \n  141:     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n  142:     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n  143  \n  144: #ifdef GL_GENERATE_MIPMAP_SGIS\n  145      if (m)\n  146      {\n  147:         glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP_SGIS, GL_TRUE);\n  148:         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,\n  149:                         GL_LINEAR_MIPMAP_LINEAR);\n  150      }\n  151  #endif\n  152: #ifdef GL_TEXTURE_MAX_ANISOTROPY_EXT\n  153:     if (a) glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, a);\n  154  #endif\n  155  \n  156      /* Copy the image to an OpenGL texture. */\n  157  \n  158:     glTexImage2D(GL_TEXTURE_2D, 0,\n  159                   format[b], W, H, 0,\n  160:                  format[b], GL_UNSIGNED_BYTE, q ? q : p);\n  161  \n  162      if (q) free(q);\n  ...\n  205      if (font && text && strlen(text) > 0)\n  206      {\n  207:         SDL_Color    col = { 0xFF, 0xFF, 0xFF, 0xFF };\n  208:         SDL_Surface *orig;\n  209  \n  210          if ((orig = TTF_RenderUTF8_Blended(font, text, col)))\n  ...\n  215              int   b = orig->format->BitsPerPixel / 8;\n  216  \n  217:             SDL_Surface *src;\n  218:             SDL_PixelFormat fmt;\n  219  \n  220              fmt = *orig->format;\n  ...\n  225              fmt.Amask = AMASK;\n  226  \n  227:             if ((src = SDL_ConvertSurface(orig, &fmt, orig->flags)) == NULL)\n  228              {\n  229:                 fprintf(stderr, _(\"Failed to convert SDL_ttf surface: %s\\n\"),\n  230:                         SDL_GetError());\n  231  \n  232                  /* Pretend everything's just fine. */\n  ...\n  235              }\n  236              else\n  237:                 SDL_FreeSurface(orig);\n  238  \n  239              /* Pad the text to power-of-two. */\n  ...\n  255  \n  256              free(p);\n  257:             SDL_FreeSurface(src);\n  258          }\n  259      }\n  ...\n  276   * Load an image from the named file.  Return an SDL surface.\n  277   */\n  278: SDL_Surface *load_surface(const char *filename)\n  279  {\n  280      void  *p;\n  ...\n  283      int    b;\n  284  \n  285:     SDL_Surface *srf = NULL;\n  286  \n  287      if ((p = image_load(filename, &w, &h, &b)))\n  ...\n  290  \n  291          if ((q = image_flip(p, w, h, b, 0, 1)))\n  292:             srf = SDL_CreateRGBSurfaceFrom(q, w, h, b * 8, w * b,\n  293                                             RMASK, GMASK, BMASK, AMASK);\n  294          free(p);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/image.h:\n    3  \n    4  #include <SDL.h>\n    5: #include <SDL_ttf.h>\n    6  \n    7  #include \"glext.h\"\n    .\n   16                              int *, int *, const char *, TTF_Font *);\n   17  \n   18: SDL_Surface *load_surface(const char *);\n   19  \n   20  /*---------------------------------------------------------------------------*/\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/item.c:\n  117      glColor4f(c[0], c[1], c[2], c[3]);\n  118  \n  119:     glDepthMask(GL_FALSE);\n  120      {\n  121          sol_bill(draw, rend, M, t);\n  122      }\n  123:     glDepthMask(GL_TRUE);\n  124  \n  125      glPushMatrix();\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/keynames.c:\n   13   */\n   14  \n   15: #include <SDL_keyboard.h>\n   16  #include <string.h>\n   17  \n   ..\n   21  /*---------------------------------------------------------------------------*/\n   22  \n   23: /* Initial template generated from $SDL/src/events/SDL_keyboard.c */\n   24  \n   25  static const char *table[][2] = {\n   ..\n   97      int i;\n   98  \n   99:     if ((ugly_keyname = SDL_GetKeyName((SDLKey) key)) == NULL)\n  100          return NULL;\n  101  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n   58  {\n   59  #if ENABLE_NLS && !ANDROID\n   60:     char *dir = strdup(getenv(\"NEVERBALL_LOCALE\"));\n   61  \n   62      if (!dir)\n   ..\n  101      strcat(filename, \".po\");\n  102  \n  103:     p_table = ght_create(INITIAL_HASH_SIZE);\n  104      if ( p_table == NULL )\n  105      {\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.h:\n   26  \n   27  #define _(String)   gettext(String)\n   28: #define L_(String)  get_local_text(String)\n   29  \n   30  #elif ENABLE_NLS && ANDROID\n   ..\n   34  \n   35  //GJT: Should be a power of 2, and there's ~400 text entries\n   36: #define INITIAL_HASH_SIZE 512\n   37  #define MSGID  \"msgid \"\n   38  #define MSGIDLEN 6\n   ..\n   43  \n   44  #define _(String)   gettext_by_parsing(String)\n   45: #define L_(String)  get_translated_text(String)\n   46  void defineHashTableLocale();\n   47  \n   ..\n   49  \n   50  #define _(String)   (String)\n   51: #define L_(String)  (String)\n   52  \n   53  #define ngettext(msgid, msgid_plural, n) ((n) == 1 ? (msgid) : (msgid_plural))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/mapc.c:\n  687      size_image(s, &w, &h);\n  688  \n  689:     plane_f[pi] = fl ? L_DETAIL : 0;\n  690  \n  691      p0[0] = +x0 / SCALE;\n  ...\n 1642      for (i = 0; i < lp->sc; i++)\n 1643          if (plane_f[fp->iv[lp->s0 + i]])\n 1644:             lp->fl |= L_DETAIL;\n 1645  }\n 1646  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/part.c:\n  118  \n  119  #ifdef PARTICLEVBO\n  120:     glBindBuffer_   (GL_ARRAY_BUFFER, coin_vbo);\n  121:     glBufferSubData_(GL_ARRAY_BUFFER, 0, sizeof (coin_draw), coin_draw);\n  122:     glBindBuffer_   (GL_ARRAY_BUFFER, 0);\n  123  #endif\n  124  }\n  ...\n  145  #ifdef PARTICLEVBO\n  146      glGenBuffers_(1,              &coin_vbo);\n  147:     glBindBuffer_(GL_ARRAY_BUFFER, coin_vbo);\n  148:     glBufferData_(GL_ARRAY_BUFFER, sizeof (coin_draw),\n  149:                                           coin_draw, GL_DYNAMIC_DRAW);\n  150:     glBindBuffer_(GL_ARRAY_BUFFER, 0);\n  151  #endif\n  152  \n  ...\n  232  \n  233  #ifdef PARTICLEVBO\n  234:     glBindBuffer_(GL_ARRAY_BUFFER, coin_vbo);\n  235  #else\n  236:     glBindBuffer_(GL_ARRAY_BUFFER, 0);\n  237  #endif\n  238  \n  239      if (tex_env_stage(TEX_STAGE_SHADOW))\n  240      {\n  241:         glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  242  \n  243          if (tex_env_stage(TEX_STAGE_CLIP))\n  244:             glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  245  \n  246          tex_env_stage(TEX_STAGE_TEXTURE);\n  247      }\n  248:     glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  249  \n  250:     glDisableClientState(GL_NORMAL_ARRAY);\n  251:     glEnableClientState(GL_COLOR_ARRAY);\n  252      {\n  253  #ifdef PARTICLEVBO\n  254:         glColorPointer (4, GL_FLOAT, sizeof (struct part_draw),\n  255                          (GLvoid *) offsetof (struct part_draw, c));\n  256:         glVertexPointer(3, GL_FLOAT, sizeof (struct part_draw),\n  257                          (GLvoid *) offsetof (struct part_draw, p));\n  258  #else\n  259:         glColorPointer (4, GL_FLOAT, sizeof (struct part_draw), coin_draw[0].c);\n  260:         glVertexPointer(3, GL_FLOAT, sizeof (struct part_draw), coin_draw[0].p);\n  261  #endif\n  262  \n  263:         glEnable(GL_POINT_SPRITE);\n  264          {\n  265:             glTexEnvi(GL_POINT_SPRITE, GL_COORD_REPLACE, GL_TRUE);\n  266:             glPointParameterfv_(GL_POINT_DISTANCE_ATTENUATION, c);\n  267              glPointSize(s);\n  268  \n  269:             glDrawArrays(GL_POINTS, 0, PART_MAX_COIN);\n  270          }\n  271:         glDisable(GL_POINT_SPRITE);\n  272      }\n  273:     glDisableClientState(GL_COLOR_ARRAY);\n  274:     glEnableClientState(GL_NORMAL_ARRAY);\n  275  \n  276      if (tex_env_stage(TEX_STAGE_SHADOW))\n  277      {\n  278:         glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  279  \n  280          if (tex_env_stage(TEX_STAGE_CLIP))\n  281:             glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  282  \n  283          tex_env_stage(TEX_STAGE_TEXTURE);\n  284      }\n  285:     glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  286  }\n  287  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_all.c:\n  432          if (v_len(r) + ball_r < zp->r &&\n  433              ball_p[1] > zp->p[1] &&\n  434:             ball_p[1] < zp->p[1] + GOAL_HEIGHT / 2)\n  435          {\n  436              p[0] = zp->p[0];\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_all.h:\n    1: #ifndef SOLID_ALL_H\n    2: #define SOLID_ALL_H\n    3  \n    4  #include \"solid_vary.h\"\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_base.c:\n   26  enum\n   27  {\n   28:     SOL_VER_MINIMUM = 6,\n   29:     SOL_VER_GLES,\n   30:     SOL_VER_CURRENT = SOL_VER_GLES\n   31  };\n   32  \n   33: #define SOL_MAGIC (0xAF | 'S' << 8 | 'O' << 16 | 'L' << 24)\n   34  \n   35  /*---------------------------------------------------------------------------*/\n   ..\n   45      get_index(fin, &version);\n   46  \n   47:     if (magic != SOL_MAGIC || (version < SOL_VER_MINIMUM ||\n   48:                                version > SOL_VER_CURRENT))\n   49          return 0;\n   50  \n   ..\n   65      fs_read(mp->f, 1, PATHMAX, fin);\n   66  \n   67:     if (sol_version < SOL_VER_GLES)\n   68      {\n   69          static const int flags[][2] = {\n   ..\n  133      get_index(fin, &gp->mi);\n  134  \n  135:     if (sol_version >= SOL_VER_GLES)\n  136      {\n  137          get_index(fin, &gp->oi);\n  ...\n  219      pp->t  = MS_TO_TIME(pp->tm);\n  220  \n  221:     if (sol_version >= SOL_VER_GLES)\n  222          get_index(fin, &pp->fl);\n  223  \n  ...\n  235      get_index(fin, &bp->pi);\n  236  \n  237:     if (sol_version >= SOL_VER_GLES)\n  238      {\n  239          get_index(fin, &bp->pj);\n  ...\n  332      get_index(fin, &fp->tc);\n  333  \n  334:     if (sol_version >= SOL_VER_GLES)\n  335          get_index(fin, &fp->oc);\n  336  \n  ...\n  682  {\n  683      int i;\n  684:     int magic   = SOL_MAGIC;\n  685:     int version = SOL_VER_CURRENT;\n  686  \n  687      put_index(fout, magic);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_base.h:\n  104  /* Lump flags. */\n  105  \n  106: #define L_DETAIL   1\n  107  \n  108  /* Item types. */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_draw.c:\n   14  \n   15  #include <SDL.h>\n   16: #include <SDL_rwops.h>\n   17  \n   18  #include <stdio.h>\n   ..\n   82          if (tex_env_stage(TEX_STAGE_SHADOW))\n   83          {\n   84:             glMatrixMode(GL_TEXTURE);\n   85              {\n   86                  float k = 0.25f / up->r;\n   ..\n  121                  }\n  122              }\n  123:             glMatrixMode(GL_MODELVIEW);\n  124  \n  125              tex_env_stage(TEX_STAGE_TEXTURE);\n  ...\n  152  \n  153      glGenBuffers_(1,              &draw->bill);\n  154:     glBindBuffer_(GL_ARRAY_BUFFER, draw->bill);\n  155:     glBufferData_(GL_ARRAY_BUFFER, sizeof (data), data, GL_STATIC_DRAW);\n  156:     glBindBuffer_(GL_ARRAY_BUFFER, 0);\n  157  }\n  158  \n  ...\n  171              glTranslatef(0.0f, 0.5f, 0.0f);\n  172  \n  173:         glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n  174      }\n  175      glPopMatrix();\n  ...\n  188      const size_t s = sizeof (GLfloat);\n  189  \n  190:     glBindBuffer_(GL_ARRAY_BUFFER, draw->bill);\n  191  \n  192:     glTexCoordPointer(2, GL_FLOAT, s * 4, (GLvoid *) (    0));\n  193:     glVertexPointer  (2, GL_FLOAT, s * 4, (GLvoid *) (s * 2));\n  194  }\n  195  \n  ...\n  232      GLfloat v[4];\n  233  \n  234:     glGetMaterialfv(GL_FRONT, pname, v);\n  235  \n  236:     if (pname != GL_SHININESS)\n  237          real = (tobyte(v[0])       |\n  238                  tobyte(v[1]) << 8  |\n  ...\n  251  static void assert_mtrl(const struct d_mtrl *mp)\n  252  {\n  253:     if (glIsEnabled(GL_COLOR_MATERIAL))\n  254          return;\n  255  \n  256:     check_mtrl(\"ambient\",   GL_AMBIENT,   mp->a);\n  257:     check_mtrl(\"diffuse\",   GL_DIFFUSE,   mp->d);\n  258:     check_mtrl(\"specular\",  GL_SPECULAR,  mp->s);\n  259:     check_mtrl(\"emission\",  GL_EMISSION,  mp->e);\n  260:     check_mtrl(\"shininess\", GL_SHININESS, mp->h);\n  261  }\n  262  #endif\n  ...\n  266      if (enable)\n  267      {\n  268:         glEnable(GL_COLOR_MATERIAL);\n  269      }\n  270      else\n  271      {\n  272:         glDisable(GL_COLOR_MATERIAL);\n  273  \n  274          /*\n  ...\n  298  \n  299      if (mp_draw->o != mq_draw->o)\n  300:         glBindTexture(GL_TEXTURE_2D, mp_draw->o);\n  301  \n  302      /* Set material properties. */\n  303  \n  304      if (mp_draw->d != mq_draw->d)\n  305:         glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE,   mp_base->d);\n  306      if (mp_draw->a != mq_draw->a)\n  307:         glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT,   mp_base->a);\n  308      if (mp_draw->s != mq_draw->s)\n  309:         glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR,  mp_base->s);\n  310      if (mp_draw->e != mq_draw->e)\n  311:         glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION,  mp_base->e);\n  312      if (mp_draw->h != mq_draw->h)\n  313:         glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, mp_base->h);\n  314  \n  315      /* Ball shadow. */\n  ...\n  330          if (mp_flags & M_ENVIRONMENT)\n  331          {\n  332:             glEnable(GL_TEXTURE_GEN_S);\n  333:             glEnable(GL_TEXTURE_GEN_T);\n  334  \n  335:             glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);\n  336:             glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_SPHERE_MAP);\n  337          }\n  338          else\n  339          {\n  340:             glDisable(GL_TEXTURE_GEN_S);\n  341:             glDisable(GL_TEXTURE_GEN_T);\n  342          }\n  343      }\n  ...\n  349      {\n  350          if (mp_flags & M_ADDITIVE)\n  351:             glBlendFunc(GL_ONE, GL_ONE);\n  352          else\n  353:             glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  354      }\n  355  \n  ...\n  360          if (mp_flags & M_TWO_SIDED)\n  361          {\n  362:             glDisable(GL_CULL_FACE);\n  363:             glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, 1);\n  364          }\n  365          else\n  366          {\n  367:             glEnable(GL_CULL_FACE);\n  368:             glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, 0);\n  369          }\n  370      }\n  ...\n  376          if (mp_flags & M_DECAL)\n  377          {\n  378:             glEnable(GL_POLYGON_OFFSET_FILL);\n  379              glPolygonOffset(-1.0f, -2.0f);\n  380          }\n  381          else\n  382:             glDisable(GL_POLYGON_OFFSET_FILL);\n  383      }\n  384  \n  ...\n  421  \n  422          if (mq->fl & M_CLAMP_S)\n  423:             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n  424          else\n  425:             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n  426  \n  427          if (mq->fl & M_CLAMP_T)\n  428:             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n  429          else\n  430:             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n  431      }\n  432  \n  ...\n  622  \n  623          glGenBuffers_(1, &mp->vbo);\n  624:         glBindBuffer_(GL_ARRAY_BUFFER,         mp->vbo);\n  625:         glBufferData_(GL_ARRAY_BUFFER,         vn * vs, vv, GL_STATIC_DRAW);\n  626:         glBindBuffer_(GL_ARRAY_BUFFER,         0);\n  627  \n  628          glGenBuffers_(1, &mp->ebo);\n  629:         glBindBuffer_(GL_ELEMENT_ARRAY_BUFFER, mp->ebo);\n  630:         glBufferData_(GL_ELEMENT_ARRAY_BUFFER, gn * gs, gv, GL_STATIC_DRAW);\n  631:         glBindBuffer_(GL_ELEMENT_ARRAY_BUFFER, 0);\n  632  \n  633          mp->mp  = draw->mv + mi;\n  ...\n  653      {\n  654          const size_t s = sizeof (struct d_vert);\n  655:         const GLenum T = GL_FLOAT;\n  656  \n  657          /* Apply the material state. */\n  ...\n  661          /* Bind the mesh data. */\n  662  \n  663:         glBindBuffer_(GL_ARRAY_BUFFER,         mp->vbo);\n  664:         glBindBuffer_(GL_ELEMENT_ARRAY_BUFFER, mp->ebo);\n  665  \n  666          glVertexPointer  (3, T, s, (GLvoid *) offsetof (struct d_vert, p));\n  ...\n  680          /* Draw the mesh. */\n  681  \n  682:         glDrawElements(GL_TRIANGLES, mp->ebc, GL_UNSIGNED_SHORT, 0);\n  683      }\n  684  }\n  ...\n  828  void sol_draw_enable(struct s_rend *rend)\n  829  {\n  830:     glEnableClientState(GL_VERTEX_ARRAY);\n  831:     glEnableClientState(GL_NORMAL_ARRAY);\n  832  \n  833      if (tex_env_stage(TEX_STAGE_SHADOW))\n  834      {\n  835:         glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  836  \n  837          if (tex_env_stage(TEX_STAGE_CLIP))\n  838:             glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  839  \n  840          tex_env_stage(TEX_STAGE_TEXTURE);\n  841      }\n  842:     glEnableClientState(GL_TEXTURE_COORD_ARRAY);\n  843  \n  844      rend->mtrl = default_draw_mtrl;\n  ...\n  852      if (tex_env_stage(TEX_STAGE_SHADOW))\n  853      {\n  854:         glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  855  \n  856          if (tex_env_stage(TEX_STAGE_CLIP))\n  857:             glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  858  \n  859          tex_env_stage(TEX_STAGE_TEXTURE);\n  860      }\n  861:     glDisableClientState(GL_TEXTURE_COORD_ARRAY);\n  862  \n  863:     glDisableClientState(GL_NORMAL_ARRAY);\n  864:     glDisableClientState(GL_VERTEX_ARRAY);\n  865  }\n  866  \n  ...\n  880      /* Render all transparent geometry, decals first. */\n  881  \n  882:     if (!test) glDisable(GL_DEPTH_TEST);\n  883:     if (!mask) glDepthMask(GL_FALSE);\n  884      {\n  885          sol_draw_all(draw, rend, 2);\n  886          sol_draw_all(draw, rend, 3);\n  887      }\n  888:     if (!mask) glDepthMask(GL_TRUE);\n  889:     if (!test) glEnable(GL_DEPTH_TEST);\n  890  \n  891      /* Revert the buffer object state. */\n  892  \n  893:     glBindBuffer_(GL_ARRAY_BUFFER,         0);\n  894:     glBindBuffer_(GL_ELEMENT_ARRAY_BUFFER, 0);\n  895  \n  896      rend->shadow = 0;\n  ...\n  909      /* Revert the buffer object state. */\n  910  \n  911:     glBindBuffer_(GL_ARRAY_BUFFER,         0);\n  912:     glBindBuffer_(GL_ELEMENT_ARRAY_BUFFER, 0);\n  913  \n  914      rend->shadow = 0;\n  ...\n  922          return;\n  923  \n  924:     glDisable(GL_LIGHTING);\n  925:     glDepthMask(GL_FALSE);\n  926  \n  927      sol_bill_enable(draw);\n  ...\n  974  \n  975                          if (rp->fl & B_EDGE)\n  976:                             glDrawArrays(GL_TRIANGLE_STRIP, 4, 4);\n  977                          else\n  978:                             glDrawArrays(GL_TRIANGLE_STRIP, 8, 4);\n  979                      }\n  980                      glPopMatrix();\n  ...\n  985      sol_bill_disable();\n  986  \n  987:     glDepthMask(GL_TRUE);\n  988:     glEnable(GL_LIGHTING);\n  989  }\n  990  \n  ...\n 1024                  if (fabsf(rz) > 0.0f) glRotatef(rz, 0.0f, 0.0f, 1.0f);\n 1025  \n 1026:                 sol_draw_bill(w, h, GL_FALSE);\n 1027              }\n 1028              glPopMatrix();\n ....\n 1036      if (k > 0.0f)\n 1037      {\n 1038:         glMatrixMode(GL_PROJECTION);\n 1039          glPushMatrix();\n 1040          glLoadIdentity();\n 1041:         glMatrixMode(GL_MODELVIEW);\n 1042          glPushMatrix();\n 1043          glLoadIdentity();\n 1044          {\n 1045:             glDisable(GL_LIGHTING);\n 1046:             glDisable(GL_DEPTH_TEST);\n 1047:             glDisable(GL_TEXTURE_2D);\n 1048  \n 1049              glColor4f(0.0f, 0.0f, 0.0f, k);\n 1050  \n 1051              sol_bill_enable(draw);\n 1052:             glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n 1053              sol_bill_disable();\n 1054  \n 1055              glColor4f(1.0f, 1.0f, 1.0f, 1.0f);\n 1056  \n 1057:             glEnable(GL_TEXTURE_2D);\n 1058:             glEnable(GL_DEPTH_TEST);\n 1059:             glEnable(GL_LIGHTING);\n 1060          }\n 1061:         glMatrixMode(GL_PROJECTION);\n 1062          glPopMatrix();\n 1063:         glMatrixMode(GL_MODELVIEW);\n 1064          glPopMatrix();\n 1065      }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_sim_sol.c:\n  411      /* Short circuit a non-solid lump. */\n  412  \n  413:     if (lp->fl & L_DETAIL) return t;\n  414  \n  415      /* Test all verts */\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_vary.c:\n  225          break;\n  226  \n  227:     case CMD_BALL_RADIUS:\n  228          fp->uv[cs->curr_ball][CURR].r = cmd->ballradius.r;\n  229          break;\n  ...\n  239          break;\n  240  \n  241:     case CMD_BALL_POSITION:\n  242          up = &fp->uv[cs->curr_ball][CURR];\n  243          v_cpy(up->p, cmd->ballpos.p);\n  244          break;\n  245  \n  246:     case CMD_BALL_BASIS:\n  247          up = &fp->uv[cs->curr_ball][CURR];\n  248          v_cpy(up->e[0], cmd->ballbasis.e[0]);\n  ...\n  251          break;\n  252  \n  253:     case CMD_BALL_PEND_BASIS:\n  254          up = &fp->uv[cs->curr_ball][CURR];\n  255          v_cpy(up->E[0], cmd->ballpendbasis.E[0]);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/st_resol.c:\n   29  static struct state *st_back;\n   30  \n   31: static SDL_Rect **modes;\n   32  \n   33  /*---------------------------------------------------------------------------*/\n   ..\n   35  enum\n   36  {\n   37:     RESOL_BACK = 1,\n   38:     RESOL_SELECT\n   39  };\n   40  \n   ..\n   47      switch (tok)\n   48      {\n   49:     case RESOL_BACK:\n   50          goto_state(st_back);\n   51          st_back = NULL;\n   52          break;\n   53  \n   54:     case RESOL_SELECT:\n   55          goto_state(&st_null);\n   56          r = video_mode(config_get_d(CONFIG_FULLSCREEN),\n   ..\n   63  }\n   64  \n   65: static int fill_row(int id, SDL_Rect **modes, int i, int n)\n   66  {\n   67      int complete;\n   ..\n   79          complete = fill_row(id, modes, i + 1, n - 1);\n   80  \n   81:         btn = gui_state(id, label, GUI_SML, RESOL_SELECT, i);\n   82  \n   83          gui_set_hilite(btn, (config_get_d(CONFIG_WIDTH)  == modes[i]->w &&\n   ..\n  103              gui_label(jd, _(\"Resolution\"), GUI_SML, GUI_ALL, 0, 0);\n  104              gui_space(jd);\n  105:             gui_start(jd, _(\"Back\"),       GUI_SML, RESOL_BACK, 0);\n  106          }\n  107  \n  ...\n  132      back_init(\"back/gui.png\");\n  133  \n  134:     modes = SDL_ListModes(NULL, SDL_OPENGL | SDL_FULLSCREEN);\n  135  \n  136:     if (modes == (SDL_Rect **) -1)\n  137          modes = NULL;\n  138  \n  ...\n  186  static int resol_keybd(int c, int d)\n  187  {\n  188:     return (d && c == SDLK_ESCAPE) ? resol_action(RESOL_BACK, 0) : 1;\n  189  }\n  190  \n  ...\n  198              return resol_action(gui_token(active), gui_value(active));\n  199          if (config_tst_d(CONFIG_JOYSTICK_BUTTON_B, b))\n  200:             return resol_action(RESOL_BACK, 0);\n  201          if (config_tst_d(CONFIG_JOYSTICK_BUTTON_EXIT, b))\n  202:             return resol_action(RESOL_BACK, 0);\n  203      }\n  204      return 1;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/st_resol.h:\n    1: #ifndef ST_RESOL_H\n    2: #define ST_RESOL_H\n    3  \n    4  #include \"state.h\"\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/state.c:\n   69          if (config_get_d(CONFIG_STEREO))\n   70          {\n   71:             glDrawBuffer(GL_BACK_LEFT);\n   72              video_clear();\n   73              state->paint(state->gui_id, t);\n   74  \n   75:             glDrawBuffer(GL_BACK_RIGHT);\n   76              video_clear();\n   77              state->paint(state->gui_id, t);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/sync.c:\n   13   */\n   14  \n   15: #include <SDL_syswm.h>\n   16  #include \"glext.h\"\n   17  \n   ..\n   36  \n   37  /*---------------------------------------------------------------------------*/\n   38: #elif SDL_VIDEO_DRIVER_X11\n   39  \n   40  #include <GL/glx.h>\n   ..\n   59  void sync_init(void)\n   60  {\n   61:     SDL_SysWMinfo info;\n   62      Display *dpy;\n   63  \n   64:     SDL_VERSION(&info.version);\n   65  \n   66:     if (SDL_GetWMInfo(&info) != 1)\n   67          return;\n   68  \n   69:     if (info.subsystem != SDL_SYSWM_X11)\n   70          return;\n   71  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/syswm.c:\n   16  #include <stdlib.h>\n   17  \n   18: #include <SDL_video.h>\n   19: #include <SDL_syswm.h>\n   20  \n   21  #include \"syswm.h\"\n   ..\n   26  /*---------------------------------------------------------------------------*/\n   27  \n   28: void set_SDL_icon(const char *filename)\n   29  {\n   30  #if !defined(__APPLE__) && !defined(_WIN32)\n   31:     SDL_Surface *icon;\n   32  \n   33      if ((icon = load_surface(filename)))\n   34      {\n   35:         SDL_WM_SetIcon(icon, NULL);\n   36          free(icon->pixels);\n   37:         SDL_FreeSurface(icon);\n   38      }\n   39  #endif\n   ..\n   43  void set_EWMH_icon(const char *filename)\n   44  {\n   45: #if SDL_VIDEO_DRIVER_X11 && !SDL_VIDEO_DRIVER_QUARTZ\n   46:     SDL_SysWMinfo info;\n   47  \n   48      Display *dpy;\n   ..\n   52      int w, h, b;\n   53  \n   54:     SDL_VERSION(&info.version);\n   55  \n   56:     if (SDL_GetWMInfo(&info) != 1)\n   57      {\n   58:         fprintf(stderr, L_(\"Failed to get WM info: %s\\n\"), SDL_GetError());\n   59          return;\n   60      }\n   61  \n   62:     if (info.subsystem != SDL_SYSWM_X11)\n   63          return;\n   64  \n   ..\n  127          }\n  128          else\n  129:             fputs(L_(\"Failed to allocate memory for EWMH icon data.\\n\"), stderr);\n  130  \n  131          free(p);\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/syswm.h:\n    2  #define SYSWM_H\n    3  \n    4: void set_SDL_icon (const char *);\n    5  void set_EWMH_icon(const char *);\n    6  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/tilt_loop.c:\n   16  \n   17  #include <SDL.h>\n   18: #include <SDL_thread.h>\n   19  #include <math.h>\n   20  #include <stdio.h>\n   ..\n  100  \n  101  static struct tilt_state state;\n  102: static SDL_mutex        *mutex  = NULL;\n  103: static SDL_Thread       *thread = NULL;\n  104  \n  105  /*---------------------------------------------------------------------------*/\n  ...\n  157  \n  158  \n  159:     SDL_mutexP(mutex);\n  160      state.status = running;\n  161:     SDL_mutexV(mutex);\n  162  \n  163      while (mutex && running)\n  164      {\n  165:         SDL_mutexP(mutex);\n  166          running = state.status;\n  167:         SDL_mutexV(mutex);\n  168  \n  169          rc = freespace_read(deviceId, buffer, FREESPACE_MAX_INPUT_MESSAGE_SIZE, 100, &length);\n  ...\n  187              q_euler(eulerAngles, quat);\n  188  \n  189:             SDL_mutexP(mutex);\n  190              {\n  191                  /* Since the game expects \"rotate the world type\", conjugate by negating all angles & convert to degrees\n  ...\n  204                  set_button(&state.D, userFrame.deltaWheel < 0);\n  205              }\n  206:             SDL_mutexV(mutex);\n  207          }\n  208  \n  ...\n  219      freespace_init();\n  220  \n  221:     mutex  = SDL_CreateMutex();\n  222:     thread = SDL_CreateThread(tilt_func, NULL);\n  223  }\n  224  \n  ...\n  231          /* Get/set the status of the tilt sensor thread. */\n  232  \n  233:         SDL_mutexP(mutex);\n  234          b = state.status;\n  235          state.status = 0;\n  236:         SDL_mutexV(mutex);\n  237  \n  238          /* Kill the thread and destroy the mutex. */\n  239  \n  240:         SDL_WaitThread(thread, &b);\n  241:         SDL_DestroyMutex(mutex);\n  242  \n  243          mutex  = NULL;\n  ...\n  254      if (mutex)\n  255      {\n  256:         SDL_mutexP(mutex);\n  257          {\n  258              if      ((ch = get_button(&state.A)))\n  ...\n  282              }\n  283          }\n  284:         SDL_mutexV(mutex);\n  285      }\n  286      return ch;\n  ...\n  293      if (mutex)\n  294      {\n  295:         SDL_mutexP(mutex);\n  296          x = state.x;\n  297:         SDL_mutexV(mutex);\n  298      }\n  299  \n  ...\n  307      if (mutex)\n  308      {\n  309:         SDL_mutexP(mutex);\n  310          z = state.z;\n  311:         SDL_mutexV(mutex);\n  312      }\n  313  \n  ...\n  321      if (mutex)\n  322      {\n  323:         SDL_mutexP(mutex);\n  324          b = state.status;\n  325:         SDL_mutexV(mutex);\n  326      }\n  327      return b;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/tilt_wii.c:\n   16  \n   17  #include <SDL.h>\n   18: #include <SDL_thread.h>\n   19  #include <math.h>\n   20  #include <stdio.h>\n   ..\n  102  \n  103  static struct tilt_state state;\n  104: static SDL_mutex        *mutex  = NULL;\n  105: static SDL_Thread       *thread = NULL;\n  106  \n  107  #define FILTER 8\n  ...\n  123              wiimote.led.one   = 1;\n  124  \n  125:             SDL_mutexP(mutex);\n  126              state.status = running;\n  127:             SDL_mutexV(mutex);\n  128  \n  129              while (mutex && running && wiimote_is_open(&wiimote))\n  ...\n  132                      break;\n  133  \n  134:                 SDL_mutexP(mutex);\n  135                  {\n  136                      running = state.status;\n  ...\n  157                      }\n  158                  }\n  159:                 SDL_mutexV(mutex);\n  160              }\n  161  \n  ...\n  170      memset(&state, 0, sizeof (struct tilt_state));\n  171  \n  172:     mutex  = SDL_CreateMutex();\n  173:     thread = SDL_CreateThread(tilt_func, NULL);\n  174  }\n  175  \n  ...\n  182          /* Get/set the status of the tilt sensor thread. */\n  183  \n  184:         SDL_mutexP(mutex);\n  185          b = state.status;\n  186          state.status = 0;\n  187:         SDL_mutexV(mutex);\n  188  \n  189          /* Kill the thread and destroy the mutex. */\n  190  \n  191:         SDL_KillThread(thread);\n  192:         SDL_DestroyMutex(mutex);\n  193  \n  194          mutex  = NULL;\n  ...\n  203      if (mutex)\n  204      {\n  205:         SDL_mutexP(mutex);\n  206          {\n  207              if      ((ch = get_button(&state.A)))\n  ...\n  251              }\n  252          }\n  253:         SDL_mutexV(mutex);\n  254      }\n  255      return ch;\n  ...\n  262      if (mutex)\n  263      {\n  264:         SDL_mutexP(mutex);\n  265          x = state.x;\n  266:         SDL_mutexV(mutex);\n  267      }\n  268  \n  ...\n  276      if (mutex)\n  277      {\n  278:         SDL_mutexP(mutex);\n  279          z = state.z;\n  280:         SDL_mutexV(mutex);\n  281      }\n  282  \n  ...\n  290      if (mutex)\n  291      {\n  292:         SDL_mutexP(mutex);\n  293          b = state.status;\n  294:         SDL_mutexV(mutex);\n  295      }\n  296      return b;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/video.c:\n   29  {\n   30      #ifndef ANDROID // GJT: Crashes on Android for some reason\n   31:     SDL_QuitSubSystem(SDL_INIT_VIDEO);\n   32      #endif\n   33  \n   34:     if (SDL_InitSubSystem(SDL_INIT_VIDEO) == -1)\n   35      {\n   36:         fprintf(stderr, \"%s\\n\", SDL_GetError());\n   37          return 0;\n   38      }\n   ..\n   40      /* This has to happen before mode setting... */\n   41  \n   42:     set_SDL_icon(icon);\n   43  \n   44      /* Initialize the video. */\n   ..\n   48                      config_get_d(CONFIG_HEIGHT)))\n   49      {\n   50:         fprintf(stderr, \"%s\\n\", SDL_GetError());\n   51          return 0;\n   52      }\n   ..\n   56      set_EWMH_icon(icon);\n   57  \n   58:     SDL_WM_SetCaption(title, title);\n   59  \n   60      return 1;\n   ..\n   71      int vsync   = config_get_d(CONFIG_VSYNC)       ? 1 : 0;\n   72  \n   73:     SDL_GL_SetAttribute(SDL_GL_STEREO,             stereo);\n   74:     SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE,       stencil);\n   75:     SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, buffers);\n   76:     SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, samples);\n   77:     SDL_GL_SetAttribute(SDL_GL_SWAP_CONTROL,       vsync);\n   78  \n   79      /* Require 16-bit double buffer with 16-bit depth buffer. */\n   80  \n   81:     SDL_GL_SetAttribute(SDL_GL_RED_SIZE,     5);\n   82:     SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE,   5);\n   83:     SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,    5);\n   84:     SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE,  16);\n   85:     SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);\n   86  \n   87      /* Try to set the currently specified mode. */\n   ..\n   93      #endif\n   94  \n   95:     if (SDL_SetVideoMode(w, h, 0, SDL_OPENGL  | (f ? SDL_FULLSCREEN : 0)))\n   96      {\n   97          config_set_d(CONFIG_FULLSCREEN, f);\n   ..\n  105          glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n  106  \n  107:         glEnable(GL_NORMALIZE);\n  108:         glEnable(GL_CULL_FACE);\n  109:         glEnable(GL_DEPTH_TEST);\n  110:         glEnable(GL_TEXTURE_2D);\n  111:         glEnable(GL_LIGHTING);\n  112:         glEnable(GL_BLEND);\n  113  \n  114  #if !ENABLE_OPENGLES\n  115:         glLightModeli(GL_LIGHT_MODEL_COLOR_CONTROL,\n  116:                       GL_SEPARATE_SPECULAR_COLOR);\n  117  #endif\n  118  \n  119:         glPixelStorei(GL_PACK_ALIGNMENT, 1);\n  120:         glPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n  121  \n  122:         glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n  123:         glDepthFunc(GL_LEQUAL);\n  124  \n  125          /* If GL supports multisample, and SDL got a multisample buffer... */\n  ...\n  127          if (glext_check(\"ARB_multisample\"))\n  128          {\n  129:             SDL_GL_GetAttribute(SDL_GL_MULTISAMPLEBUFFERS, &buffers);\n  130:             if (buffers) glEnable(GL_MULTISAMPLE);\n  131          }\n  132  \n  133          /* Attempt manual swap control if SDL's is broken. */\n  134  \n  135:         if (vsync && SDL_GL_GetAttribute(SDL_GL_SWAP_CONTROL, &vsync) == -1)\n  136              sync_init();\n  137  \n  ...\n  185      int dt;\n  186  \n  187:     SDL_GL_SwapBuffers();\n  188  \n  189      /* Accumulate time passed and frames rendered. */\n  190  \n  191:     dt = (int) SDL_GetTicks() - last;\n  192  \n  193      frames +=  1;\n  ...\n  230      if (w)\n  231      {\n  232:         SDL_EventState(SDL_MOUSEMOTION, SDL_IGNORE);\n  233  \n  234:         SDL_WarpMouse(config_get_d(CONFIG_WIDTH)  / 2,\n  235                        config_get_d(CONFIG_HEIGHT) / 2);\n  236  \n  237:         SDL_EventState(SDL_MOUSEMOTION, SDL_ENABLE);\n  238      }\n  239  \n  240:     SDL_WM_GrabInput(SDL_GRAB_ON);\n  241:     SDL_ShowCursor(SDL_DISABLE);\n  242  \n  243      grabbed = 1;\n  ...\n  246  void video_clr_grab(void)\n  247  {\n  248:     SDL_WM_GrabInput(SDL_GRAB_OFF);\n  249:     SDL_ShowCursor(SDL_ENABLE);\n  250      grabbed = 0;\n  251  }\n  ...\n  269                   (GLfloat) config_get_d(CONFIG_HEIGHT));\n  270  \n  271:     glMatrixMode(GL_PROJECTION);\n  272      {\n  273          glPushMatrix();\n  ...\n  293          glMultMatrixf(&m[0][0]);\n  294      }\n  295:     glMatrixMode(GL_MODELVIEW);\n  296  }\n  297  \n  ...\n  301      GLfloat h = (GLfloat) config_get_d(CONFIG_HEIGHT);\n  302  \n  303:     glMatrixMode(GL_PROJECTION);\n  304      {\n  305          glPushMatrix();\n  ...\n  307          glOrtho_(0.0, w, 0.0, h, -1.0, +1.0);\n  308      }\n  309:     glMatrixMode(GL_MODELVIEW);\n  310  }\n  311  \n  312  void video_pop_matrix(void)\n  313  {\n  314:     glMatrixMode(GL_PROJECTION);\n  315      {\n  316          glPopMatrix();\n  317      }\n  318:     glMatrixMode(GL_MODELVIEW);\n  319  }\n  320  \n  ...\n  322  {\n  323      if (config_get_d(CONFIG_REFLECTION))\n  324:         glClear(GL_DEPTH_BUFFER_BIT |\n  325:                 GL_STENCIL_BUFFER_BIT);\n  326      else\n  327:         glClear(GL_DEPTH_BUFFER_BIT);\n  328  }\n  329  \n\n1732 matches across 101 files\n\n\nSearching 242 files for \"RELEASE_BUILD\" (case sensitive)\n\n0 matches\n\nSearching 242 files for \"L_(\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/demo.c:\n  225  \n  226              case '\\0':\n  227:                 fputs(L_(\"Missing format character in replay name\\n\"), stderr);\n  228                  fmt--;\n  229                  break;\n  230  \n  231              default:\n  232:                 fprintf(stderr, L_(\"Invalid format character in \"\n  233                                     \"replay name: \\\"%%%c\\\"\\n\"), *fmt);\n  234                  break;\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/level.c:\n  136      if (!sol_load_meta(&base, filename))\n  137      {\n  138:         fprintf(stderr, L_(\"Failure to load level file '%s'\\n\"), filename);\n  139          return 0;\n  140      }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/main.c:\n  281  \n  282  #define opt_usage \\\n  283:     L_(                                                                   \\\n  284          \"Usage: %s [options ...]\\n\"                                       \\\n  285          \"Options:\\n\"                                                      \\\n  ...\n  292  \n  293  #define opt_error(option) \\\n  294:     fprintf(stderr, L_(\"Option '%s' requires an argument.\\n\"), option)\n  295  \n  296  static void opt_parse(int argc, char **argv)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/set.c:\n  274      if (!fin)\n  275      {\n  276:         fprintf(stderr, L_(\"Failure to load set file '%s'\\n\"), filename);\n  277          return 0;\n  278      }\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.c:\n  306      if (!fs_exists(path))\n  307      {\n  308:         fprintf(stderr, L_(\"Font '%s' doesn't exist, trying default font.\\n\"),\n  309                  path);\n  310  \n  ...\n  353              font[GUI_LRG] = NULL;\n  354  \n  355:             fprintf(stderr, L_(\"Could not load font '%s'.\\n\"), path);\n  356          }\n  357  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.h:\n   26  \n   27  #define _(String)   gettext(String)\n   28: #define L_(String)  get_local_text(String)\n   29  \n   30  #elif ENABLE_NLS && ANDROID\n   ..\n   43  \n   44  #define _(String)   gettext_by_parsing(String)\n   45: #define L_(String)  get_translated_text(String)\n   46  void defineHashTableLocale();\n   47  \n   ..\n   49  \n   50  #define _(String)   (String)\n   51: #define L_(String)  (String)\n   52  \n   53  #define ngettext(msgid, msgid_plural, n) ((n) == 1 ? (msgid) : (msgid_plural))\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/syswm.c:\n   56      if (SDL_GetWMInfo(&info) != 1)\n   57      {\n   58:         fprintf(stderr, L_(\"Failed to get WM info: %s\\n\"), SDL_GetError());\n   59          return;\n   60      }\n   ..\n  127          }\n  128          else\n  129:             fputs(L_(\"Failed to allocate memory for EWMH icon data.\\n\"), stderr);\n  130  \n  131          free(p);\n\n13 matches across 7 files\n\n\nSearching 242 files for \"GJT\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.h:\n   16  #define ANDROID_SUPPORT_H\n   17  \n   18: // GJT: Android helper definitions\n   19  \n   20  #include <android/log.h>\n   ..\n   25  #define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)\n   26  \n   27: // GJT: Why can't I define this here? stdio.h seems to complain. It must be defined in all \n   28  // files it's being used.\n   29  //#define  fprintf(f, fmt, ...)  __android_log_print(ANDROID_LOG_INFO, LOG_TAG, fmt, __VA_ARGS__) \n   30  \n   31: #define RELEASE 1 // GJT: Comment ONLY this line out if you're building this on your own\n   32: #define ENABLE_NLS 1 // GJT: Controls localization\n   33  #define ENABLE_OPENGLES 1\n   34  #define GL_VERSION_ES_CM_1_1 1\n   35: #define PHYSFS_SUPPORTS_ZIP 1 // GJT: For PhysFS zip/apk support\n   36  #define ANDROID_DATA \"assets/data/\"\n   37  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/main.c:\n  461  \n  462  \n  463:     /* GJT: Due to Android reliance on fs_open(), lang_init must happen AFTER data paths are configured */\n  464      \n  465      lang_init(\"neverball\");\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_physfs.c:\n  134          switch (mode[0])\n  135          {\n  136:         case 'r': ; // GJT: Extra ; due to GCC bug: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=37231\n  137              #ifdef ANDROID\n  138              static char zipPath[MAXSTR];\n  139:             SAFECPY(zipPath, ANDROID_DATA); // GJT: Android APK game contents are in this folder\n  140              SAFECAT(zipPath, path);\n  141  \n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c:\n   95  void defineHashTableLocale()\n   96  {\n   97:     // GJT: Redid everything, as gettext() does not work in Android NDK: https://github.com/android/platform_bionic/tree/master/libc\n   98:     char *dir = strdup(getenv(\"LANGUAGE\")); // GJT: LANGUAGE is set on Java side\n   99      char filename[11] = \"po/\";   \n  100      strcat(filename, dir);\n  ...\n  144                  if ( strncmp(msgid, \"\\\"\\\"\\n\\\"\", 4) == 0)\n  145                  {                   \n  146:                     // GJT: I tried to get this done in C, maybe one day I'll sort it out\n  147                      // Multilines in the .po files exist, and I hate string manipulation in C...\n  148                      // but I hate having to jump back to Java more\n  ...\n  193      \n  194      if (msgstr == NULL || strcmp(msgstr, \"\") == 0 )\n  195:         return msgid; // GJT: Default to English\n  196      return msgstr;\n  197  #else\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.h:\n   17  \n   18  #ifdef ANDROID\n   19: // GJT: Wha? Why is this needed here? Chicken before the egg problems? None of the Android L10N\n   20  // functions are defined without it.\n   21  #include <android_support.h>\n   ..\n   29  \n   30  #elif ENABLE_NLS && ANDROID\n   31: // GJT: Android does not support locales on the C level\n   32  // http://groups.google.com/group/android-ndk/msg/1a5248f31920638\n   33  #include <ght_hash_table.h>\n   34  \n   35: //GJT: Should be a power of 2, and there's ~400 text entries\n   36  #define INITIAL_HASH_SIZE 512\n   37  #define MSGID  \"msgid \"\n\n/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/video.c:\n   28  int video_init(const char *title, const char *icon)\n   29  {\n   30:     #ifndef ANDROID // GJT: Crashes on Android for some reason\n   31      SDL_QuitSubSystem(SDL_INIT_VIDEO);\n   32      #endif\n\n16 matches across 6 files\n\n\nSearching 11 files for \"GJT\" (case sensitive)\n\n/Users/gjtorikian/Developer/commandergenius/project/java/Settings.java:\n 2433  		String lang = new String(Locale.getDefault().getLanguage());\n 2434  \n 2435: 		// GJT: Only get country code of PT or ZH\n 2436  		if (lang.startsWith(\"zh\") || lang.startsWith(\"pt\"))\n 2437  		{\n\n/Users/gjtorikian/Developer/commandergenius/project/java/Video.java:\n  322  		accelerometer = new AccelerometerReader(context);\n  323  \n  324: 		// GJT: Get APK path 	\n  325          String apkFilePath = NeverballMESupport.getAPKPath(context);\n  326          String sdCardPath = Environment.getExternalStorageDirectory() + \"/app-data/com.miadzin.neverballme\";\n  ...\n  455  	public static native void nativeTextInputFinished();\n  456  \n  457: 	//GJT: Add apk file path reference\n  458  	public static native void setDataPaths(String apkPath, String sdCardPath);\n  459: 	//GJT: Add screen dimensions\n  460  	public static native void setDimensions(int width, int height);\n  461  \n\n4 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 304044,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/Users/gjtorikian/Developer/commandergenius/project/java/Video.java",
			"settings":
			{
				"buffer_size": 18238,
				"line_ending": "Unix"
			}
		},
		{
			"file": "share/lang.h",
			"settings":
			{
				"buffer_size": 1967,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ball/demo.c",
			"settings":
			{
				"buffer_size": 10771,
				"line_ending": "Unix"
			}
		},
		{
			"file": "android/android_support.h",
			"settings":
			{
				"buffer_size": 1734,
				"line_ending": "Unix"
			}
		},
		{
			"file": "android/android_support.c",
			"settings":
			{
				"buffer_size": 1045,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ball/main.c",
			"settings":
			{
				"buffer_size": 14082,
				"line_ending": "Unix"
			}
		},
		{
			"file": "share/video.c",
			"settings":
			{
				"buffer_size": 8055,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/fr.po",
			"settings":
			{
				"buffer_size": 57121,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 122.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.c",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/fs_physfs.c",
		"/Users/gjtorikian/Developer/commandergenius/project/java/Settings.java",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.h",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/gui.c",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/solid_base.c",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/lang.h",
		"/Users/gjtorikian/Developer/commandergenius/project/java/Video.java",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_title.c",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/share/video.c",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.h",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/android/android_support.c",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/AndroidAppSettings.cfg",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/main.c",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_conf.c",
		"/Users/gjtorikian/Developer/commandergenius/project/jni/application/neverball/ball/st_name.c",
		"/Users/gjtorikian/Developer/commandergenius/project/java/NeverballMESupport.java",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/android/android_support.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/lang.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/glext.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/geom.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/geom.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/cmd.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/cmd.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/solid_sim_sol.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/solid_cmd.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/fs_physfs.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/gui.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/glext.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/state.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/fs.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/fs_stdio.c",
		"/Users/gjtorikian/Desktop/neverball/trunk/share/solid_sim_sol.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/gui.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/main.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/AndroidAppSettings.cfg",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/sync.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/set.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/level.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/demo.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/st_ball.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/st_level.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/audio.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/config.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/video.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/fs_common.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/android/hash_table.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/ball/game_client.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/base_config.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/java/Video.java",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/android/android_support.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/base_config.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/image.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/share/base_image.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/physfs-2.0.2/physfs.h",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/physfs-2.0.2/CMakeLists.txt",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/jni/application/neverball/physfs-2.0.2/archivers/zip.c",
		"/Users/gjtorikian/Dropbox/workspace/commandergenius/project/java/Accelerometer.java",
		"/Users/gjtorikian/Dropbox/workspace/Shelves/assets/html/versions.html",
		"/Users/gjtorikian/Dropbox/workspace/Shelves/assets/html/about.html",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c",
		"/Users/gjtorikian/Desktop/jg.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/models/act1/SkyDome_Night.obj.md5mesh",
		"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1.mtl",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/world.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/enemy.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/main.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/filesystem.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.h",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/commands.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/menu.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1_pvr.mtl",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/android_utils.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/md5.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials.lbr",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/entities.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/camera.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/sounds.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/material.c",
		"/Users/gjtorikian/Dropbox/native-activity/src/com/miadzin/shmup/TouchpadNAActivity.java",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/android_utils.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/filesystem.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/zipint.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/Application.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/libpng/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/config.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/matrix.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/math_shmup.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/math.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/collisions.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/commands.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/dEngine.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/enemy.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/enemy_particules.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/fx.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/ItextureLoader.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/material.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/md5.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/menu.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/preproc.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/camera.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/quaternion.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/event.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/event.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/md5.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/entities.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/main.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/android_utils.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/openal/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/filesystem.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/commands.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/titles.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/preproc.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/menu.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/Alc/android.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/camera.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/dEngine.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer_fixed.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/texture.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/androidEGL.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/sounds.c"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"*.java",
			"*.c, *.h",
			"*.c",
			"*.h",
			"*.c",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"combineMultilin",
			"combineMultiline",
			"GJT",
			"L10N",
			"get_translated_text",
			"L_(",
			"RELEASE_BUILD",
			"L_",
			"fput",
			"static_env",
			"combineMultilineL10N",
			"msgid \"\"",
			"Warning",
			"fs_open",
			"lang_init",
			"fs_open(",
			"fs_open",
			"GUI_FACE",
			"\"/",
			"assets/data",
			"fs_exists",
			"GUI_FACE",
			"ttf",
			".tff",
			"fs_open(\"",
			"fs_open(",
			" got",
			"ANDROID_DA",
			"Play",
			"LANGUAGE",
			"^",
			"ANDROID_DATA",
			"assets/",
			"po/",
			"gettext_by_parsing",
			"trim_quotes_and_whitespace",
			"RELEASE_BUILD",
			"RELEASE_BUI",
			"^",
			"setDimensions",
			"deviceWidth",
			" ENABLE_NLS &",
			"#define ENABLE_NLS &",
			" & ",
			"defineHashTableLocale",
			"++",
			"xyz",
			"++",
			"setDim",
			"GJT",
			"lang",
			"===",
			"<<<",
			"======",
			"<<<",
			">>>",
			"<<",
			">>>",
			"<",
			"GJT",
			"lang",
			"nativeSetEnv",
			"DemoRenderer(",
			"prependString",
			"domain",
			"gettext_by_parsing",
			"setDimensions",
			"goto_name",
			"CONF_PLAYER",
			"Player Na",
			"PLAYER NAME",
			"xyz",
			"got",
			"setDimensions",
			"ataPa",
			"_init",
			"opt_da",
			"_init",
			"data",
			"opt_da",
			"_in",
			"opt_da",
			"_init",
			"curr_tex_env",
			"gui_click",
			"active",
			"gui_active",
			"move_step",
			"CMD_TILT_AXES",
			"MOVE_TIME",
			"CLAMP",
			"sol_step",
			"solid_sim_sol",
			"solid_sim_sol.c",
			"sol_body_step",
			"sync",
			"data",
			"opt_data",
			"fs_base_dir",
			"init",
			"OUTTA!",
			"DEBUG OUTTA",
			"DEBUG ",
			"DEBUG",
			"OUTTA",
			"goto_state",
			"printf",
			"LOGE",
			"BPP",
			"16",
			"32",
			"bpp",
			"ENABLE_OPENGLES",
			"GL_VERSION_ES_CM_1_0",
			"ENABLE_OPENGLES",
			"printf",
			"audio_init",
			"sol_load_draw",
			"printf",
			"fs_printf",
			"printf",
			"opt_error",
			"printf",
			"glEnable(GL_BLEND);",
			"CONF",
			"SDL_SetVideoMode",
			"SDL_Update",
			"SDL_Flip"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"string",
			"#include \"math_shmup.h\"",
			"ANDROID_PATH",
			"env",
			"envNA",
			"Shmup",
			"openal",
			"",
			".h>",
			"#include <",
			"",
			"engine_info_t*",
			"h_engine->",
			"engine.",
			"engine->",
			"engine.",
			"engine_info_t",
			"engine.",
			"bytep"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"settings":
					{
						"buffer_size": 304044,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										219,
										227
									],
									[
										550,
										558
									],
									[
										949,
										957
									],
									[
										970,
										978
									],
									[
										1325,
										1333
									],
									[
										1418,
										1426
									],
									[
										1787,
										1795
									],
									[
										2204,
										2214
									],
									[
										2464,
										2474
									],
									[
										2817,
										2825
									],
									[
										2974,
										2982
									],
									[
										3146,
										3154
									],
									[
										3383,
										3391
									],
									[
										3542,
										3550
									],
									[
										3710,
										3718
									],
									[
										3814,
										3822
									],
									[
										4083,
										4091
									],
									[
										4393,
										4401
									],
									[
										4512,
										4520
									],
									[
										4749,
										4757
									],
									[
										4901,
										4909
									],
									[
										5133,
										5141
									],
									[
										5371,
										5379
									],
									[
										5664,
										5672
									],
									[
										5889,
										5897
									],
									[
										6167,
										6175
									],
									[
										6430,
										6438
									],
									[
										6759,
										6767
									],
									[
										7001,
										7009
									],
									[
										7143,
										7151
									],
									[
										7315,
										7323
									],
									[
										7592,
										7600
									],
									[
										7735,
										7743
									],
									[
										7880,
										7888
									],
									[
										8343,
										8346
									],
									[
										8652,
										8655
									],
									[
										8786,
										8789
									],
									[
										8849,
										8852
									],
									[
										8946,
										8949
									],
									[
										9211,
										9214
									],
									[
										9231,
										9234
									],
									[
										9418,
										9421
									],
									[
										9652,
										9655
									],
									[
										9876,
										9879
									],
									[
										10039,
										10042
									],
									[
										10059,
										10062
									],
									[
										10079,
										10082
									],
									[
										10099,
										10102
									],
									[
										10195,
										10198
									],
									[
										10263,
										10266
									],
									[
										10437,
										10440
									],
									[
										10457,
										10460
									],
									[
										10477,
										10480
									],
									[
										10497,
										10500
									],
									[
										10593,
										10596
									],
									[
										10648,
										10651
									],
									[
										10812,
										10815
									],
									[
										11053,
										11056
									],
									[
										11251,
										11254
									],
									[
										11588,
										11591
									],
									[
										11782,
										11785
									],
									[
										11991,
										11994
									],
									[
										12264,
										12267
									],
									[
										12524,
										12527
									],
									[
										12574,
										12577
									],
									[
										12765,
										12768
									],
									[
										12947,
										12950
									],
									[
										13179,
										13182
									],
									[
										13199,
										13202
									],
									[
										13219,
										13222
									],
									[
										13239,
										13242
									],
									[
										13335,
										13338
									],
									[
										13403,
										13406
									],
									[
										13567,
										13570
									],
									[
										13587,
										13590
									],
									[
										13700,
										13703
									],
									[
										13866,
										13869
									],
									[
										13886,
										13889
									],
									[
										13906,
										13909
									],
									[
										13926,
										13929
									],
									[
										14022,
										14025
									],
									[
										14102,
										14105
									],
									[
										14267,
										14270
									],
									[
										14287,
										14290
									],
									[
										14307,
										14310
									],
									[
										14327,
										14330
									],
									[
										14423,
										14426
									],
									[
										14496,
										14499
									],
									[
										14660,
										14663
									],
									[
										14680,
										14683
									],
									[
										14700,
										14703
									],
									[
										14720,
										14723
									],
									[
										14816,
										14819
									],
									[
										15035,
										15038
									],
									[
										15055,
										15058
									],
									[
										15075,
										15078
									],
									[
										15095,
										15098
									],
									[
										15191,
										15194
									],
									[
										15264,
										15267
									],
									[
										15428,
										15431
									],
									[
										15448,
										15451
									],
									[
										15468,
										15471
									],
									[
										15488,
										15491
									],
									[
										15584,
										15587
									],
									[
										15642,
										15645
									],
									[
										15821,
										15824
									],
									[
										15841,
										15844
									],
									[
										15954,
										15957
									],
									[
										16177,
										16180
									],
									[
										16410,
										16413
									],
									[
										16514,
										16517
									],
									[
										16534,
										16537
									],
									[
										16554,
										16557
									],
									[
										16574,
										16577
									],
									[
										16703,
										16706
									],
									[
										16763,
										16766
									],
									[
										17079,
										17082
									],
									[
										17210,
										17213
									],
									[
										17589,
										17592
									],
									[
										17934,
										17937
									],
									[
										18222,
										18225
									],
									[
										18533,
										18536
									],
									[
										18876,
										18879
									],
									[
										19300,
										19303
									],
									[
										19357,
										19360
									],
									[
										19635,
										19638
									],
									[
										19882,
										19885
									],
									[
										20190,
										20193
									],
									[
										20364,
										20367
									],
									[
										20562,
										20565
									],
									[
										20582,
										20585
									],
									[
										20602,
										20605
									],
									[
										20622,
										20625
									],
									[
										20718,
										20721
									],
									[
										20788,
										20791
									],
									[
										20952,
										20955
									],
									[
										20972,
										20975
									],
									[
										21085,
										21088
									],
									[
										21251,
										21254
									],
									[
										21271,
										21274
									],
									[
										21291,
										21294
									],
									[
										21311,
										21314
									],
									[
										21407,
										21410
									],
									[
										21477,
										21480
									],
									[
										21648,
										21651
									],
									[
										21668,
										21671
									],
									[
										21688,
										21691
									],
									[
										21799,
										21802
									],
									[
										21968,
										21971
									],
									[
										21988,
										21991
									],
									[
										22008,
										22011
									],
									[
										22121,
										22124
									],
									[
										22162,
										22165
									],
									[
										22457,
										22465
									],
									[
										22591,
										22599
									],
									[
										22654,
										22662
									],
									[
										22857,
										22865
									],
									[
										22975,
										22983
									],
									[
										23208,
										23216
									],
									[
										23521,
										23530
									],
									[
										23733,
										23742
									],
									[
										23939,
										23948
									],
									[
										23959,
										23968
									],
									[
										23979,
										23988
									],
									[
										24183,
										24192
									],
									[
										24464,
										24473
									],
									[
										24576,
										24585
									],
									[
										24764,
										24773
									],
									[
										24965,
										24974
									],
									[
										25172,
										25181
									],
									[
										25572,
										25583
									],
									[
										25885,
										25896
									],
									[
										25989,
										26000
									],
									[
										26364,
										26375
									],
									[
										26603,
										26614
									],
									[
										27020,
										27031
									],
									[
										27226,
										27237
									],
									[
										27490,
										27492
									],
									[
										27611,
										27613
									],
									[
										27711,
										27713
									],
									[
										27950,
										27952
									],
									[
										28104,
										28106
									],
									[
										28210,
										28212
									],
									[
										28312,
										28314
									],
									[
										28417,
										28419
									],
									[
										28522,
										28524
									],
									[
										28635,
										28637
									],
									[
										28715,
										28717
									],
									[
										28808,
										28810
									],
									[
										28932,
										28934
									],
									[
										29043,
										29045
									],
									[
										29155,
										29157
									],
									[
										29266,
										29268
									],
									[
										29377,
										29379
									],
									[
										29487,
										29489
									],
									[
										29597,
										29599
									],
									[
										29717,
										29719
									],
									[
										29833,
										29835
									],
									[
										29949,
										29951
									],
									[
										30059,
										30061
									],
									[
										30171,
										30173
									],
									[
										30283,
										30285
									],
									[
										30392,
										30394
									],
									[
										30507,
										30509
									],
									[
										30583,
										30585
									],
									[
										30693,
										30695
									],
									[
										30803,
										30805
									],
									[
										30924,
										30926
									],
									[
										31035,
										31037
									],
									[
										31144,
										31146
									],
									[
										31255,
										31257
									],
									[
										31365,
										31367
									],
									[
										31478,
										31480
									],
									[
										31592,
										31594
									],
									[
										31704,
										31706
									],
									[
										31817,
										31819
									],
									[
										31929,
										31931
									],
									[
										32045,
										32047
									],
									[
										32164,
										32166
									],
									[
										32281,
										32283
									],
									[
										32399,
										32401
									],
									[
										32519,
										32521
									],
									[
										32607,
										32609
									],
									[
										32731,
										32733
									],
									[
										32849,
										32851
									],
									[
										32961,
										32963
									],
									[
										33078,
										33080
									],
									[
										33198,
										33200
									],
									[
										33324,
										33326
									],
									[
										33451,
										33453
									],
									[
										33547,
										33549
									],
									[
										33629,
										33631
									],
									[
										33708,
										33710
									],
									[
										33781,
										33783
									],
									[
										33824,
										33826
									],
									[
										33928,
										33930
									],
									[
										34013,
										34015
									],
									[
										34083,
										34085
									],
									[
										34155,
										34157
									],
									[
										34225,
										34227
									],
									[
										34298,
										34300
									],
									[
										34373,
										34375
									],
									[
										34445,
										34447
									],
									[
										34518,
										34520
									],
									[
										34587,
										34589
									],
									[
										34676,
										34678
									],
									[
										34758,
										34760
									],
									[
										34826,
										34828
									],
									[
										34906,
										34908
									],
									[
										34979,
										34981
									],
									[
										35050,
										35052
									],
									[
										35121,
										35123
									],
									[
										35194,
										35196
									],
									[
										35294,
										35296
									],
									[
										35376,
										35378
									],
									[
										35451,
										35453
									],
									[
										35525,
										35527
									],
									[
										35594,
										35596
									],
									[
										35670,
										35672
									],
									[
										35743,
										35745
									],
									[
										35819,
										35821
									],
									[
										35893,
										35895
									],
									[
										35964,
										35966
									],
									[
										36039,
										36041
									],
									[
										36108,
										36110
									],
									[
										36183,
										36185
									],
									[
										36256,
										36258
									],
									[
										36328,
										36330
									],
									[
										36398,
										36400
									],
									[
										36479,
										36481
									],
									[
										36546,
										36548
									],
									[
										36625,
										36627
									],
									[
										36698,
										36700
									],
									[
										36766,
										36768
									],
									[
										36835,
										36837
									],
									[
										36907,
										36909
									],
									[
										36978,
										36980
									],
									[
										37053,
										37055
									],
									[
										37126,
										37128
									],
									[
										37196,
										37198
									],
									[
										37266,
										37268
									],
									[
										37334,
										37336
									],
									[
										37407,
										37409
									],
									[
										37484,
										37486
									],
									[
										37557,
										37559
									],
									[
										37639,
										37641
									],
									[
										37715,
										37717
									],
									[
										37790,
										37792
									],
									[
										37863,
										37865
									],
									[
										37934,
										37936
									],
									[
										38007,
										38009
									],
									[
										38079,
										38081
									],
									[
										38148,
										38150
									],
									[
										38231,
										38233
									],
									[
										38302,
										38304
									],
									[
										38374,
										38376
									],
									[
										38453,
										38455
									],
									[
										38525,
										38527
									],
									[
										38604,
										38606
									],
									[
										38675,
										38677
									],
									[
										38759,
										38761
									],
									[
										38843,
										38845
									],
									[
										38928,
										38930
									],
									[
										39007,
										39009
									],
									[
										39102,
										39104
									],
									[
										39173,
										39175
									],
									[
										39265,
										39267
									],
									[
										39337,
										39339
									],
									[
										39408,
										39410
									],
									[
										39567,
										39569
									],
									[
										39691,
										39693
									],
									[
										39977,
										39979
									],
									[
										40284,
										40286
									],
									[
										40510,
										40512
									],
									[
										40736,
										40738
									],
									[
										41142,
										41144
									],
									[
										41436,
										41438
									],
									[
										41460,
										41462
									],
									[
										41470,
										41472
									],
									[
										41478,
										41480
									],
									[
										41532,
										41534
									],
									[
										41830,
										41832
									],
									[
										41943,
										41945
									],
									[
										42153,
										42155
									],
									[
										42358,
										42360
									],
									[
										42568,
										42570
									],
									[
										42964,
										42966
									],
									[
										43269,
										43271
									],
									[
										43629,
										43631
									],
									[
										44037,
										44039
									],
									[
										44430,
										44432
									],
									[
										44620,
										44622
									],
									[
										44838,
										44840
									],
									[
										45203,
										45205
									],
									[
										45527,
										45529
									],
									[
										45777,
										45779
									],
									[
										45925,
										45927
									],
									[
										46233,
										46235
									],
									[
										46548,
										46550
									],
									[
										46754,
										46756
									],
									[
										46996,
										46998
									],
									[
										47139,
										47141
									],
									[
										47378,
										47380
									],
									[
										47723,
										47725
									],
									[
										48131,
										48133
									],
									[
										48454,
										48456
									],
									[
										48594,
										48596
									],
									[
										48901,
										48903
									],
									[
										49018,
										49020
									],
									[
										49071,
										49073
									],
									[
										49176,
										49178
									],
									[
										49428,
										49430
									],
									[
										49496,
										49498
									],
									[
										49789,
										49791
									],
									[
										50020,
										50022
									],
									[
										50222,
										50224
									],
									[
										50429,
										50431
									],
									[
										50680,
										50682
									],
									[
										50955,
										50957
									],
									[
										51179,
										51181
									],
									[
										51292,
										51294
									],
									[
										51518,
										51520
									],
									[
										51742,
										51744
									],
									[
										51855,
										51857
									],
									[
										52175,
										52177
									],
									[
										52485,
										52487
									],
									[
										52734,
										52736
									],
									[
										53006,
										53008
									],
									[
										53393,
										53395
									],
									[
										53746,
										53748
									],
									[
										54053,
										54055
									],
									[
										54279,
										54281
									],
									[
										54505,
										54507
									],
									[
										54820,
										54822
									],
									[
										54844,
										54846
									],
									[
										54854,
										54856
									],
									[
										54862,
										54864
									],
									[
										54916,
										54918
									],
									[
										55214,
										55216
									],
									[
										55327,
										55329
									],
									[
										55537,
										55539
									],
									[
										55742,
										55744
									],
									[
										55952,
										55954
									],
									[
										56271,
										56273
									],
									[
										56521,
										56523
									],
									[
										56669,
										56671
									],
									[
										56977,
										56979
									],
									[
										57292,
										57294
									],
									[
										57498,
										57500
									],
									[
										57740,
										57742
									],
									[
										57883,
										57885
									],
									[
										58122,
										58124
									],
									[
										58467,
										58469
									],
									[
										58875,
										58877
									],
									[
										59198,
										59200
									],
									[
										59338,
										59340
									],
									[
										59645,
										59647
									],
									[
										59762,
										59764
									],
									[
										59815,
										59817
									],
									[
										59920,
										59922
									],
									[
										60172,
										60174
									],
									[
										60240,
										60242
									],
									[
										60533,
										60535
									],
									[
										60812,
										60820
									],
									[
										60930,
										60938
									],
									[
										61238,
										61246
									],
									[
										61547,
										61554
									],
									[
										61848,
										61855
									],
									[
										62005,
										62012
									],
									[
										62177,
										62184
									],
									[
										62414,
										62421
									],
									[
										62573,
										62580
									],
									[
										62741,
										62748
									],
									[
										62845,
										62852
									],
									[
										63114,
										63121
									],
									[
										63424,
										63431
									],
									[
										63543,
										63550
									],
									[
										63780,
										63787
									],
									[
										63932,
										63939
									],
									[
										64151,
										64158
									],
									[
										64444,
										64451
									],
									[
										64669,
										64676
									],
									[
										64947,
										64954
									],
									[
										65210,
										65217
									],
									[
										65539,
										65546
									],
									[
										65781,
										65788
									],
									[
										65923,
										65930
									],
									[
										66095,
										66102
									],
									[
										66372,
										66379
									],
									[
										66515,
										66522
									],
									[
										66660,
										66667
									],
									[
										66962,
										66970
									],
									[
										67119,
										67127
									],
									[
										67291,
										67299
									],
									[
										67528,
										67536
									],
									[
										67687,
										67695
									],
									[
										67855,
										67863
									],
									[
										67959,
										67967
									],
									[
										68228,
										68236
									],
									[
										68538,
										68546
									],
									[
										68657,
										68665
									],
									[
										68894,
										68902
									],
									[
										69046,
										69054
									],
									[
										69265,
										69273
									],
									[
										69558,
										69566
									],
									[
										69783,
										69791
									],
									[
										70061,
										70069
									],
									[
										70324,
										70332
									],
									[
										70653,
										70661
									],
									[
										70895,
										70903
									],
									[
										71037,
										71045
									],
									[
										71209,
										71217
									],
									[
										71486,
										71494
									],
									[
										71629,
										71637
									],
									[
										71774,
										71782
									],
									[
										72059,
										72068
									],
									[
										72247,
										72256
									],
									[
										72541,
										72548
									],
									[
										72698,
										72705
									],
									[
										72870,
										72877
									],
									[
										73118,
										73125
									],
									[
										73376,
										73383
									],
									[
										73535,
										73542
									],
									[
										73703,
										73710
									],
									[
										73807,
										73814
									],
									[
										74076,
										74083
									],
									[
										74386,
										74393
									],
									[
										74505,
										74512
									],
									[
										74742,
										74749
									],
									[
										74894,
										74901
									],
									[
										75113,
										75120
									],
									[
										75406,
										75413
									],
									[
										75631,
										75638
									],
									[
										75909,
										75916
									],
									[
										76172,
										76179
									],
									[
										76461,
										76468
									],
									[
										76703,
										76710
									],
									[
										76845,
										76852
									],
									[
										77017,
										77024
									],
									[
										77294,
										77301
									],
									[
										77437,
										77444
									],
									[
										77582,
										77589
									],
									[
										77890,
										77910
									],
									[
										78331,
										78351
									],
									[
										78412,
										78432
									],
									[
										78803,
										78813
									],
									[
										78829,
										78839
									],
									[
										78891,
										78901
									],
									[
										78922,
										78932
									],
									[
										79023,
										79033
									],
									[
										79054,
										79064
									],
									[
										79094,
										79104
									],
									[
										79129,
										79139
									],
									[
										79465,
										79475
									],
									[
										79491,
										79501
									],
									[
										79553,
										79563
									],
									[
										79584,
										79594
									],
									[
										79685,
										79695
									],
									[
										79716,
										79726
									],
									[
										79756,
										79766
									],
									[
										79791,
										79801
									],
									[
										80017,
										80027
									],
									[
										80301,
										80305
									],
									[
										80603,
										80607
									],
									[
										80820,
										80824
									],
									[
										81191,
										81193
									],
									[
										81243,
										81245
									],
									[
										81570,
										81572
									],
									[
										81866,
										81868
									],
									[
										82059,
										82061
									],
									[
										82330,
										82332
									],
									[
										82580,
										82582
									],
									[
										82751,
										82753
									],
									[
										82907,
										82909
									],
									[
										83033,
										83035
									],
									[
										83156,
										83158
									],
									[
										83455,
										83457
									],
									[
										83653,
										83655
									],
									[
										83686,
										83688
									],
									[
										83697,
										83699
									],
									[
										83744,
										83746
									],
									[
										83755,
										83757
									],
									[
										83802,
										83804
									],
									[
										83813,
										83815
									],
									[
										83867,
										83869
									],
									[
										83900,
										83902
									],
									[
										83911,
										83913
									],
									[
										83958,
										83960
									],
									[
										83969,
										83971
									],
									[
										84016,
										84018
									],
									[
										84027,
										84029
									],
									[
										84190,
										84192
									],
									[
										84306,
										84308
									],
									[
										84377,
										84379
									],
									[
										84507,
										84509
									],
									[
										84637,
										84639
									],
									[
										84734,
										84736
									],
									[
										84932,
										84934
									],
									[
										84973,
										84975
									],
									[
										85152,
										85154
									],
									[
										85186,
										85188
									],
									[
										85263,
										85265
									],
									[
										85457,
										85459
									],
									[
										85465,
										85467
									],
									[
										85629,
										85631
									],
									[
										85695,
										85697
									],
									[
										85707,
										85709
									],
									[
										85719,
										85721
									],
									[
										85771,
										85773
									],
									[
										85781,
										85783
									],
									[
										85791,
										85793
									],
									[
										85801,
										85803
									],
									[
										85851,
										85853
									],
									[
										85970,
										85972
									],
									[
										86019,
										86021
									],
									[
										86028,
										86030
									],
									[
										86037,
										86039
									],
									[
										86046,
										86048
									],
									[
										86095,
										86097
									],
									[
										86104,
										86106
									],
									[
										86113,
										86115
									],
									[
										86164,
										86166
									],
									[
										86333,
										86335
									],
									[
										86529,
										86531
									],
									[
										86587,
										86589
									],
									[
										86671,
										86673
									],
									[
										86679,
										86681
									],
									[
										86897,
										86899
									],
									[
										87033,
										87035
									],
									[
										87162,
										87164
									],
									[
										87351,
										87353
									],
									[
										87580,
										87582
									],
									[
										87852,
										87854
									],
									[
										88054,
										88056
									],
									[
										88077,
										88079
									],
									[
										88164,
										88166
									],
									[
										88199,
										88201
									],
									[
										88399,
										88401
									],
									[
										88418,
										88420
									],
									[
										88524,
										88526
									],
									[
										88543,
										88545
									],
									[
										88725,
										88727
									],
									[
										88823,
										88825
									],
									[
										88980,
										88982
									],
									[
										89080,
										89082
									],
									[
										89191,
										89193
									],
									[
										89291,
										89293
									],
									[
										89358,
										89360
									],
									[
										89547,
										89549
									],
									[
										89675,
										89677
									],
									[
										89801,
										89803
									],
									[
										89910,
										89912
									],
									[
										90017,
										90019
									],
									[
										90075,
										90077
									],
									[
										90265,
										90267
									],
									[
										90407,
										90409
									],
									[
										90534,
										90536
									],
									[
										90681,
										90683
									],
									[
										90995,
										90997
									],
									[
										91174,
										91176
									],
									[
										91293,
										91295
									],
									[
										91302,
										91304
									],
									[
										91319,
										91321
									],
									[
										91336,
										91338
									],
									[
										91414,
										91416
									],
									[
										91569,
										91571
									],
									[
										91627,
										91629
									],
									[
										91726,
										91728
									],
									[
										91749,
										91751
									],
									[
										91854,
										91856
									],
									[
										91942,
										91944
									],
									[
										92114,
										92116
									],
									[
										92207,
										92209
									],
									[
										92274,
										92276
									],
									[
										92499,
										92501
									],
									[
										92562,
										92564
									],
									[
										92814,
										92816
									],
									[
										93062,
										93064
									],
									[
										93221,
										93223
									],
									[
										93391,
										93393
									],
									[
										93543,
										93545
									],
									[
										93546,
										93548
									],
									[
										93714,
										93716
									],
									[
										93747,
										93749
									],
									[
										93769,
										93771
									],
									[
										93879,
										93881
									],
									[
										94075,
										94077
									],
									[
										94189,
										94191
									],
									[
										94338,
										94340
									],
									[
										94492,
										94494
									],
									[
										94686,
										94688
									],
									[
										94905,
										94907
									],
									[
										95059,
										95061
									],
									[
										95253,
										95255
									],
									[
										95410,
										95412
									],
									[
										95572,
										95574
									],
									[
										95597,
										95599
									],
									[
										95862,
										95864
									],
									[
										96076,
										96078
									],
									[
										96137,
										96139
									],
									[
										96323,
										96325
									],
									[
										96356,
										96358
									],
									[
										96378,
										96380
									],
									[
										96400,
										96402
									],
									[
										96422,
										96424
									],
									[
										96509,
										96511
									],
									[
										96536,
										96538
									],
									[
										96647,
										96649
									],
									[
										96767,
										96769
									],
									[
										96909,
										96911
									],
									[
										97125,
										97127
									],
									[
										97258,
										97260
									],
									[
										97391,
										97393
									],
									[
										97515,
										97517
									],
									[
										97741,
										97743
									],
									[
										97903,
										97905
									],
									[
										97928,
										97930
									],
									[
										98096,
										98098
									],
									[
										98129,
										98131
									],
									[
										98151,
										98153
									],
									[
										98173,
										98175
									],
									[
										98195,
										98197
									],
									[
										98217,
										98219
									],
									[
										98239,
										98241
									],
									[
										98326,
										98328
									],
									[
										98353,
										98355
									],
									[
										98464,
										98466
									],
									[
										98646,
										98648
									],
									[
										98789,
										98791
									],
									[
										98950,
										98952
									],
									[
										99092,
										99094
									],
									[
										99315,
										99317
									],
									[
										99434,
										99436
									],
									[
										99567,
										99569
									],
									[
										99700,
										99702
									],
									[
										99824,
										99826
									],
									[
										100072,
										100074
									],
									[
										100294,
										100296
									],
									[
										100456,
										100458
									],
									[
										100481,
										100483
									],
									[
										100694,
										100696
									],
									[
										100837,
										100839
									],
									[
										100853,
										100855
									],
									[
										100880,
										100882
									],
									[
										101036,
										101038
									],
									[
										101062,
										101064
									],
									[
										101229,
										101231
									],
									[
										101342,
										101344
									],
									[
										101571,
										101573
									],
									[
										101799,
										101801
									],
									[
										101977,
										101979
									],
									[
										102182,
										102184
									],
									[
										102334,
										102336
									],
									[
										102546,
										102548
									],
									[
										102692,
										102694
									],
									[
										102950,
										102952
									],
									[
										103112,
										103114
									],
									[
										103336,
										103338
									],
									[
										103600,
										103602
									],
									[
										103663,
										103665
									],
									[
										103888,
										103890
									],
									[
										104043,
										104045
									],
									[
										104155,
										104157
									],
									[
										104254,
										104256
									],
									[
										104448,
										104450
									],
									[
										104528,
										104530
									],
									[
										104725,
										104727
									],
									[
										104747,
										104749
									],
									[
										104954,
										104956
									],
									[
										105134,
										105136
									],
									[
										105250,
										105252
									],
									[
										105427,
										105429
									],
									[
										105597,
										105599
									],
									[
										105835,
										105837
									],
									[
										106114,
										106116
									],
									[
										106307,
										106309
									],
									[
										106352,
										106354
									],
									[
										106485,
										106487
									],
									[
										106729,
										106731
									],
									[
										106929,
										106931
									],
									[
										107073,
										107075
									],
									[
										107235,
										107237
									],
									[
										107297,
										107299
									],
									[
										107366,
										107368
									],
									[
										107477,
										107479
									],
									[
										107709,
										107711
									],
									[
										107791,
										107793
									],
									[
										107946,
										107948
									],
									[
										108010,
										108012
									],
									[
										108129,
										108131
									],
									[
										108181,
										108183
									],
									[
										108300,
										108302
									],
									[
										108499,
										108501
									],
									[
										108677,
										108679
									],
									[
										108872,
										108874
									],
									[
										109022,
										109024
									],
									[
										109213,
										109215
									],
									[
										109409,
										109411
									],
									[
										109540,
										109542
									],
									[
										109725,
										109727
									],
									[
										109865,
										109867
									],
									[
										110037,
										110039
									],
									[
										110309,
										110311
									],
									[
										110476,
										110478
									],
									[
										110737,
										110739
									],
									[
										110925,
										110927
									],
									[
										111053,
										111055
									],
									[
										111313,
										111315
									],
									[
										111558,
										111560
									],
									[
										111700,
										111702
									],
									[
										111807,
										111809
									],
									[
										111957,
										111959
									],
									[
										112115,
										112117
									],
									[
										112314,
										112316
									],
									[
										112464,
										112466
									],
									[
										112571,
										112573
									],
									[
										112751,
										112753
									],
									[
										112909,
										112911
									],
									[
										113092,
										113094
									],
									[
										113244,
										113246
									],
									[
										113504,
										113506
									],
									[
										113722,
										113724
									],
									[
										113794,
										113796
									],
									[
										113967,
										113969
									],
									[
										114143,
										114145
									],
									[
										114302,
										114304
									],
									[
										114475,
										114477
									],
									[
										114633,
										114635
									],
									[
										114806,
										114808
									],
									[
										114883,
										114885
									],
									[
										115041,
										115043
									],
									[
										115214,
										115216
									],
									[
										115372,
										115374
									],
									[
										115543,
										115545
									],
									[
										115701,
										115703
									],
									[
										115971,
										115973
									],
									[
										116137,
										116139
									],
									[
										116282,
										116284
									],
									[
										116449,
										116451
									],
									[
										116521,
										116523
									],
									[
										116570,
										116572
									],
									[
										116822,
										116824
									],
									[
										117053,
										117055
									],
									[
										117124,
										117126
									],
									[
										117173,
										117175
									],
									[
										117399,
										117401
									],
									[
										117572,
										117574
									],
									[
										117709,
										117711
									],
									[
										117900,
										117902
									],
									[
										118013,
										118015
									],
									[
										118241,
										118243
									],
									[
										118504,
										118506
									],
									[
										118684,
										118686
									],
									[
										118898,
										118900
									],
									[
										119133,
										119135
									],
									[
										119456,
										119458
									],
									[
										119640,
										119642
									],
									[
										119847,
										119849
									],
									[
										119911,
										119913
									],
									[
										120097,
										120099
									],
									[
										120161,
										120163
									],
									[
										120347,
										120349
									],
									[
										120411,
										120413
									],
									[
										120597,
										120599
									],
									[
										120661,
										120663
									],
									[
										120847,
										120849
									],
									[
										120911,
										120913
									],
									[
										121097,
										121099
									],
									[
										121161,
										121163
									],
									[
										121347,
										121349
									],
									[
										121411,
										121413
									],
									[
										121597,
										121599
									],
									[
										121661,
										121663
									],
									[
										121847,
										121849
									],
									[
										121911,
										121913
									],
									[
										122097,
										122099
									],
									[
										122161,
										122163
									],
									[
										122347,
										122349
									],
									[
										122411,
										122413
									],
									[
										122597,
										122599
									],
									[
										122661,
										122663
									],
									[
										122872,
										122874
									],
									[
										123079,
										123081
									],
									[
										123286,
										123288
									],
									[
										123493,
										123495
									],
									[
										123700,
										123702
									],
									[
										123907,
										123909
									],
									[
										124114,
										124116
									],
									[
										124321,
										124323
									],
									[
										124528,
										124530
									],
									[
										124735,
										124737
									],
									[
										124942,
										124944
									],
									[
										125149,
										125151
									],
									[
										125440,
										125442
									],
									[
										125691,
										125693
									],
									[
										125734,
										125736
									],
									[
										125781,
										125783
									],
									[
										126033,
										126035
									],
									[
										126377,
										126379
									],
									[
										126701,
										126703
									],
									[
										126778,
										126780
									],
									[
										127107,
										127109
									],
									[
										127293,
										127295
									],
									[
										127302,
										127304
									],
									[
										127587,
										127589
									],
									[
										127649,
										127651
									],
									[
										127973,
										127975
									],
									[
										128324,
										128326
									],
									[
										128675,
										128677
									],
									[
										129030,
										129032
									],
									[
										129116,
										129118
									],
									[
										129479,
										129481
									],
									[
										129695,
										129697
									],
									[
										129704,
										129706
									],
									[
										130009,
										130011
									],
									[
										130081,
										130083
									],
									[
										130437,
										130439
									],
									[
										130810,
										130812
									],
									[
										131207,
										131209
									],
									[
										131533,
										131535
									],
									[
										131601,
										131603
									],
									[
										131922,
										131924
									],
									[
										132106,
										132108
									],
									[
										132115,
										132117
									],
									[
										132412,
										132414
									],
									[
										132474,
										132476
									],
									[
										132842,
										132844
									],
									[
										133196,
										133198
									],
									[
										133540,
										133542
									],
									[
										133895,
										133897
									],
									[
										133978,
										133980
									],
									[
										134330,
										134332
									],
									[
										134523,
										134525
									],
									[
										134532,
										134534
									],
									[
										134847,
										134849
									],
									[
										134914,
										134916
									],
									[
										135291,
										135293
									],
									[
										135664,
										135666
									],
									[
										136021,
										136023
									],
									[
										136364,
										136366
									],
									[
										136435,
										136437
									],
									[
										136772,
										136774
									],
									[
										136962,
										136964
									],
									[
										136971,
										136973
									],
									[
										137280,
										137282
									],
									[
										137348,
										137350
									],
									[
										137693,
										137695
									],
									[
										138060,
										138062
									],
									[
										138417,
										138419
									],
									[
										138762,
										138764
									],
									[
										138847,
										138849
									],
									[
										139212,
										139214
									],
									[
										139418,
										139420
									],
									[
										139427,
										139429
									],
									[
										139740,
										139742
									],
									[
										139811,
										139813
									],
									[
										140199,
										140201
									],
									[
										140527,
										140529
									],
									[
										140750,
										140752
									],
									[
										140921,
										140923
									],
									[
										141093,
										141095
									],
									[
										141161,
										141163
									],
									[
										141242,
										141244
									],
									[
										141353,
										141355
									],
									[
										141789,
										141791
									],
									[
										142063,
										142065
									],
									[
										142287,
										142289
									],
									[
										142325,
										142327
									],
									[
										142386,
										142388
									],
									[
										142648,
										142650
									],
									[
										142874,
										142876
									],
									[
										143027,
										143029
									],
									[
										143095,
										143097
									],
									[
										143306,
										143308
									],
									[
										143489,
										143491
									],
									[
										143681,
										143683
									],
									[
										143846,
										143848
									],
									[
										144014,
										144016
									],
									[
										144193,
										144195
									],
									[
										144362,
										144364
									],
									[
										144491,
										144493
									],
									[
										144652,
										144654
									],
									[
										144939,
										144941
									],
									[
										145101,
										145103
									],
									[
										145213,
										145215
									],
									[
										145276,
										145278
									],
									[
										145512,
										145514
									],
									[
										145680,
										145682
									],
									[
										145805,
										145807
									],
									[
										145961,
										145963
									],
									[
										146235,
										146237
									],
									[
										146399,
										146401
									],
									[
										146595,
										146597
									],
									[
										146673,
										146675
									],
									[
										146742,
										146744
									],
									[
										146894,
										146896
									],
									[
										147073,
										147075
									],
									[
										147209,
										147211
									],
									[
										147436,
										147438
									],
									[
										147605,
										147607
									],
									[
										147768,
										147770
									],
									[
										147923,
										147925
									],
									[
										148165,
										148167
									],
									[
										148327,
										148329
									],
									[
										148439,
										148441
									],
									[
										148502,
										148504
									],
									[
										148738,
										148740
									],
									[
										148906,
										148908
									],
									[
										149031,
										149033
									],
									[
										149188,
										149190
									],
									[
										149462,
										149464
									],
									[
										149626,
										149628
									],
									[
										149887,
										149889
									],
									[
										149965,
										149967
									],
									[
										150034,
										150036
									],
									[
										150186,
										150188
									],
									[
										150365,
										150367
									],
									[
										150501,
										150503
									],
									[
										150728,
										150730
									],
									[
										150897,
										150899
									],
									[
										151060,
										151062
									],
									[
										151215,
										151217
									],
									[
										151458,
										151460
									],
									[
										151717,
										151719
									],
									[
										151860,
										151862
									],
									[
										151935,
										151937
									],
									[
										152199,
										152201
									],
									[
										152482,
										152484
									],
									[
										152625,
										152627
									],
									[
										152689,
										152691
									],
									[
										152906,
										152908
									],
									[
										153141,
										153143
									],
									[
										153265,
										153267
									],
									[
										153481,
										153483
									],
									[
										153588,
										153590
									],
									[
										153654,
										153656
									],
									[
										153827,
										153829
									],
									[
										154056,
										154058
									],
									[
										154239,
										154241
									],
									[
										154422,
										154424
									],
									[
										154522,
										154524
									],
									[
										154680,
										154682
									],
									[
										154727,
										154729
									],
									[
										155037,
										155039
									],
									[
										155175,
										155177
									],
									[
										155239,
										155241
									],
									[
										155436,
										155438
									],
									[
										155611,
										155613
									],
									[
										155776,
										155778
									],
									[
										155933,
										155935
									],
									[
										156176,
										156178
									],
									[
										156267,
										156269
									],
									[
										156446,
										156448
									],
									[
										156506,
										156508
									],
									[
										156686,
										156688
									],
									[
										156742,
										156744
									],
									[
										156893,
										156895
									],
									[
										156939,
										156941
									],
									[
										156986,
										156988
									],
									[
										157178,
										157180
									],
									[
										157233,
										157235
									],
									[
										157331,
										157333
									],
									[
										157377,
										157379
									],
									[
										157533,
										157535
									],
									[
										157596,
										157598
									],
									[
										157798,
										157800
									],
									[
										157854,
										157856
									],
									[
										158016,
										158018
									],
									[
										158068,
										158070
									],
									[
										158174,
										158176
									],
									[
										158305,
										158307
									],
									[
										158387,
										158389
									],
									[
										158512,
										158514
									],
									[
										158659,
										158661
									],
									[
										158794,
										158796
									],
									[
										158881,
										158883
									],
									[
										159155,
										159157
									],
									[
										159260,
										159262
									],
									[
										159488,
										159490
									],
									[
										159732,
										159734
									],
									[
										159835,
										159837
									],
									[
										159954,
										159956
									],
									[
										160071,
										160073
									],
									[
										160125,
										160127
									],
									[
										160441,
										160443
									],
									[
										160568,
										160570
									],
									[
										160646,
										160648
									],
									[
										160715,
										160717
									],
									[
										160867,
										160869
									],
									[
										160966,
										160968
									],
									[
										161102,
										161104
									],
									[
										161150,
										161152
									],
									[
										161250,
										161252
									],
									[
										161351,
										161353
									],
									[
										161404,
										161406
									],
									[
										161502,
										161504
									],
									[
										161600,
										161602
									],
									[
										161661,
										161663
									],
									[
										161877,
										161879
									],
									[
										161936,
										161938
									],
									[
										162162,
										162164
									],
									[
										162298,
										162300
									],
									[
										162507,
										162509
									],
									[
										162560,
										162562
									],
									[
										162628,
										162630
									],
									[
										162676,
										162678
									],
									[
										162730,
										162732
									],
									[
										162799,
										162801
									],
									[
										162847,
										162849
									],
									[
										162899,
										162901
									],
									[
										162964,
										162966
									],
									[
										163009,
										163011
									],
									[
										163057,
										163059
									],
									[
										163121,
										163123
									],
									[
										163166,
										163168
									],
									[
										163239,
										163241
									],
									[
										163414,
										163416
									],
									[
										163479,
										163481
									],
									[
										163544,
										163546
									],
									[
										163609,
										163611
									],
									[
										163674,
										163676
									],
									[
										163739,
										163741
									],
									[
										163804,
										163806
									],
									[
										163869,
										163871
									],
									[
										163934,
										163936
									],
									[
										163999,
										164001
									],
									[
										164064,
										164066
									],
									[
										164129,
										164131
									],
									[
										164194,
										164196
									],
									[
										164259,
										164261
									],
									[
										164324,
										164326
									],
									[
										164389,
										164391
									],
									[
										164454,
										164456
									],
									[
										164519,
										164521
									],
									[
										164584,
										164586
									],
									[
										164649,
										164651
									],
									[
										164898,
										164900
									],
									[
										165060,
										165062
									],
									[
										165173,
										165175
									],
									[
										165236,
										165238
									],
									[
										165474,
										165476
									],
									[
										165642,
										165644
									],
									[
										165767,
										165769
									],
									[
										165951,
										165953
									],
									[
										166227,
										166229
									],
									[
										166390,
										166392
									],
									[
										166554,
										166556
									],
									[
										166704,
										166706
									],
									[
										166904,
										166906
									],
									[
										166959,
										166961
									],
									[
										167109,
										167111
									],
									[
										167337,
										167339
									],
									[
										167508,
										167510
									],
									[
										167673,
										167675
									],
									[
										167830,
										167832
									],
									[
										168073,
										168075
									],
									[
										168235,
										168237
									],
									[
										168347,
										168349
									],
									[
										168410,
										168412
									],
									[
										168646,
										168648
									],
									[
										168814,
										168816
									],
									[
										168939,
										168941
									],
									[
										169158,
										169160
									],
									[
										169449,
										169451
									],
									[
										169613,
										169615
									],
									[
										169774,
										169776
									],
									[
										169953,
										169955
									],
									[
										170089,
										170091
									],
									[
										170316,
										170318
									],
									[
										170485,
										170487
									],
									[
										170648,
										170650
									],
									[
										170803,
										170805
									],
									[
										171043,
										171045
									],
									[
										171158,
										171160
									],
									[
										171214,
										171216
									],
									[
										171275,
										171277
									],
									[
										171398,
										171400
									],
									[
										171588,
										171590
									],
									[
										171812,
										171814
									],
									[
										172052,
										172054
									],
									[
										172338,
										172340
									],
									[
										172468,
										172470
									],
									[
										172692,
										172694
									],
									[
										172926,
										172928
									],
									[
										173143,
										173145
									],
									[
										173230,
										173232
									],
									[
										173418,
										173420
									],
									[
										173607,
										173609
									],
									[
										173768,
										173770
									],
									[
										173917,
										173919
									],
									[
										174030,
										174032
									],
									[
										174144,
										174146
									],
									[
										174285,
										174287
									],
									[
										174447,
										174449
									],
									[
										174525,
										174527
									],
									[
										174582,
										174584
									],
									[
										174609,
										174611
									],
									[
										174654,
										174656
									],
									[
										174711,
										174713
									],
									[
										174786,
										174788
									],
									[
										174864,
										174866
									],
									[
										174921,
										174923
									],
									[
										175000,
										175002
									],
									[
										175074,
										175076
									],
									[
										175131,
										175133
									],
									[
										175205,
										175207
									],
									[
										175262,
										175264
									],
									[
										175348,
										175350
									],
									[
										175405,
										175407
									],
									[
										175491,
										175493
									],
									[
										175552,
										175554
									],
									[
										175765,
										175767
									],
									[
										175842,
										175844
									],
									[
										175977,
										175979
									],
									[
										176157,
										176159
									],
									[
										176214,
										176216
									],
									[
										176243,
										176245
									],
									[
										176353,
										176355
									],
									[
										176420,
										176422
									],
									[
										176494,
										176496
									],
									[
										176571,
										176573
									],
									[
										176649,
										176651
									],
									[
										176775,
										176777
									],
									[
										176838,
										176840
									],
									[
										176913,
										176915
									],
									[
										176990,
										176992
									],
									[
										177051,
										177053
									],
									[
										177112,
										177114
									],
									[
										177175,
										177177
									],
									[
										177257,
										177259
									],
									[
										177343,
										177345
									],
									[
										177409,
										177411
									],
									[
										177602,
										177604
									],
									[
										177828,
										177830
									],
									[
										177995,
										177997
									],
									[
										178242,
										178244
									],
									[
										178288,
										178290
									],
									[
										178418,
										178420
									],
									[
										178475,
										178477
									],
									[
										178511,
										178513
									],
									[
										178605,
										178607
									],
									[
										178662,
										178664
									],
									[
										178811,
										178813
									],
									[
										178868,
										178870
									],
									[
										179014,
										179016
									],
									[
										179139,
										179141
									],
									[
										179208,
										179210
									],
									[
										179343,
										179345
									],
									[
										179453,
										179455
									],
									[
										179520,
										179522
									],
									[
										179681,
										179683
									],
									[
										179842,
										179844
									],
									[
										180071,
										180073
									],
									[
										180250,
										180252
									],
									[
										180381,
										180383
									],
									[
										180592,
										180594
									],
									[
										180811,
										180813
									],
									[
										181068,
										181070
									],
									[
										181244,
										181246
									],
									[
										181318,
										181320
									],
									[
										181618,
										181620
									],
									[
										181832,
										181834
									],
									[
										182004,
										182006
									],
									[
										182134,
										182136
									],
									[
										182333,
										182335
									],
									[
										182483,
										182485
									],
									[
										182666,
										182668
									],
									[
										182839,
										182841
									],
									[
										183002,
										183004
									],
									[
										183157,
										183159
									],
									[
										183425,
										183427
									],
									[
										183659,
										183661
									],
									[
										183843,
										183845
									],
									[
										184079,
										184081
									],
									[
										184369,
										184371
									],
									[
										184584,
										184586
									],
									[
										184710,
										184712
									],
									[
										184859,
										184861
									],
									[
										185014,
										185016
									],
									[
										185168,
										185170
									],
									[
										185434,
										185436
									],
									[
										185608,
										185610
									],
									[
										185776,
										185778
									],
									[
										185989,
										185991
									],
									[
										186265,
										186267
									],
									[
										186610,
										186612
									],
									[
										186719,
										186721
									],
									[
										186753,
										186755
									],
									[
										186785,
										186787
									],
									[
										186816,
										186818
									],
									[
										186849,
										186851
									],
									[
										186879,
										186881
									],
									[
										186910,
										186912
									],
									[
										186941,
										186943
									],
									[
										186973,
										186975
									],
									[
										187220,
										187222
									],
									[
										187254,
										187256
									],
									[
										187539,
										187541
									],
									[
										187668,
										187670
									],
									[
										187834,
										187836
									],
									[
										188020,
										188022
									],
									[
										188284,
										188286
									],
									[
										188550,
										188552
									],
									[
										188616,
										188618
									],
									[
										188718,
										188720
									],
									[
										188913,
										188915
									],
									[
										189145,
										189147
									],
									[
										189383,
										189385
									],
									[
										189587,
										189589
									],
									[
										189632,
										189634
									],
									[
										189824,
										189826
									],
									[
										190106,
										190108
									],
									[
										190253,
										190255
									],
									[
										190554,
										190556
									],
									[
										190779,
										190781
									],
									[
										190830,
										190832
									],
									[
										190956,
										190958
									],
									[
										191233,
										191235
									],
									[
										191283,
										191285
									],
									[
										191654,
										191656
									],
									[
										192022,
										192024
									],
									[
										192275,
										192277
									],
									[
										192574,
										192576
									],
									[
										192812,
										192814
									],
									[
										192857,
										192859
									],
									[
										193074,
										193076
									],
									[
										193185,
										193187
									],
									[
										193380,
										193382
									],
									[
										193425,
										193427
									],
									[
										193670,
										193672
									],
									[
										193891,
										193893
									],
									[
										194225,
										194227
									],
									[
										194410,
										194412
									],
									[
										194568,
										194570
									],
									[
										194779,
										194781
									],
									[
										194923,
										194925
									],
									[
										195096,
										195098
									],
									[
										195227,
										195229
									],
									[
										195481,
										195483
									],
									[
										195656,
										195658
									],
									[
										195884,
										195886
									],
									[
										196054,
										196056
									],
									[
										196240,
										196242
									],
									[
										196412,
										196414
									],
									[
										196602,
										196604
									],
									[
										196775,
										196777
									],
									[
										196956,
										196958
									],
									[
										197188,
										197190
									],
									[
										197382,
										197384
									],
									[
										197555,
										197557
									],
									[
										197807,
										197809
									],
									[
										197917,
										197919
									],
									[
										198101,
										198103
									],
									[
										198323,
										198325
									],
									[
										198571,
										198573
									],
									[
										198787,
										198789
									],
									[
										198974,
										198976
									],
									[
										199126,
										199128
									],
									[
										199269,
										199271
									],
									[
										199404,
										199406
									],
									[
										199566,
										199568
									],
									[
										199781,
										199783
									],
									[
										199856,
										199858
									],
									[
										200064,
										200066
									],
									[
										200251,
										200253
									],
									[
										200415,
										200417
									],
									[
										200638,
										200640
									],
									[
										200815,
										200817
									],
									[
										201003,
										201005
									],
									[
										201177,
										201179
									],
									[
										201482,
										201484
									],
									[
										201608,
										201610
									],
									[
										201780,
										201782
									],
									[
										201847,
										201849
									],
									[
										202043,
										202045
									],
									[
										202295,
										202297
									],
									[
										202468,
										202470
									],
									[
										202623,
										202625
									],
									[
										202840,
										202842
									],
									[
										203010,
										203012
									],
									[
										203199,
										203201
									],
									[
										203389,
										203391
									],
									[
										203613,
										203615
									],
									[
										203800,
										203802
									],
									[
										204179,
										204181
									],
									[
										204462,
										204464
									],
									[
										204650,
										204652
									],
									[
										204855,
										204857
									],
									[
										205066,
										205068
									],
									[
										205341,
										205343
									],
									[
										205566,
										205568
									],
									[
										205766,
										205768
									],
									[
										205990,
										205992
									],
									[
										206112,
										206114
									],
									[
										206319,
										206321
									],
									[
										206538,
										206540
									],
									[
										206780,
										206782
									],
									[
										206942,
										206944
									],
									[
										207010,
										207012
									],
									[
										207144,
										207146
									],
									[
										207311,
										207313
									],
									[
										207485,
										207487
									],
									[
										207740,
										207742
									],
									[
										207972,
										207974
									],
									[
										208021,
										208023
									],
									[
										208075,
										208077
									],
									[
										208280,
										208282
									],
									[
										208564,
										208566
									],
									[
										208716,
										208718
									],
									[
										208886,
										208888
									],
									[
										209071,
										209073
									],
									[
										209261,
										209263
									],
									[
										209414,
										209416
									],
									[
										209562,
										209564
									],
									[
										209714,
										209716
									],
									[
										209890,
										209892
									],
									[
										210073,
										210075
									],
									[
										210292,
										210294
									],
									[
										210421,
										210423
									],
									[
										210606,
										210608
									],
									[
										210791,
										210793
									],
									[
										210923,
										210925
									],
									[
										211218,
										211220
									],
									[
										211407,
										211409
									],
									[
										211653,
										211655
									],
									[
										211876,
										211878
									],
									[
										212254,
										212256
									],
									[
										212419,
										212421
									],
									[
										212501,
										212503
									],
									[
										212800,
										212802
									],
									[
										213089,
										213091
									],
									[
										213276,
										213278
									],
									[
										213386,
										213388
									],
									[
										213635,
										213637
									],
									[
										213880,
										213882
									],
									[
										214142,
										214144
									],
									[
										214488,
										214490
									],
									[
										214833,
										214835
									],
									[
										214890,
										214892
									],
									[
										215076,
										215078
									],
									[
										215220,
										215222
									],
									[
										215472,
										215474
									],
									[
										215589,
										215591
									],
									[
										215857,
										215859
									],
									[
										216042,
										216044
									],
									[
										216056,
										216058
									],
									[
										216250,
										216252
									],
									[
										216490,
										216492
									],
									[
										216537,
										216539
									],
									[
										216684,
										216686
									],
									[
										216801,
										216803
									],
									[
										216938,
										216940
									],
									[
										217181,
										217183
									],
									[
										217401,
										217403
									],
									[
										217659,
										217661
									],
									[
										217703,
										217705
									],
									[
										218014,
										218016
									],
									[
										218419,
										218421
									],
									[
										218553,
										218555
									],
									[
										218653,
										218655
									],
									[
										218814,
										218816
									],
									[
										219109,
										219111
									],
									[
										219220,
										219222
									],
									[
										219414,
										219416
									],
									[
										219667,
										219669
									],
									[
										219949,
										219951
									],
									[
										220241,
										220243
									],
									[
										220391,
										220393
									],
									[
										220674,
										220676
									],
									[
										220697,
										220699
									],
									[
										220808,
										220810
									],
									[
										221078,
										221080
									],
									[
										221280,
										221282
									],
									[
										221453,
										221455
									],
									[
										221637,
										221639
									],
									[
										221654,
										221656
									],
									[
										221786,
										221788
									],
									[
										221891,
										221893
									],
									[
										221971,
										221973
									],
									[
										222074,
										222076
									],
									[
										222256,
										222258
									],
									[
										222442,
										222444
									],
									[
										222553,
										222555
									],
									[
										222720,
										222722
									],
									[
										222855,
										222857
									],
									[
										222960,
										222962
									],
									[
										223114,
										223116
									],
									[
										223217,
										223219
									],
									[
										223371,
										223373
									],
									[
										223474,
										223476
									],
									[
										223609,
										223611
									],
									[
										223718,
										223720
									],
									[
										223838,
										223840
									],
									[
										223935,
										223937
									],
									[
										224055,
										224057
									],
									[
										224286,
										224288
									],
									[
										224427,
										224429
									],
									[
										224568,
										224570
									],
									[
										224741,
										224743
									],
									[
										224788,
										224790
									],
									[
										224951,
										224953
									],
									[
										225017,
										225019
									],
									[
										225061,
										225063
									],
									[
										225229,
										225231
									],
									[
										225293,
										225295
									],
									[
										225350,
										225352
									],
									[
										225477,
										225479
									],
									[
										225605,
										225607
									],
									[
										225652,
										225654
									],
									[
										225803,
										225805
									],
									[
										225865,
										225867
									],
									[
										225905,
										225907
									],
									[
										226036,
										226038
									],
									[
										226096,
										226098
									],
									[
										226149,
										226151
									],
									[
										226272,
										226274
									],
									[
										226400,
										226402
									],
									[
										226447,
										226449
									],
									[
										226598,
										226600
									],
									[
										226660,
										226662
									],
									[
										226700,
										226702
									],
									[
										226895,
										226897
									],
									[
										226955,
										226957
									],
									[
										227008,
										227010
									],
									[
										227131,
										227133
									],
									[
										227258,
										227260
									],
									[
										227370,
										227372
									],
									[
										227419,
										227421
									],
									[
										227531,
										227533
									],
									[
										227660,
										227662
									],
									[
										227767,
										227769
									],
									[
										227949,
										227951
									],
									[
										228069,
										228071
									],
									[
										228217,
										228219
									],
									[
										228337,
										228339
									],
									[
										228466,
										228468
									],
									[
										228581,
										228583
									],
									[
										228779,
										228781
									],
									[
										228912,
										228914
									],
									[
										229060,
										229062
									],
									[
										229193,
										229195
									],
									[
										229322,
										229324
									],
									[
										229450,
										229452
									],
									[
										229688,
										229690
									],
									[
										229710,
										229712
									],
									[
										229872,
										229874
									],
									[
										230107,
										230109
									],
									[
										230247,
										230249
									],
									[
										230480,
										230482
									],
									[
										230701,
										230703
									],
									[
										230718,
										230720
									],
									[
										230944,
										230946
									],
									[
										231066,
										231068
									],
									[
										231083,
										231085
									],
									[
										231251,
										231253
									],
									[
										231268,
										231270
									],
									[
										231436,
										231438
									],
									[
										231453,
										231455
									],
									[
										231620,
										231622
									],
									[
										231637,
										231639
									],
									[
										231824,
										231826
									],
									[
										231841,
										231843
									],
									[
										232028,
										232030
									],
									[
										232045,
										232047
									],
									[
										232300,
										232302
									],
									[
										232345,
										232347
									],
									[
										232532,
										232534
									],
									[
										232650,
										232652
									],
									[
										232788,
										232790
									],
									[
										232908,
										232910
									],
									[
										233066,
										233068
									],
									[
										233188,
										233190
									],
									[
										233348,
										233350
									],
									[
										233479,
										233481
									],
									[
										233673,
										233675
									],
									[
										233885,
										233887
									],
									[
										234011,
										234013
									],
									[
										234055,
										234057
									],
									[
										234096,
										234098
									],
									[
										234326,
										234328
									],
									[
										234558,
										234560
									],
									[
										234696,
										234698
									],
									[
										234744,
										234746
									],
									[
										234789,
										234791
									],
									[
										235060,
										235062
									],
									[
										235202,
										235204
									],
									[
										235286,
										235288
									],
									[
										235316,
										235318
									],
									[
										235343,
										235345
									],
									[
										235559,
										235561
									],
									[
										235634,
										235636
									],
									[
										235777,
										235779
									],
									[
										235970,
										235972
									],
									[
										236254,
										236256
									],
									[
										236340,
										236342
									],
									[
										236424,
										236426
									],
									[
										236617,
										236619
									],
									[
										236882,
										236884
									],
									[
										237088,
										237090
									],
									[
										237182,
										237184
									],
									[
										237279,
										237281
									],
									[
										237377,
										237379
									],
									[
										237477,
										237479
									],
									[
										237657,
										237659
									],
									[
										237722,
										237724
									],
									[
										237787,
										237789
									],
									[
										237852,
										237854
									],
									[
										237917,
										237919
									],
									[
										238155,
										238157
									],
									[
										238427,
										238429
									],
									[
										238799,
										238801
									],
									[
										238995,
										238997
									],
									[
										239232,
										239234
									],
									[
										239384,
										239386
									],
									[
										239562,
										239564
									],
									[
										239741,
										239743
									],
									[
										239868,
										239870
									],
									[
										239930,
										239932
									],
									[
										239987,
										239989
									],
									[
										240033,
										240035
									],
									[
										240132,
										240134
									],
									[
										240373,
										240375
									],
									[
										240424,
										240426
									],
									[
										240466,
										240468
									],
									[
										240686,
										240688
									],
									[
										240792,
										240794
									],
									[
										240842,
										240844
									],
									[
										240948,
										240950
									],
									[
										240998,
										241000
									],
									[
										241046,
										241048
									],
									[
										241152,
										241154
									],
									[
										241202,
										241204
									],
									[
										241336,
										241338
									],
									[
										241452,
										241454
									],
									[
										241468,
										241470
									],
									[
										241489,
										241491
									],
									[
										241543,
										241545
									],
									[
										241625,
										241627
									],
									[
										241723,
										241725
									],
									[
										241857,
										241859
									],
									[
										241984,
										241986
									],
									[
										242000,
										242002
									],
									[
										242021,
										242023
									],
									[
										242071,
										242073
									],
									[
										242087,
										242089
									],
									[
										242103,
										242105
									],
									[
										242146,
										242148
									],
									[
										242162,
										242164
									],
									[
										242175,
										242177
									],
									[
										242218,
										242220
									],
									[
										242234,
										242236
									],
									[
										242247,
										242249
									],
									[
										242289,
										242291
									],
									[
										242305,
										242307
									],
									[
										242322,
										242324
									],
									[
										242366,
										242368
									],
									[
										242382,
										242384
									],
									[
										242399,
										242401
									],
									[
										242515,
										242517
									],
									[
										242531,
										242533
									],
									[
										242549,
										242551
									],
									[
										242591,
										242593
									],
									[
										242607,
										242609
									],
									[
										242622,
										242624
									],
									[
										242665,
										242667
									],
									[
										242681,
										242683
									],
									[
										242700,
										242702
									],
									[
										242755,
										242757
									],
									[
										242837,
										242839
									],
									[
										242935,
										242937
									],
									[
										243069,
										243071
									],
									[
										243208,
										243210
									],
									[
										243224,
										243226
									],
									[
										243245,
										243247
									],
									[
										243295,
										243297
									],
									[
										243311,
										243313
									],
									[
										243327,
										243329
									],
									[
										243373,
										243375
									],
									[
										243389,
										243391
									],
									[
										243402,
										243404
									],
									[
										243445,
										243447
									],
									[
										243461,
										243463
									],
									[
										243474,
										243476
									],
									[
										243522,
										243524
									],
									[
										243538,
										243540
									],
									[
										243551,
										243553
									],
									[
										243593,
										243595
									],
									[
										243609,
										243611
									],
									[
										243626,
										243628
									],
									[
										243670,
										243672
									],
									[
										243686,
										243688
									],
									[
										243703,
										243705
									],
									[
										243747,
										243749
									],
									[
										243763,
										243765
									],
									[
										243780,
										243782
									],
									[
										243886,
										243888
									],
									[
										243902,
										243904
									],
									[
										243920,
										243922
									],
									[
										243962,
										243964
									],
									[
										243978,
										243980
									],
									[
										243993,
										243995
									],
									[
										244036,
										244038
									],
									[
										244052,
										244054
									],
									[
										244071,
										244073
									],
									[
										244126,
										244128
									],
									[
										244208,
										244210
									],
									[
										244306,
										244308
									],
									[
										244440,
										244442
									],
									[
										244572,
										244574
									],
									[
										244588,
										244590
									],
									[
										244609,
										244611
									],
									[
										244705,
										244707
									],
									[
										244873,
										244875
									],
									[
										244888,
										244890
									],
									[
										244907,
										244909
									],
									[
										245079,
										245081
									],
									[
										245156,
										245158
									],
									[
										245327,
										245329
									],
									[
										245405,
										245407
									],
									[
										245563,
										245565
									],
									[
										245637,
										245639
									],
									[
										245812,
										245814
									],
									[
										245886,
										245888
									],
									[
										246053,
										246055
									],
									[
										246094,
										246096
									],
									[
										246099,
										246101
									],
									[
										246134,
										246136
									],
									[
										246175,
										246177
									],
									[
										246370,
										246372
									],
									[
										246404,
										246406
									],
									[
										246442,
										246444
									],
									[
										246447,
										246449
									],
									[
										246481,
										246483
									],
									[
										246635,
										246637
									],
									[
										246650,
										246652
									],
									[
										246669,
										246671
									],
									[
										246719,
										246721
									],
									[
										246734,
										246736
									],
									[
										246753,
										246755
									],
									[
										246873,
										246875
									],
									[
										246932,
										246934
									],
									[
										246974,
										246976
									],
									[
										247027,
										247029
									],
									[
										247047,
										247049
									],
									[
										247112,
										247114
									],
									[
										247127,
										247129
									],
									[
										247150,
										247152
									],
									[
										247190,
										247192
									],
									[
										247205,
										247207
									],
									[
										247228,
										247230
									],
									[
										247276,
										247278
									],
									[
										247291,
										247293
									],
									[
										247310,
										247312
									],
									[
										247356,
										247358
									],
									[
										247371,
										247373
									],
									[
										247390,
										247392
									],
									[
										247517,
										247519
									],
									[
										247562,
										247564
									],
									[
										247697,
										247699
									],
									[
										247752,
										247754
									],
									[
										247889,
										247891
									],
									[
										247933,
										247935
									],
									[
										248057,
										248059
									],
									[
										248105,
										248107
									],
									[
										248326,
										248328
									],
									[
										248361,
										248363
									],
									[
										248592,
										248594
									],
									[
										248910,
										248912
									],
									[
										249163,
										249165
									],
									[
										249166,
										249168
									],
									[
										249215,
										249217
									],
									[
										249218,
										249220
									],
									[
										249392,
										249394
									],
									[
										249570,
										249572
									],
									[
										249641,
										249643
									],
									[
										249644,
										249646
									],
									[
										249721,
										249723
									],
									[
										249724,
										249726
									],
									[
										249916,
										249918
									],
									[
										249919,
										249921
									],
									[
										249987,
										249989
									],
									[
										249990,
										249992
									],
									[
										250058,
										250060
									],
									[
										250061,
										250063
									],
									[
										250129,
										250131
									],
									[
										250132,
										250134
									],
									[
										250203,
										250205
									],
									[
										250206,
										250208
									],
									[
										250277,
										250279
									],
									[
										250280,
										250282
									],
									[
										250471,
										250473
									],
									[
										250474,
										250476
									],
									[
										250663,
										250665
									],
									[
										250666,
										250668
									],
									[
										250838,
										250840
									],
									[
										251130,
										251132
									],
									[
										251160,
										251162
									],
									[
										251234,
										251236
									],
									[
										251261,
										251263
									],
									[
										251335,
										251337
									],
									[
										251362,
										251364
									],
									[
										251436,
										251438
									],
									[
										251463,
										251465
									],
									[
										251537,
										251539
									],
									[
										251568,
										251570
									],
									[
										251642,
										251644
									],
									[
										251681,
										251683
									],
									[
										251755,
										251757
									],
									[
										251784,
										251786
									],
									[
										251858,
										251860
									],
									[
										251889,
										251891
									],
									[
										251963,
										251965
									],
									[
										251994,
										251996
									],
									[
										252068,
										252070
									],
									[
										252100,
										252102
									],
									[
										252174,
										252176
									],
									[
										252219,
										252221
									],
									[
										252398,
										252400
									],
									[
										252444,
										252446
									],
									[
										252490,
										252492
									],
									[
										252731,
										252733
									],
									[
										252957,
										252959
									],
									[
										253059,
										253061
									],
									[
										253112,
										253114
									],
									[
										253311,
										253313
									],
									[
										253372,
										253374
									],
									[
										253571,
										253573
									],
									[
										253625,
										253627
									],
									[
										253834,
										253836
									],
									[
										253971,
										253973
									],
									[
										254121,
										254123
									],
									[
										254182,
										254184
									],
									[
										254232,
										254234
									],
									[
										254289,
										254291
									],
									[
										254408,
										254410
									],
									[
										254464,
										254466
									],
									[
										254708,
										254710
									],
									[
										254764,
										254766
									],
									[
										255033,
										255035
									],
									[
										255243,
										255245
									],
									[
										255462,
										255464
									],
									[
										255594,
										255596
									],
									[
										255795,
										255797
									],
									[
										255964,
										255966
									],
									[
										256129,
										256131
									],
									[
										256182,
										256184
									],
									[
										256228,
										256230
									],
									[
										256270,
										256272
									],
									[
										256440,
										256442
									],
									[
										256683,
										256685
									],
									[
										256958,
										256960
									],
									[
										257150,
										257152
									],
									[
										257353,
										257355
									],
									[
										257576,
										257578
									],
									[
										257809,
										257811
									],
									[
										257987,
										257989
									],
									[
										258214,
										258216
									],
									[
										258392,
										258394
									],
									[
										258581,
										258583
									],
									[
										258745,
										258747
									],
									[
										258788,
										258790
									],
									[
										258860,
										258862
									],
									[
										258870,
										258872
									],
									[
										258880,
										258882
									],
									[
										258923,
										258925
									],
									[
										259028,
										259030
									],
									[
										259037,
										259039
									],
									[
										259046,
										259048
									],
									[
										259088,
										259090
									],
									[
										259293,
										259295
									],
									[
										259337,
										259339
									],
									[
										259474,
										259476
									],
									[
										259669,
										259671
									],
									[
										259860,
										259862
									],
									[
										259869,
										259871
									],
									[
										260043,
										260045
									],
									[
										260057,
										260059
									],
									[
										260077,
										260079
									],
									[
										260085,
										260087
									],
									[
										260239,
										260241
									],
									[
										260344,
										260346
									],
									[
										260502,
										260504
									],
									[
										260556,
										260558
									],
									[
										260571,
										260573
									],
									[
										260590,
										260592
									],
									[
										260636,
										260638
									],
									[
										260651,
										260653
									],
									[
										260670,
										260672
									],
									[
										260724,
										260726
									],
									[
										260739,
										260741
									],
									[
										260762,
										260764
									],
									[
										260801,
										260803
									],
									[
										260816,
										260818
									],
									[
										260839,
										260841
									],
									[
										260873,
										260875
									],
									[
										260959,
										260961
									],
									[
										260974,
										260976
									],
									[
										260999,
										261001
									],
									[
										261040,
										261042
									],
									[
										261055,
										261057
									],
									[
										261109,
										261111
									],
									[
										261176,
										261178
									],
									[
										261240,
										261242
									],
									[
										261255,
										261257
									],
									[
										261398,
										261400
									],
									[
										261495,
										261497
									],
									[
										261644,
										261646
									],
									[
										261706,
										261708
									],
									[
										261896,
										261898
									],
									[
										261933,
										261935
									],
									[
										262084,
										262086
									],
									[
										262219,
										262221
									],
									[
										262275,
										262277
									],
									[
										262435,
										262437
									],
									[
										262582,
										262584
									],
									[
										262727,
										262729
									],
									[
										262851,
										262853
									],
									[
										263033,
										263035
									],
									[
										263327,
										263329
									],
									[
										263469,
										263471
									],
									[
										263774,
										263776
									],
									[
										263877,
										263879
									],
									[
										264056,
										264058
									],
									[
										264266,
										264268
									],
									[
										264396,
										264398
									],
									[
										264651,
										264653
									],
									[
										264781,
										264783
									],
									[
										265001,
										265003
									],
									[
										265182,
										265184
									],
									[
										265338,
										265340
									],
									[
										265488,
										265490
									],
									[
										265768,
										265770
									],
									[
										265945,
										265947
									],
									[
										266128,
										266130
									],
									[
										266184,
										266186
									],
									[
										266264,
										266266
									],
									[
										266418,
										266420
									],
									[
										266471,
										266473
									],
									[
										266568,
										266570
									],
									[
										266611,
										266613
									],
									[
										266719,
										266721
									],
									[
										266785,
										266787
									],
									[
										266925,
										266927
									],
									[
										267048,
										267050
									],
									[
										267175,
										267177
									],
									[
										267240,
										267242
									],
									[
										267247,
										267249
									],
									[
										267289,
										267291
									],
									[
										267379,
										267381
									],
									[
										267525,
										267527
									],
									[
										267684,
										267686
									],
									[
										267772,
										267774
									],
									[
										267872,
										267874
									],
									[
										267936,
										267938
									],
									[
										267953,
										267955
									],
									[
										267971,
										267973
									],
									[
										268020,
										268022
									],
									[
										268130,
										268132
									],
									[
										268202,
										268204
									],
									[
										268265,
										268267
									],
									[
										268313,
										268315
									],
									[
										268320,
										268322
									],
									[
										268435,
										268437
									],
									[
										268557,
										268559
									],
									[
										268683,
										268685
									],
									[
										268958,
										268960
									],
									[
										269146,
										269148
									],
									[
										269173,
										269175
									],
									[
										269349,
										269351
									],
									[
										269381,
										269383
									],
									[
										269406,
										269408
									],
									[
										269424,
										269426
									],
									[
										269470,
										269472
									],
									[
										269692,
										269694
									],
									[
										269716,
										269718
									],
									[
										269783,
										269785
									],
									[
										269921,
										269923
									],
									[
										270075,
										270077
									],
									[
										270226,
										270228
									],
									[
										270368,
										270370
									],
									[
										270515,
										270517
									],
									[
										270635,
										270637
									],
									[
										270671,
										270673
									],
									[
										270876,
										270878
									],
									[
										271072,
										271074
									],
									[
										271225,
										271227
									],
									[
										271391,
										271393
									],
									[
										271561,
										271563
									],
									[
										271616,
										271618
									],
									[
										271654,
										271656
									],
									[
										271696,
										271698
									],
									[
										271827,
										271829
									],
									[
										271977,
										271979
									],
									[
										272047,
										272049
									],
									[
										272117,
										272119
									],
									[
										272238,
										272240
									],
									[
										272291,
										272293
									],
									[
										272491,
										272493
									],
									[
										272577,
										272579
									],
									[
										272634,
										272636
									],
									[
										272691,
										272693
									],
									[
										272748,
										272750
									],
									[
										272805,
										272807
									],
									[
										272916,
										272918
									],
									[
										273003,
										273005
									],
									[
										273133,
										273135
									],
									[
										273288,
										273290
									],
									[
										273307,
										273309
									],
									[
										273403,
										273405
									],
									[
										273422,
										273424
									],
									[
										273518,
										273520
									],
									[
										273537,
										273539
									],
									[
										273633,
										273635
									],
									[
										273652,
										273654
									],
									[
										273748,
										273750
									],
									[
										273767,
										273769
									],
									[
										273928,
										273930
									],
									[
										273975,
										273977
									],
									[
										274031,
										274033
									],
									[
										274037,
										274039
									],
									[
										274058,
										274060
									],
									[
										274103,
										274105
									],
									[
										274109,
										274111
									],
									[
										274130,
										274132
									],
									[
										274229,
										274231
									],
									[
										274277,
										274279
									],
									[
										274418,
										274420
									],
									[
										274426,
										274428
									],
									[
										274486,
										274488
									],
									[
										274500,
										274502
									],
									[
										274641,
										274643
									],
									[
										274646,
										274648
									],
									[
										274689,
										274691
									],
									[
										274701,
										274703
									],
									[
										274800,
										274802
									],
									[
										274805,
										274807
									],
									[
										274848,
										274850
									],
									[
										274860,
										274862
									],
									[
										274997,
										274999
									],
									[
										275138,
										275140
									],
									[
										275272,
										275274
									],
									[
										275287,
										275289
									],
									[
										275306,
										275308
									],
									[
										275380,
										275382
									],
									[
										275395,
										275397
									],
									[
										275414,
										275416
									],
									[
										275508,
										275510
									],
									[
										275523,
										275525
									],
									[
										275542,
										275544
									],
									[
										275616,
										275618
									],
									[
										275631,
										275633
									],
									[
										275650,
										275652
									],
									[
										275769,
										275771
									],
									[
										275833,
										275835
									],
									[
										275871,
										275873
									],
									[
										275917,
										275919
									],
									[
										276026,
										276028
									],
									[
										276090,
										276092
									],
									[
										276128,
										276130
									],
									[
										276174,
										276176
									],
									[
										276358,
										276360
									],
									[
										276507,
										276509
									],
									[
										276571,
										276573
									],
									[
										276777,
										276779
									],
									[
										276800,
										276802
									],
									[
										276940,
										276942
									],
									[
										276989,
										276991
									],
									[
										276996,
										276998
									],
									[
										277111,
										277113
									],
									[
										277233,
										277235
									],
									[
										277359,
										277361
									],
									[
										277538,
										277540
									],
									[
										277661,
										277663
									],
									[
										277788,
										277790
									],
									[
										277853,
										277855
									],
									[
										277860,
										277862
									],
									[
										277903,
										277905
									],
									[
										278048,
										278050
									],
									[
										278098,
										278100
									],
									[
										278257,
										278259
									],
									[
										278298,
										278300
									],
									[
										278404,
										278406
									],
									[
										278458,
										278460
									],
									[
										278612,
										278614
									],
									[
										278666,
										278668
									],
									[
										278790,
										278792
									],
									[
										278827,
										278829
									],
									[
										278994,
										278996
									],
									[
										279104,
										279106
									],
									[
										279269,
										279271
									],
									[
										279299,
										279301
									],
									[
										279465,
										279467
									],
									[
										279603,
										279605
									],
									[
										279711,
										279713
									],
									[
										279836,
										279838
									],
									[
										279879,
										279881
									],
									[
										279924,
										279926
									],
									[
										280081,
										280083
									],
									[
										280244,
										280246
									],
									[
										280288,
										280290
									],
									[
										280332,
										280334
									],
									[
										280391,
										280393
									],
									[
										280465,
										280467
									],
									[
										280705,
										280707
									],
									[
										280917,
										280919
									],
									[
										281074,
										281076
									],
									[
										281234,
										281236
									],
									[
										281405,
										281407
									],
									[
										281684,
										281686
									],
									[
										281837,
										281839
									],
									[
										281864,
										281866
									],
									[
										281954,
										281956
									],
									[
										282079,
										282081
									],
									[
										282249,
										282251
									],
									[
										282443,
										282445
									],
									[
										282725,
										282727
									],
									[
										282835,
										282837
									],
									[
										282855,
										282857
									],
									[
										282868,
										282870
									],
									[
										282918,
										282920
									],
									[
										283090,
										283092
									],
									[
										283312,
										283314
									],
									[
										283432,
										283434
									],
									[
										283597,
										283599
									],
									[
										283623,
										283625
									],
									[
										283853,
										283855
									],
									[
										283993,
										283995
									],
									[
										284224,
										284226
									],
									[
										284385,
										284387
									],
									[
										284495,
										284497
									],
									[
										284559,
										284561
									],
									[
										284610,
										284612
									],
									[
										284701,
										284703
									],
									[
										284893,
										284895
									],
									[
										284923,
										284925
									],
									[
										285087,
										285089
									],
									[
										285189,
										285191
									],
									[
										285292,
										285294
									],
									[
										285370,
										285372
									],
									[
										285494,
										285496
									],
									[
										285519,
										285521
									],
									[
										285554,
										285556
									],
									[
										285656,
										285658
									],
									[
										285707,
										285709
									],
									[
										285776,
										285778
									],
									[
										285813,
										285815
									],
									[
										285907,
										285909
									],
									[
										286019,
										286021
									],
									[
										286258,
										286260
									],
									[
										286479,
										286481
									],
									[
										286611,
										286613
									],
									[
										286658,
										286660
									],
									[
										286819,
										286821
									],
									[
										286884,
										286886
									],
									[
										286975,
										286977
									],
									[
										287048,
										287050
									],
									[
										287257,
										287259
									],
									[
										287542,
										287544
									],
									[
										287649,
										287651
									],
									[
										287688,
										287690
									],
									[
										287836,
										287838
									],
									[
										287936,
										287938
									],
									[
										288046,
										288048
									],
									[
										288089,
										288091
									],
									[
										288208,
										288210
									],
									[
										288360,
										288362
									],
									[
										288470,
										288472
									],
									[
										288532,
										288534
									],
									[
										288628,
										288630
									],
									[
										288690,
										288692
									],
									[
										288786,
										288788
									],
									[
										288853,
										288855
									],
									[
										289052,
										289054
									],
									[
										289184,
										289186
									],
									[
										289231,
										289233
									],
									[
										289371,
										289373
									],
									[
										289452,
										289454
									],
									[
										289623,
										289625
									],
									[
										289801,
										289803
									],
									[
										289941,
										289943
									],
									[
										289980,
										289982
									],
									[
										290128,
										290130
									],
									[
										290228,
										290230
									],
									[
										290338,
										290340
									],
									[
										290377,
										290379
									],
									[
										290496,
										290498
									],
									[
										290648,
										290650
									],
									[
										290758,
										290760
									],
									[
										290820,
										290822
									],
									[
										290916,
										290918
									],
									[
										290978,
										290980
									],
									[
										291074,
										291076
									],
									[
										291141,
										291143
									],
									[
										291378,
										291380
									],
									[
										291396,
										291398
									],
									[
										291454,
										291456
									],
									[
										291472,
										291474
									],
									[
										291547,
										291549
									],
									[
										291690,
										291692
									],
									[
										291868,
										291870
									],
									[
										291980,
										291982
									],
									[
										292134,
										292136
									],
									[
										292137,
										292139
									],
									[
										292154,
										292156
									],
									[
										292157,
										292159
									],
									[
										292201,
										292203
									],
									[
										292204,
										292206
									],
									[
										292221,
										292223
									],
									[
										292224,
										292226
									],
									[
										292232,
										292234
									],
									[
										292269,
										292271
									],
									[
										292272,
										292274
									],
									[
										292289,
										292291
									],
									[
										292292,
										292294
									],
									[
										292337,
										292339
									],
									[
										292340,
										292342
									],
									[
										292357,
										292359
									],
									[
										292360,
										292362
									],
									[
										292405,
										292407
									],
									[
										292408,
										292410
									],
									[
										292425,
										292427
									],
									[
										292428,
										292430
									],
									[
										292559,
										292561
									],
									[
										292562,
										292564
									],
									[
										292579,
										292581
									],
									[
										292582,
										292584
									],
									[
										292615,
										292617
									],
									[
										292618,
										292620
									],
									[
										292635,
										292637
									],
									[
										292638,
										292640
									],
									[
										292671,
										292673
									],
									[
										292674,
										292676
									],
									[
										292691,
										292693
									],
									[
										292694,
										292696
									],
									[
										292727,
										292729
									],
									[
										292730,
										292732
									],
									[
										292747,
										292749
									],
									[
										292750,
										292752
									],
									[
										292783,
										292785
									],
									[
										292786,
										292788
									],
									[
										292803,
										292805
									],
									[
										292806,
										292808
									],
									[
										292941,
										292943
									],
									[
										292967,
										292969
									],
									[
										292986,
										292988
									],
									[
										293162,
										293164
									],
									[
										293201,
										293203
									],
									[
										293206,
										293208
									],
									[
										293240,
										293242
									],
									[
										293280,
										293282
									],
									[
										293320,
										293322
									],
									[
										293358,
										293360
									],
									[
										293434,
										293436
									],
									[
										293446,
										293448
									],
									[
										293493,
										293495
									],
									[
										293573,
										293575
									],
									[
										293625,
										293627
									],
									[
										293685,
										293687
									],
									[
										293699,
										293701
									],
									[
										293751,
										293753
									],
									[
										293950,
										293952
									],
									[
										293953,
										293955
									],
									[
										293970,
										293972
									],
									[
										293973,
										293975
									],
									[
										294048,
										294050
									],
									[
										294196,
										294198
									],
									[
										294199,
										294201
									],
									[
										294216,
										294218
									],
									[
										294219,
										294221
									],
									[
										294336,
										294338
									],
									[
										294339,
										294341
									],
									[
										294457,
										294459
									],
									[
										294565,
										294567
									],
									[
										294580,
										294582
									],
									[
										294597,
										294599
									],
									[
										294633,
										294635
									],
									[
										294766,
										294768
									],
									[
										294781,
										294783
									],
									[
										294798,
										294800
									],
									[
										294843,
										294845
									],
									[
										294860,
										294862
									],
									[
										294885,
										294887
									],
									[
										294900,
										294902
									],
									[
										295005,
										295007
									],
									[
										295022,
										295024
									],
									[
										295048,
										295050
									],
									[
										295063,
										295065
									],
									[
										295210,
										295212
									],
									[
										295353,
										295355
									],
									[
										295485,
										295487
									],
									[
										295641,
										295643
									],
									[
										295741,
										295743
									],
									[
										295837,
										295839
									],
									[
										295955,
										295957
									],
									[
										296000,
										296002
									],
									[
										296008,
										296010
									],
									[
										296063,
										296065
									],
									[
										296409,
										296412
									],
									[
										296602,
										296605
									],
									[
										296928,
										296931
									],
									[
										297156,
										297159
									],
									[
										297470,
										297473
									],
									[
										297737,
										297740
									],
									[
										297994,
										297997
									],
									[
										298177,
										298180
									],
									[
										298403,
										298406
									],
									[
										298564,
										298567
									],
									[
										298714,
										298717
									],
									[
										299009,
										299012
									],
									[
										299165,
										299168
									],
									[
										299494,
										299497
									],
									[
										299676,
										299679
									],
									[
										299940,
										299943
									],
									[
										300039,
										300042
									],
									[
										300177,
										300180
									],
									[
										300382,
										300385
									],
									[
										300706,
										300709
									],
									[
										300921,
										300924
									],
									[
										301174,
										301177
									],
									[
										301354,
										301357
									],
									[
										301607,
										301610
									],
									[
										301961,
										301964
									],
									[
										302157,
										302160
									],
									[
										302389,
										302392
									],
									[
										302567,
										302570
									],
									[
										302886,
										302889
									],
									[
										303228,
										303231
									],
									[
										303488,
										303491
									],
									[
										303785,
										303788
									],
									[
										303911,
										303914
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								303499,
								303499
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 27,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 98.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/gjtorikian/Developer/commandergenius/project/java/Video.java",
					"settings":
					{
						"buffer_size": 18238,
						"regions":
						{
						},
						"selection":
						[
							[
								10399,
								10399
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4238.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "share/lang.h",
					"settings":
					{
						"buffer_size": 1967,
						"regions":
						{
						},
						"selection":
						[
							[
								1359,
								1378
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 280.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "ball/demo.c",
					"settings":
					{
						"buffer_size": 10771,
						"regions":
						{
						},
						"selection":
						[
							[
								5200,
								5202
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2869.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "android/android_support.h",
					"settings":
					{
						"buffer_size": 1734,
						"regions":
						{
						},
						"selection":
						[
							[
								1725,
								1725
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 137.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "android/android_support.c",
					"settings":
					{
						"buffer_size": 1045,
						"regions":
						{
						},
						"selection":
						[
							[
								1045,
								1045
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "ball/main.c",
					"settings":
					{
						"buffer_size": 14082,
						"regions":
						{
						},
						"selection":
						[
							[
								12489,
								12489
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6689.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "share/video.c",
					"settings":
					{
						"buffer_size": 8055,
						"regions":
						{
						},
						"selection":
						[
							[
								2727,
								2727
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1024.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/gjtorikian/Developer/commandergenius/project/assets/data/po/fr.po",
					"settings":
					{
						"buffer_size": 57121,
						"regions":
						{
						},
						"selection":
						[
							[
								6484,
								6492
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 3953.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 28.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 190.55078125,
	"status_bar_visible": true
}
