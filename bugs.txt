Known bugs
==========

- With 4:3 screen aspect ratio the on-screen buttons are not shown on the inactive part of screen.

- Calling SDL_SetVideoMode() with SDL 1.3 several times makes it crash.

- Calling SDL_Init()/SDL_Quit() several times will make SDL 1.2 crash.

- SDL_FillRect() does not work with SDL 1.2 in HW mode (and probably with SDL 1.3 too).

- 32-bpp color mode does not work with SW video surface, 24-bpp and 32-bpp mode does not work with SDL_HWSURFACE.

- Fix broken sdtout on Telechips devices, by using --Wl,--wrap flag for the linker

- Text input window should show on-screen keyboard immediately, without "Touch here to start typing" msg.

Requested features
==================

- Split Settings.java into several files

- Show/hide screen controls with longpress on Text Edit button.

- Support of libjnigraphics (it will disable on-screen keyboard, only SW SDL screen surface supported)

- Floating on-screen joystick - initially invisible, it appears when you touch the screen,
  centered on your finger, then it slides with your finger if you bump the joystick edge.

- Export phone vibrator to SDL - interface is available in SDL 1.3

- Control screen brightness with SDL_SetGamma()

- Zoom in-out whole screen in SW mode with some SDL key -
  much like the "On-screen magnifying glass" feature (lazy porter's golden hammer)

- HDMI output (HTC Evo and Samsung Epic support that):
  HDMI output will be tricky - I've read the doc here:
  https://docs.google.com/View?id=dhtsnvs6_57d2hpqtgr#4_1_HDMI_output_support_338048
  It says that in order to output something to HDMI you need to have a VideoView class visible on screen:
  http://developer.android.com/reference/android/widget/VideoView.html .
  This class does not have any method like "showMyOwnCustomImage()",
  it just plays the video from the given path, so obvious solution is to create
  special FIFO file or open a socket, point the VideoView to play this FIFO or socket,
  and then write raw uncompressed video frames to that FIFO with some small header so that
  VideoView will recognize it as a proper video format.
  UQM gives 5 FPS without such hacks, if I'll implement that FPS will drop to 1-2
  (maybe not that bad, I have to actually try that), because you'll have to do huge memcpy(),
  plus VideoView will contain some buffer to ensure the playback is smooth,
  so the data on your TV will lag halfsecond behind the data on the device screen.

